(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("token-io", [], factory);
	else if(typeof exports === 'object')
		exports["token-io"] = factory();
	else
		root["token-io"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(3);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	!(function(global) {
	  "use strict";

	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var iteratorSymbol =
	    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };

	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }

	  function AsyncIterator(generator) {
	    // This invoke function is written in a style that assumes some
	    // calling function (or Promise) will handle exceptions.
	    function invoke(method, arg) {
	      var result = generator[method](arg);
	      var value = result.value;
	      return value instanceof AwaitArgument
	        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
	        : Promise.resolve(value).then(function(unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration. If the Promise is rejected, however, the
	            // result for this iteration will be rejected with the same
	            // reason. Note that rejections of yielded Promises are not
	            // thrown back into the generator function, as is the case
	            // when an awaited Promise is rejected. This difference in
	            // behavior between yield and await is important, because it
	            // allows the consumer to decide what to do with the yielded
	            // rejection (swallow it and continue, manually .throw it back
	            // into the generator, abandon iteration, whatever). With
	            // await, by contrast, there is no opportunity to examine the
	            // rejection reason outside the generator function, so the
	            // only option is to throw it from the await expression, and
	            // let the generator function handle the exception.
	            result.value = unwrapped;
	            return result;
	          });
	    }

	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }

	    var invokeNext = invoke.bind(generator, "next");
	    var invokeThrow = invoke.bind(generator, "throw");
	    var invokeReturn = invoke.bind(generator, "return");
	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return invoke(method, arg);
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : new Promise(function (resolve) {
	          resolve(callInvokeWithMethodAndArg());
	        });
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;

	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }

	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }

	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );

	          if (record.type === "throw") {
	            context.delegate = null;

	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }

	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;

	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }

	          context.delegate = null;
	        }

	        if (method === "next") {
	          context._sent = arg;

	          if (state === GenStateSuspendedYield) {
	            context.sent = arg;
	          } else {
	            context.sent = undefined;
	          }
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }

	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }

	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          var info = {
	            value: record.arg,
	            done: context.done
	          };

	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      this.sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }

	      return ContinueSentinel;
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Token = __webpack_require__(4);

	var _Token2 = _interopRequireDefault(_Token);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	module.exports = _Token2.default;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Crypto = __webpack_require__(5);

	var _Crypto2 = _interopRequireDefault(_Crypto);

	var _BrowserCryptoEngine = __webpack_require__(29);

	var _BrowserCryptoEngine2 = _interopRequireDefault(_BrowserCryptoEngine);

	var _MemoryCryptoEngine = __webpack_require__(32);

	var _MemoryCryptoEngine2 = _interopRequireDefault(_MemoryCryptoEngine);

	var _ManualCryptoEngine = __webpack_require__(34);

	var _ManualCryptoEngine2 = _interopRequireDefault(_ManualCryptoEngine);

	var _UnsecuredFileCryptoEngine = __webpack_require__(35);

	var _UnsecuredFileCryptoEngine2 = _interopRequireDefault(_UnsecuredFileCryptoEngine);

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	var _Member = __webpack_require__(38);

	var _Member2 = _interopRequireDefault(_Member);

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	var _HttpClient = __webpack_require__(69);

	var _HttpClient2 = _interopRequireDefault(_HttpClient);

	var _TokenRequest = __webpack_require__(72);

	var _TokenRequest2 = _interopRequireDefault(_TokenRequest);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// Promise polyfill for IE and older browsers
	__webpack_require__(73).polyfill();

	/**
	 * Main entry object. Allows creation of members, provisioning of devices, logging in,
	 * sending notifications, etc, as well as access to other SDK classes.
	 */

	var Token = function () {
	    /**
	     * Construct the Token SDK object, pointing to the given environment.
	     *
	     * @param {string} env - which environment (gateway) to use, (e.g. prd)
	     * @param {string} developerKey - the developer key
	     * @param {string} keyDir - absolute directory name of key storage directory
	     * @param {function} globalRpcErrorCallback - callback to invoke on any cross-cutting RPC
	     * @param {bool} loggingEnabled - enable HTTP error logging if true
	     * call error. For example: SDK version mismatch
	     * @param {string} customSdkUrl - set to override the default sdk url
	     */
	    function Token() {
	        var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'prd';
	        var developerKey = arguments[1];
	        var keyDir = arguments[2];
	        var globalRpcErrorCallback = arguments[3];
	        var loggingEnabled = arguments[4];
	        var customSdkUrl = arguments[5];

	        _classCallCheck(this, Token);

	        this._env = env;
	        this._globalRpcErrorCallback = globalRpcErrorCallback;
	        this._developerKey = developerKey;
	        this._loggingEnabled = loggingEnabled;
	        this._customSdkUrl = customSdkUrl;
	        this._unauthenticatedClient = new _HttpClient2.default(env, developerKey, this._globalRpcErrorCallback, loggingEnabled, customSdkUrl);

	        /* Available security levels for keys */
	        this.KeyLevel = _config2.default.KeyLevel;

	        /* Crypto utility functions */
	        this.Crypto = _Crypto2.default;

	        /* Other utility functions */
	        this.Util = _Util2.default;

	        /* Class for using the browser crypto engine */
	        this.BrowserCryptoEngine = _BrowserCryptoEngine2.default;

	        /* Class for using the memory crypto engine */
	        this.MemoryCryptoEngine = _MemoryCryptoEngine2.default;

	        /* Class for using the hardcoded crypto engine */
	        this.ManualCryptoEngine = _ManualCryptoEngine2.default;

	        if (keyDir) {
	            _UnsecuredFileCryptoEngine2.default.setDirRoot(keyDir);
	        }
	        /* Class for the Unsecured filestore key root */
	        this.UnsecuredFileCryptoEngine = _UnsecuredFileCryptoEngine2.default;

	        /* Class for constructing TokenRequest objects */
	        this.TokenRequest = _TokenRequest2.default;
	    }

	    /**
	     * If we're on a token page, sets up an iframe to avoid CORS preflights. All requests in this
	     * window will be routed through the iframe.
	     *
	     * @param {string} env - which environment (gateway) to use, (e.g. prd)
	     */


	    _createClass(Token, [{
	        key: "aliasExists",


	        /**
	         * Checks if a given alias already exists
	         *
	         * @param {Object} alias - alias to check
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} result - true if alias exists, false otherwise
	         */
	        value: function aliasExists(alias, realm) {
	            var _this = this;

	            return _Util2.default.callAsync(this.aliasExists, function _callee() {
	                var res;
	                return regeneratorRuntime.async(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return regeneratorRuntime.awrap(_this._unauthenticatedClient.resolveAlias(alias, realm));

	                            case 2:
	                                res = _context.sent;
	                                return _context.abrupt("return", res.data.member && res.data.member.id ? res.data.member.id !== "" : false);

	                            case 4:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, null, _this);
	            });
	        }

	        /**
	         * Resolve an alias to a member
	         *
	         * @param {Object} alias - alias to lookup
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} result - TokenMember protobuf object
	         */

	    }, {
	        key: "resolveAlias",
	        value: function resolveAlias(alias, realm) {
	            var _this2 = this;

	            return _Util2.default.callAsync(this.resolveAlias, function _callee2() {
	                var res;
	                return regeneratorRuntime.async(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return regeneratorRuntime.awrap(_this2._unauthenticatedClient.resolveAlias(alias, realm));

	                            case 2:
	                                res = _context2.sent;
	                                return _context2.abrupt("return", res.data.member);

	                            case 4:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, null, _this2);
	            });
	        }

	        /**
	         * Creates a member with a alias and a keypair, using the provided engine and member type.
	         *
	         * @param  {Object} alias - alias to set for member,
	         *                  falsy value or empty object for a temporary member without an alias
	         * @param  {Class} CryptoEngine - engine to use for key creation and storage
	         * @param  {String} memberType - type of member to create. "PERSONAL" if undefined
	         * @param  {String} realm - (optional) realm of the alias
	         * @return {Promise} member - Promise of created Member
	         */

	    }, {
	        key: "createMember",
	        value: function createMember(alias, CryptoEngine, memberType, realm) {
	            var _this3 = this;

	            return _Util2.default.callAsync(this.createMember, function _callee3() {
	                var response, engine, pk1, pk2, pk3, member;
	                return regeneratorRuntime.async(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return regeneratorRuntime.awrap(_this3._unauthenticatedClient.createMemberId(memberType));

	                            case 2:
	                                response = _context3.sent;
	                                engine = new CryptoEngine(response.data.memberId);
	                                _context3.next = 6;
	                                return regeneratorRuntime.awrap(engine.generateKey('PRIVILEGED'));

	                            case 6:
	                                pk1 = _context3.sent;
	                                _context3.next = 9;
	                                return regeneratorRuntime.awrap(engine.generateKey('STANDARD'));

	                            case 9:
	                                pk2 = _context3.sent;
	                                _context3.next = 12;
	                                return regeneratorRuntime.awrap(engine.generateKey('LOW'));

	                            case 12:
	                                pk3 = _context3.sent;
	                                _context3.next = 15;
	                                return regeneratorRuntime.awrap(_this3._unauthenticatedClient.approveFirstKeys(response.data.memberId, [pk1, pk2, pk3], engine));

	                            case 15:
	                                member = new _Member2.default(_this3._env, response.data.memberId, engine, _this3._developerKey, _this3._globalRpcErrorCallback, _this3._loggingEnabled, _this3._customSdkUrl);

	                                if (!(alias && Object.keys(alias).length !== 0)) {
	                                    _context3.next = 19;
	                                    break;
	                                }

	                                _context3.next = 19;
	                                return regeneratorRuntime.awrap(member.addAlias(alias, realm));

	                            case 19:
	                                return _context3.abrupt("return", member);

	                            case 20:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, null, _this3);
	            });
	        }

	        /**
	         * Creates a member with a alias and a keypair, using the provided engine
	         *
	         * @param  {Object} alias - alias to set for member,
	         *                  falsy value or empty object for a temporary member without an alias
	         * @param  {Class} CryptoEngine - engine to use for key creation and storage
	         * @param  {string} realm - (optional) realm of the alias
	         * @return {Promise} member - Promise of created Member
	         */

	    }, {
	        key: "createBusinessMember",
	        value: function createBusinessMember(alias, CryptoEngine, realm) {
	            return this.createMember(alias, CryptoEngine, "BUSINESS", realm);
	        }

	        /**
	         * Provisions a new device for an existing user. The call generates a set
	         * of keys that are returned back. The keys need to be approved by an
	         * existing device/keys.
	         *
	         * @param {string} alias - user to provision the device for
	         * @param  {Class} CryptoEngine - engine to use for key creation and storage
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} deviceInfo - information about the device provisioned
	         */

	    }, {
	        key: "provisionDevice",
	        value: function provisionDevice(alias, CryptoEngine, realm) {
	            var _this4 = this;

	            return _Util2.default.callAsync(this.provisionDevice, function _callee4() {
	                var res, engine, pk1, pk2, pk3;
	                return regeneratorRuntime.async(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                _context4.next = 2;
	                                return regeneratorRuntime.awrap(_this4._unauthenticatedClient.resolveAlias(alias, realm));

	                            case 2:
	                                res = _context4.sent;

	                                if (!(!res.data.member || !res.data.member.id)) {
	                                    _context4.next = 5;
	                                    break;
	                                }

	                                throw new Error('Invalid alias');

	                            case 5:
	                                engine = new CryptoEngine(res.data.member.id);
	                                _context4.next = 8;
	                                return regeneratorRuntime.awrap(engine.generateKey('PRIVILEGED'));

	                            case 8:
	                                pk1 = _context4.sent;
	                                _context4.next = 11;
	                                return regeneratorRuntime.awrap(engine.generateKey('STANDARD'));

	                            case 11:
	                                pk2 = _context4.sent;
	                                _context4.next = 14;
	                                return regeneratorRuntime.awrap(engine.generateKey('LOW'));

	                            case 14:
	                                pk3 = _context4.sent;
	                                return _context4.abrupt("return", {
	                                    memberId: res.data.member.id,
	                                    keys: [pk1, pk2, pk3]
	                                });

	                            case 16:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, null, _this4);
	            });
	        }

	        /**
	         * Provisions a new device for an existing user. The call generates a set
	         * of keys that are returned back. The keys need to be approved by an
	         * existing device/keys. This only generates one (LOW) key.
	         *
	         * @param {string} alias - user to provision the device for
	         * @param  {Class} CryptoEngine - engine to use for key creation and storage
	         * @param {string} realm - (optional) realm of the alias
	         * @param {number} expirationMs - (optional) expiration duration of key in milliseconds
	         * @return {Promise} deviceInfo - information about the device provisioned
	         */

	    }, {
	        key: "provisionDeviceLow",
	        value: function provisionDeviceLow(alias, CryptoEngine, realm) {
	            var _this5 = this;

	            var expirationMs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _config2.default.lowKeyExpiration;

	            return _Util2.default.callAsync(this.provisionDeviceLow, function _callee5() {
	                var res, engine, pk1;
	                return regeneratorRuntime.async(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                _context5.next = 2;
	                                return regeneratorRuntime.awrap(_this5._unauthenticatedClient.resolveAlias(alias, realm));

	                            case 2:
	                                res = _context5.sent;

	                                if (!(!res.data.member || !res.data.member.id)) {
	                                    _context5.next = 5;
	                                    break;
	                                }

	                                throw new Error('Invalid alias');

	                            case 5:
	                                engine = new CryptoEngine(res.data.member.id);
	                                _context5.next = 8;
	                                return regeneratorRuntime.awrap(engine.generateKey('LOW', expirationMs));

	                            case 8:
	                                pk1 = _context5.sent;
	                                return _context5.abrupt("return", {
	                                    memberId: res.data.member.id,
	                                    keys: [pk1]
	                                });

	                            case 10:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, null, _this5);
	            });
	        }

	        /**
	         * Returns "logged-in" member that uses keys already in the CryptoEngine.
	         * If memberId is not provided, the last member to "log in" will be used.
	         *
	         * @param  {Class} CryptoEngine - engine to use for key creation and storage
	         * @param {string} memberId - optional id of the member we want to log in
	         * @return {Promise} member - instantiated member
	         */

	    }, {
	        key: "getMember",
	        value: function getMember(CryptoEngine, memberId) {
	            var _this6 = this;

	            return _Util2.default.callSync(this.getMember, function () {
	                if (!memberId && typeof CryptoEngine.getActiveMemberId === 'function') {
	                    memberId = CryptoEngine.getActiveMemberId();
	                }
	                var engine = new CryptoEngine(memberId);
	                return new _Member2.default(_this6._env, memberId, engine, _this6._developerKey, _this6._globalRpcErrorCallback, _this6._loggingEnabled, _this6._customSdkUrl);
	            });
	        }

	        /**
	         * Notifies subscribers that accounts should be linked, and passes the bank id and
	         * payload
	         *
	         * @param {Object} alias - alias to notify
	         * @param {string} bankAuthorization - bankAuthorization retrieved from bank
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} NotifyStatus - status
	         */

	    }, {
	        key: "notifyLinkAccounts",
	        value: function notifyLinkAccounts(alias, bankAuthorization, realm) {
	            var _this7 = this;

	            var body = {
	                linkAccounts: {
	                    bankAuthorization: bankAuthorization
	                }
	            };
	            return _Util2.default.callAsync(this.notifyLinkAccounts, function _callee6() {
	                var res;
	                return regeneratorRuntime.async(function _callee6$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                _context6.next = 2;
	                                return regeneratorRuntime.awrap(_this7._unauthenticatedClient.notify(alias, body, realm));

	                            case 2:
	                                res = _context6.sent;
	                                return _context6.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context6.stop();
	                        }
	                    }
	                }, null, _this7);
	            });
	        }

	        /**
	         * Notifies subscribers that a key should be added and passes the public Key and
	         * optional name
	         *
	         * @param {Object} alias - alias to notify
	         * @param {string} keyName - name for the new key, (e.g Chrome 53.0)
	         * @param {Object} key - key
	         * @param {string} level - key level
	         * @param {string} expiresMs - when the UI will time out
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} NotifyStatus - status
	         */

	    }, {
	        key: "notifyAddKey",
	        value: function notifyAddKey(alias, keyName, key, level, expiresMs, realm) {
	            var _this8 = this;

	            var body = {
	                addKey: {
	                    name: keyName,
	                    expiresMs: expiresMs,
	                    key: _extends({
	                        id: key.id,
	                        level: level,
	                        algorithm: key.algorithm,
	                        publicKey: _Crypto2.default.strKey(key.publicKey)
	                    }, key.expiresAtMs && { expiresAtMs: key.expiresAtMs })
	                }
	            };
	            return _Util2.default.callAsync(this.notifyAddKey, function _callee7() {
	                var res;
	                return regeneratorRuntime.async(function _callee7$(_context7) {
	                    while (1) {
	                        switch (_context7.prev = _context7.next) {
	                            case 0:
	                                _context7.next = 2;
	                                return regeneratorRuntime.awrap(_this8._unauthenticatedClient.notify(alias, body, realm));

	                            case 2:
	                                res = _context7.sent;
	                                return _context7.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context7.stop();
	                        }
	                    }
	                }, null, _this8);
	            });
	        }

	        /**
	         * Notifies subscribed devices that accounts should be linked, and passes the bank id and
	         * payload
	         *
	         * @param {Object} alias - alias to notify
	         * @param {string} bankAuthorization - bankAuthorization retrieved from bank
	         * @param {string} keyName - name for the new key, (e.g Chrome 53.0)
	         * @param {Object} key - key
	         * @param {string} level - key level
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} NotifyStatus - status
	         */

	    }, {
	        key: "notifyLinkAccountsAndAddKey",
	        value: function notifyLinkAccountsAndAddKey(alias, bankAuthorization, keyName, key, level, realm) {
	            var _this9 = this;

	            var body = {
	                linkAccountsAndAddKey: {
	                    linkAccounts: {
	                        bankAuthorization: bankAuthorization
	                    },
	                    addKey: {
	                        name: keyName,
	                        key: _extends({
	                            id: key.id,
	                            level: level,
	                            algorithm: key.algorithm,
	                            publicKey: _Crypto2.default.strKey(key.publicKey)
	                        }, key.expiresAtMs && { expiresAtMs: key.expiresAtMs })
	                    }
	                }
	            };
	            return _Util2.default.callAsync(this.notifyLinkAccountsAndAddKey, function _callee8() {
	                var res;
	                return regeneratorRuntime.async(function _callee8$(_context8) {
	                    while (1) {
	                        switch (_context8.prev = _context8.next) {
	                            case 0:
	                                _context8.next = 2;
	                                return regeneratorRuntime.awrap(_this9._unauthenticatedClient.notify(alias, body, realm));

	                            case 2:
	                                res = _context8.sent;
	                                return _context8.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context8.stop();
	                        }
	                    }
	                }, null, _this9);
	            });
	        }

	        /**
	         * Sends a notification to a user to request a payment.
	         *
	         * @param {Object} tokenPayload - requested transfer token
	         * @return {Promise} NotifyStatus - status
	         */

	    }, {
	        key: "notifyPaymentRequest",
	        value: function notifyPaymentRequest(tokenPayload) {
	            var _this10 = this;

	            if (!tokenPayload.refId) {
	                tokenPayload.refId = _Util2.default.generateNonce();
	            }
	            return _Util2.default.callAsync(this.notifyPaymentRequest, function _callee9() {
	                var res;
	                return regeneratorRuntime.async(function _callee9$(_context9) {
	                    while (1) {
	                        switch (_context9.prev = _context9.next) {
	                            case 0:
	                                _context9.next = 2;
	                                return regeneratorRuntime.awrap(_this10._unauthenticatedClient.notifyPaymentRequest(tokenPayload));

	                            case 2:
	                                res = _context9.sent;
	                                return _context9.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context9.stop();
	                        }
	                    }
	                }, null, _this10);
	            });
	        }

	        /**
	         * Notifies subscribed devices that a token payload should be endorsed and keys should be
	         * added.
	         *
	         * @param {Object} tokenPayload - the endorseAndAddKey payload to be sent
	         * @param {Array} keys - token keys to be added
	         * @param {Object} deviceMetadata - device metadata of the keys
	         * @param {string} tokenRequestId - (optional) token request Id
	         * @param {string} bankId - (optional) bank Id
	         * @param {string} state - (optional) token request state for signing
	         * @return {Promise} result - notification Id and notify status
	         */

	    }, {
	        key: "notifyEndorseAndAddKey",
	        value: function notifyEndorseAndAddKey(tokenPayload, keys, deviceMetadata, tokenRequestId, bankId, state) {
	            var _this11 = this;

	            var endorseAndAddKey = {
	                payload: tokenPayload,
	                addKey: {
	                    keys: keys,
	                    deviceMetadata: deviceMetadata
	                },
	                tokenRequestId: tokenRequestId,
	                bankId: bankId,
	                state: state
	            };
	            return _Util2.default.callAsync(this.notifyEndorseAndAddKey, function _callee10() {
	                var res;
	                return regeneratorRuntime.async(function _callee10$(_context10) {
	                    while (1) {
	                        switch (_context10.prev = _context10.next) {
	                            case 0:
	                                _context10.next = 2;
	                                return regeneratorRuntime.awrap(_this11._unauthenticatedClient.notifyEndorseAndAddKey(endorseAndAddKey));

	                            case 2:
	                                res = _context10.sent;
	                                return _context10.abrupt("return", {
	                                    notificationId: res.data.notificationId,
	                                    status: res.data.status
	                                });

	                            case 4:
	                            case "end":
	                                return _context10.stop();
	                        }
	                    }
	                }, null, _this11);
	            });
	        }

	        /**
	         * Invalidate a notification.
	         *
	         * @param {Object} notificationId - the notification id to invalidate
	         * @return {Promise} NotifyStatus - status
	         */

	    }, {
	        key: "invalidateNotification",
	        value: function invalidateNotification(notificationId) {
	            var _this12 = this;

	            return _Util2.default.callAsync(this.invalidateNotification, function _callee11() {
	                var res;
	                return regeneratorRuntime.async(function _callee11$(_context11) {
	                    while (1) {
	                        switch (_context11.prev = _context11.next) {
	                            case 0:
	                                _context11.next = 2;
	                                return regeneratorRuntime.awrap(_this12._unauthenticatedClient.invalidateNotification(notificationId));

	                            case 2:
	                                res = _context11.sent;
	                                return _context11.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context11.stop();
	                        }
	                    }
	                }, null, _this12);
	            });
	        }

	        /**
	         * Gets a list of available banks for linking
	         *
	         * @param {Object} options - optional parameters for getBanks
	         * @return {Promise} banks - list of banks
	         */

	    }, {
	        key: "getBanks",
	        value: function getBanks(options) {
	            var _this13 = this;

	            return _Util2.default.callAsync(this.getBanks, function _callee12() {
	                var res;
	                return regeneratorRuntime.async(function _callee12$(_context12) {
	                    while (1) {
	                        switch (_context12.prev = _context12.next) {
	                            case 0:
	                                _context12.next = 2;
	                                return regeneratorRuntime.awrap(_this13._unauthenticatedClient.getBanks(options));

	                            case 2:
	                                res = _context12.sent;
	                                return _context12.abrupt("return", res.data);

	                            case 4:
	                            case "end":
	                                return _context12.stop();
	                        }
	                    }
	                }, null, _this13);
	            });
	        }

	        /**
	         * Retrieves a request for a token. Called by the web(user) or by a TPP, to get request details.
	         *
	         * @param {string} requestId - token request id
	         * @return {Promise} TokenRequest - token request
	         */

	    }, {
	        key: "retrieveTokenRequest",
	        value: function retrieveTokenRequest(requestId) {
	            var _this14 = this;

	            return _Util2.default.callAsync(this.retrieveTokenRequest, function _callee13() {
	                var res;
	                return regeneratorRuntime.async(function _callee13$(_context13) {
	                    while (1) {
	                        switch (_context13.prev = _context13.next) {
	                            case 0:
	                                _context13.next = 2;
	                                return regeneratorRuntime.awrap(_this14._unauthenticatedClient.retrieveTokenRequest(requestId));

	                            case 2:
	                                res = _context13.sent;
	                                return _context13.abrupt("return", res.data.tokenRequest);

	                            case 4:
	                            case "end":
	                                return _context13.stop();
	                        }
	                    }
	                }, null, _this14);
	            });
	        }

	        /**
	         * Generate a token request authorization URL.
	         *
	         * @param {string} requestId - request id
	         * @param {string} state - original state
	         * @param {string} csrfToken - CSRF token
	         * @return {string} tokenRequestUrl - token request URL
	         */

	    }, {
	        key: "generateTokenRequestUrl",
	        value: function generateTokenRequestUrl(requestId) {
	            var _this15 = this;

	            var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
	            var csrfToken = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

	            return _Util2.default.callSync(this.generateTokenRequestUrl, function () {
	                var tokenRequestState = {
	                    csrfTokenHash: _Util2.default.hashString(csrfToken),
	                    innerState: state
	                };
	                var serializedState = encodeURIComponent(JSON.stringify(tokenRequestState));

	                return (_this15._customSdkUrl || _config2.default.webAppUrls[_this15._env]) + ("/request-token/" + requestId + "?state=" + serializedState);
	            });
	        }

	        /**
	         * Parse a token request callback URL, verify the state and signature,
	         * and return the inner state and token id.
	         *
	         * @param {string} callbackUrl - callback URL
	         * @param {string} csrfToken - CSRF token
	         * @return {Promise} result - inner state and token id
	         */

	    }, {
	        key: "parseTokenRequestCallbackUrl",
	        value: function parseTokenRequestCallbackUrl(callbackUrl) {
	            var _this16 = this;

	            var csrfToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

	            return _Util2.default.callAsync(this.parseTokenRequestCallbackUrl, function _callee14() {
	                var tokenMember, urlParams, params, signingKey;
	                return regeneratorRuntime.async(function _callee14$(_context14) {
	                    while (1) {
	                        switch (_context14.prev = _context14.next) {
	                            case 0:
	                                _context14.next = 2;
	                                return regeneratorRuntime.awrap(_this16._unauthenticatedClient.getTokenMember());

	                            case 2:
	                                tokenMember = _context14.sent;
	                                urlParams = _Util2.default.parseParamsFromUrl(callbackUrl);
	                                params = {
	                                    tokenId: decodeURIComponent(urlParams.tokenId),
	                                    state: JSON.parse(decodeURIComponent(urlParams.state)),
	                                    signature: JSON.parse(decodeURIComponent(urlParams.signature))
	                                };

	                                if (!(params.state.csrfTokenHash !== _Util2.default.hashString(csrfToken))) {
	                                    _context14.next = 7;
	                                    break;
	                                }

	                                throw new Error('Invalid state.');

	                            case 7:
	                                signingKey = _Util2.default.getSigningKey(tokenMember.keys, params.signature);
	                                _context14.next = 10;
	                                return regeneratorRuntime.awrap(_Crypto2.default.verifyJson({
	                                    state: encodeURIComponent(JSON.stringify(params.state)),
	                                    tokenId: params.tokenId
	                                }, params.signature.signature, _Crypto2.default.bufferKey(signingKey.publicKey)));

	                            case 10:
	                                return _context14.abrupt("return", {
	                                    tokenId: params.tokenId,
	                                    innerState: params.state.innerState
	                                });

	                            case 11:
	                            case "end":
	                                return _context14.stop();
	                        }
	                    }
	                }, null, _this16);
	            });
	        }

	        /**
	         * Get a token ID based on its token request ID.
	         *
	         * @param {string} tokenRequestId - token request id
	         * @return {Promise} tokenId - token id
	         */

	    }, {
	        key: "getTokenId",
	        value: function getTokenId(tokenRequestId) {
	            var _this17 = this;

	            return _Util2.default.callAsync(this.getTokenId, function _callee15() {
	                var res;
	                return regeneratorRuntime.async(function _callee15$(_context15) {
	                    while (1) {
	                        switch (_context15.prev = _context15.next) {
	                            case 0:
	                                _context15.next = 2;
	                                return regeneratorRuntime.awrap(_this17._unauthenticatedClient.getTokenId(tokenRequestId));

	                            case 2:
	                                res = _context15.sent;
	                                return _context15.abrupt("return", res.data.tokenId);

	                            case 4:
	                            case "end":
	                                return _context15.stop();
	                        }
	                    }
	                }, null, _this17);
	            });
	        }
	    }], [{
	        key: "enableIframePassthrough",
	        value: function enableIframePassthrough(env) {
	            _Util2.default.enableIframePassthrough(_config2.default.corsDomainSuffix, _config2.default.urls[env]);
	        }

	        /**
	         * If we're on a token page, this disables passthrough
	         */

	    }, {
	        key: "disableIframePassthrough",
	        value: function disableIframePassthrough() {
	            _Util2.default.disableIframePassthrough(_config2.default.corsDomainSuffix);
	        }
	    }]);

	    return Token;
	}();

	exports.default = Token;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _jsonStableStringify = __webpack_require__(6);

	var _jsonStableStringify2 = _interopRequireDefault(_jsonStableStringify);

	var _CryptoNode = __webpack_require__(10);

	var _CryptoNode2 = _interopRequireDefault(_CryptoNode);

	var _CryptoBrowser = __webpack_require__(28);

	var _CryptoBrowser2 = _interopRequireDefault(_CryptoBrowser);

	var _base64url = __webpack_require__(23);

	var _base64url2 = _interopRequireDefault(_base64url);

	var _buffer = __webpack_require__(19);

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CryptoLib = (true) && !_Util2.default.isIE11() ? _CryptoBrowser2.default : _CryptoNode2.default;

	/**
	 * Class providing static crypto primitives.
	 */

	var Crypto = function () {
	    function Crypto() {
	        _classCallCheck(this, Crypto);
	    }

	    _createClass(Crypto, null, [{
	        key: "generateKeys",

	        /**
	         * Generates a key pair to use with the Token system.
	         *
	         * @param {string} keyLevel - "LOW", "STANDARD", or "PRIVILEGED"
	         * @param {number} expirationMs - (optional) expiration duration of the key in milliseconds
	         * @param {boolean} extractable - whether the private key can be extracted into raw data
	         * @return {Object} generated key pair
	         */
	        value: function generateKeys(keyLevel, expirationMs, extractable) {
	            return regeneratorRuntime.async(function generateKeys$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _context.next = 2;
	                            return regeneratorRuntime.awrap(CryptoLib.generateKeys(keyLevel, expirationMs, extractable));

	                        case 2:
	                            return _context.abrupt("return", _context.sent);

	                        case 3:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Signs a json object and returns the signature
	         *
	         * @param {Object} json - object to sign
	         * @param {Object} keys - keys to sign with
	         * @return {string} signature
	         */

	    }, {
	        key: "signJson",
	        value: function signJson(json, keys) {
	            return regeneratorRuntime.async(function signJson$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            _context2.next = 2;
	                            return regeneratorRuntime.awrap(Crypto.sign((0, _jsonStableStringify2.default)(json), keys));

	                        case 2:
	                            return _context2.abrupt("return", _context2.sent);

	                        case 3:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Signs a string and returns the signature.
	         *
	         * @param {string} message - message to sign
	         * @param {Object} keys - keys to sign with
	         * @return {string} signature
	         */

	    }, {
	        key: "sign",
	        value: function sign(message, keys) {
	            return regeneratorRuntime.async(function sign$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            _context3.next = 2;
	                            return regeneratorRuntime.awrap(CryptoLib.sign(message, keys));

	                        case 2:
	                            return _context3.abrupt("return", _context3.sent);

	                        case 3:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Helper function for crypto engine createSigner:
	         * returns a signer that uses a key pair.
	         *
	         * @param {Object} keyPair - such as returned by Token.Crypto.generateKeys
	         * @return {Object} signer object
	         */

	    }, {
	        key: "createSignerFromKeypair",
	        value: function createSignerFromKeypair(keyPair) {
	            var _this = this;

	            return {
	                sign: function sign(message) {
	                    return regeneratorRuntime.async(function sign$(_context4) {
	                        while (1) {
	                            switch (_context4.prev = _context4.next) {
	                                case 0:
	                                    _context4.next = 2;
	                                    return regeneratorRuntime.awrap(Crypto.sign(message, keyPair));

	                                case 2:
	                                    return _context4.abrupt("return", _context4.sent);

	                                case 3:
	                                case "end":
	                                    return _context4.stop();
	                            }
	                        }
	                    }, null, _this);
	                },
	                signJson: function signJson(json) {
	                    return regeneratorRuntime.async(function signJson$(_context5) {
	                        while (1) {
	                            switch (_context5.prev = _context5.next) {
	                                case 0:
	                                    _context5.next = 2;
	                                    return regeneratorRuntime.awrap(Crypto.signJson(json, keyPair));

	                                case 2:
	                                    return _context5.abrupt("return", _context5.sent);

	                                case 3:
	                                case "end":
	                                    return _context5.stop();
	                            }
	                        }
	                    }, null, _this);
	                },
	                getKeyId: function getKeyId() {
	                    return keyPair.id;
	                }
	            };
	        }

	        /**
	         * Verifies a signature on a JSON object. Throws if verification fails.
	         *
	         * @param {Object} json - JSON object to verify
	         * @param {string} signature - signature to verify
	         * @param {Uint8Array} publicKey - public key to use for verification
	         */

	    }, {
	        key: "verifyJson",
	        value: function verifyJson(json, signature, publicKey) {
	            return regeneratorRuntime.async(function verifyJson$(_context6) {
	                while (1) {
	                    switch (_context6.prev = _context6.next) {
	                        case 0:
	                            _context6.next = 2;
	                            return regeneratorRuntime.awrap(Crypto.verify((0, _jsonStableStringify2.default)(json), signature, publicKey));

	                        case 2:
	                        case "end":
	                            return _context6.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Verifies a signature on a string. Throws if verification fails.
	         *
	         * @param {string} message - string to verify
	         * @param {string} signature - signature to verify
	         * @param {Uint8Array} publicKey - public key to use for verification
	         */

	    }, {
	        key: "verify",
	        value: function verify(message, signature, publicKey) {
	            return regeneratorRuntime.async(function verify$(_context7) {
	                while (1) {
	                    switch (_context7.prev = _context7.next) {
	                        case 0:
	                            _context7.next = 2;
	                            return regeneratorRuntime.awrap(CryptoLib.verify(message, signature, publicKey));

	                        case 2:
	                        case "end":
	                            return _context7.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Helper function for crypto engine createVerifier:
	         * returns a signer that uses a key pair.
	         *
	         * @param {Object} keyPair - such as returned by Token.Crypto.generateKeys, private key optional
	         * @return {Object} verifier object
	         */

	    }, {
	        key: "createVerifierFromKeypair",
	        value: function createVerifierFromKeypair(keyPair) {
	            var _this2 = this;

	            return {
	                verify: function verify(message, signature) {
	                    return regeneratorRuntime.async(function verify$(_context8) {
	                        while (1) {
	                            switch (_context8.prev = _context8.next) {
	                                case 0:
	                                    _context8.next = 2;
	                                    return regeneratorRuntime.awrap(Crypto.verify(message, signature, keyPair.publicKey));

	                                case 2:
	                                    return _context8.abrupt("return", _context8.sent);

	                                case 3:
	                                case "end":
	                                    return _context8.stop();
	                            }
	                        }
	                    }, null, _this2);
	                },
	                verifyJson: function verifyJson(json, signature) {
	                    return regeneratorRuntime.async(function verifyJson$(_context9) {
	                        while (1) {
	                            switch (_context9.prev = _context9.next) {
	                                case 0:
	                                    _context9.next = 2;
	                                    return regeneratorRuntime.awrap(Crypto.verifyJson(json, signature, keyPair.publicKey));

	                                case 2:
	                                    return _context9.abrupt("return", _context9.sent);

	                                case 3:
	                                case "end":
	                                    return _context9.stop();
	                            }
	                        }
	                    }, null, _this2);
	                }
	            };
	        }

	        /**
	         * Converts a key to string.
	         *
	         * @param {Uint8Array} key - key to encode
	         * @return {string} encoded key
	         */

	    }, {
	        key: "strKey",
	        value: function strKey(key) {
	            return (0, _base64url2.default)(key);
	        }

	        /**
	         * Wraps buffer as an Uint8Array object.
	         *
	         * @param {string|Buffer} buffer - data
	         * @return {Uint8Array} data
	         */

	    }, {
	        key: "wrapBuffer",
	        value: function wrapBuffer(buffer) {
	            return new Uint8Array(new _buffer.Buffer(buffer));
	        }

	        /**
	         * Converts a key from a string to buffer.
	         *
	         * @param {string} key - base64Url encoded key
	         * @return {Uint8Array} buffered key
	         */

	    }, {
	        key: "bufferKey",
	        value: function bufferKey(key) {
	            return Crypto.wrapBuffer(_base64url2.default.toBuffer(key));
	        }
	    }]);

	    return Crypto;
	}();

	exports.default = Crypto;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(7);

	module.exports = function (obj, opts) {
	    if (!opts) opts = {};
	    if (typeof opts === 'function') opts = { cmp: opts };
	    var space = opts.space || '';
	    if (typeof space === 'number') space = Array(space+1).join(' ');
	    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
	    var replacer = opts.replacer || function(key, value) { return value; };

	    var cmp = opts.cmp && (function (f) {
	        return function (node) {
	            return function (a, b) {
	                var aobj = { key: a, value: node[a] };
	                var bobj = { key: b, value: node[b] };
	                return f(aobj, bobj);
	            };
	        };
	    })(opts.cmp);

	    var seen = [];
	    return (function stringify (parent, key, node, level) {
	        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
	        var colonSeparator = space ? ': ' : ':';

	        if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	        }

	        node = replacer.call(parent, key, node);

	        if (node === undefined) {
	            return;
	        }
	        if (typeof node !== 'object' || node === null) {
	            return json.stringify(node);
	        }
	        if (isArray(node)) {
	            var out = [];
	            for (var i = 0; i < node.length; i++) {
	                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
	                out.push(indent + space + item);
	            }
	            return '[' + out.join(',') + indent + ']';
	        }
	        else {
	            if (seen.indexOf(node) !== -1) {
	                if (cycles) return json.stringify('__cycle__');
	                throw new TypeError('Converting circular structure to JSON');
	            }
	            else seen.push(node);

	            var keys = objectKeys(node).sort(cmp && cmp(node));
	            var out = [];
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var value = stringify(node, key, node[key], level+1);

	                if(!value) continue;

	                var keyValue = json.stringify(key)
	                    + colonSeparator
	                    + value;
	                ;
	                out.push(indent + space + keyValue);
	            }
	            seen.splice(seen.indexOf(node), 1);
	            return '{' + out.join(',') + indent + '}';
	        }
	    })({ '': obj }, '', obj, 0);
	};

	var isArray = Array.isArray || function (x) {
	    return {}.toString.call(x) === '[object Array]';
	};

	var objectKeys = Object.keys || function (obj) {
	    var has = Object.prototype.hasOwnProperty || function () { return true };
	    var keys = [];
	    for (var key in obj) {
	        if (has.call(obj, key)) keys.push(key);
	    }
	    return keys;
	};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	exports.parse = __webpack_require__(8);
	exports.stringify = __webpack_require__(9);


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	var at, // The index of the current character
	    ch, // The current character
	    escapee = {
	        '"':  '"',
	        '\\': '\\',
	        '/':  '/',
	        b:    '\b',
	        f:    '\f',
	        n:    '\n',
	        r:    '\r',
	        t:    '\t'
	    },
	    text,

	    error = function (m) {
	        // Call error when something is wrong.
	        throw {
	            name:    'SyntaxError',
	            message: m,
	            at:      at,
	            text:    text
	        };
	    },
	    
	    next = function (c) {
	        // If a c parameter is provided, verify that it matches the current character.
	        if (c && c !== ch) {
	            error("Expected '" + c + "' instead of '" + ch + "'");
	        }
	        
	        // Get the next character. When there are no more characters,
	        // return the empty string.
	        
	        ch = text.charAt(at);
	        at += 1;
	        return ch;
	    },
	    
	    number = function () {
	        // Parse a number value.
	        var number,
	            string = '';
	        
	        if (ch === '-') {
	            string = '-';
	            next('-');
	        }
	        while (ch >= '0' && ch <= '9') {
	            string += ch;
	            next();
	        }
	        if (ch === '.') {
	            string += '.';
	            while (next() && ch >= '0' && ch <= '9') {
	                string += ch;
	            }
	        }
	        if (ch === 'e' || ch === 'E') {
	            string += ch;
	            next();
	            if (ch === '-' || ch === '+') {
	                string += ch;
	                next();
	            }
	            while (ch >= '0' && ch <= '9') {
	                string += ch;
	                next();
	            }
	        }
	        number = +string;
	        if (!isFinite(number)) {
	            error("Bad number");
	        } else {
	            return number;
	        }
	    },
	    
	    string = function () {
	        // Parse a string value.
	        var hex,
	            i,
	            string = '',
	            uffff;
	        
	        // When parsing for string values, we must look for " and \ characters.
	        if (ch === '"') {
	            while (next()) {
	                if (ch === '"') {
	                    next();
	                    return string;
	                } else if (ch === '\\') {
	                    next();
	                    if (ch === 'u') {
	                        uffff = 0;
	                        for (i = 0; i < 4; i += 1) {
	                            hex = parseInt(next(), 16);
	                            if (!isFinite(hex)) {
	                                break;
	                            }
	                            uffff = uffff * 16 + hex;
	                        }
	                        string += String.fromCharCode(uffff);
	                    } else if (typeof escapee[ch] === 'string') {
	                        string += escapee[ch];
	                    } else {
	                        break;
	                    }
	                } else {
	                    string += ch;
	                }
	            }
	        }
	        error("Bad string");
	    },

	    white = function () {

	// Skip whitespace.

	        while (ch && ch <= ' ') {
	            next();
	        }
	    },

	    word = function () {

	// true, false, or null.

	        switch (ch) {
	        case 't':
	            next('t');
	            next('r');
	            next('u');
	            next('e');
	            return true;
	        case 'f':
	            next('f');
	            next('a');
	            next('l');
	            next('s');
	            next('e');
	            return false;
	        case 'board_rows':
	            next('board_rows');
	            next('u');
	            next('l');
	            next('l');
	            return null;
	        }
	        error("Unexpected '" + ch + "'");
	    },

	    value,  // Place holder for the value function.

	    array = function () {

	// Parse an array value.

	        var array = [];

	        if (ch === '[') {
	            next('[');
	            white();
	            if (ch === ']') {
	                next(']');
	                return array;   // empty array
	            }
	            while (ch) {
	                array.push(value());
	                white();
	                if (ch === ']') {
	                    next(']');
	                    return array;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad array");
	    },

	    object = function () {

	// Parse an object value.

	        var key,
	            object = {};

	        if (ch === '{') {
	            next('{');
	            white();
	            if (ch === '}') {
	                next('}');
	                return object;   // empty object
	            }
	            while (ch) {
	                key = string();
	                white();
	                next(':');
	                if (Object.hasOwnProperty.call(object, key)) {
	                    error('Duplicate key "' + key + '"');
	                }
	                object[key] = value();
	                white();
	                if (ch === '}') {
	                    next('}');
	                    return object;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad object");
	    };

	value = function () {

	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.

	    white();
	    switch (ch) {
	    case '{':
	        return object();
	    case '[':
	        return array();
	    case '"':
	        return string();
	    case '-':
	        return number();
	    default:
	        return ch >= '0' && ch <= '9' ? number() : word();
	    }
	};

	// Return the json_parse function. It will have access to all of the above
	// functions and variables.

	module.exports = function (source, reviver) {
	    var result;
	    
	    text = source;
	    at = 0;
	    ch = ' ';
	    result = value();
	    white();
	    if (ch) {
	        error("Syntax error");
	    }

	    // If there is a reviver function, we recursively walk the new structure,
	    // passing each name/value pair to the reviver function for possible
	    // transformation, starting with a temporary root object that holds the result
	    // in an empty key. If there is not a reviver function, we simply return the
	    // result.

	    return typeof reviver === 'function' ? (function walk(holder, key) {
	        var k, v, value = holder[key];
	        if (value && typeof value === 'object') {
	            for (k in value) {
	                if (Object.prototype.hasOwnProperty.call(value, k)) {
	                    v = walk(value, k);
	                    if (v !== undefined) {
	                        value[k] = v;
	                    } else {
	                        delete value[k];
	                    }
	                }
	            }
	        }
	        return reviver.call(holder, key, value);
	    }({'': result}, '')) : result;
	};


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    gap,
	    indent,
	    meta = {    // table of character substitutions
	        '\b': '\\field_size',
	        '\t': '\\t',
	        '\n': '\\board_rows',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    },
	    rep;

	function quote(string) {
	    // If the string contains no control characters, no quote characters, and no
	    // backslash characters, then we can safely slap some quotes around it.
	    // Otherwise we must also replace the offending characters with safe escape
	    // sequences.
	    
	    escapable.lastIndex = 0;
	    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	        var c = meta[a];
	        return typeof c === 'string' ? c :
	            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    }) + '"' : '"' + string + '"';
	}

	function str(key, holder) {
	    // Produce a string from holder[key].
	    var i,          // The loop counter.
	        k,          // The member key.
	        v,          // The member value.
	        length,
	        mind = gap,
	        partial,
	        value = holder[key];
	    
	    // If the value has a toJSON method, call it to obtain a replacement value.
	    if (value && typeof value === 'object' &&
	            typeof value.toJSON === 'function') {
	        value = value.toJSON(key);
	    }
	    
	    // If we were called with a replacer function, then call the replacer to
	    // obtain a replacement value.
	    if (typeof rep === 'function') {
	        value = rep.call(holder, key, value);
	    }
	    
	    // What happens next depends on the value's type.
	    switch (typeof value) {
	        case 'string':
	            return quote(value);
	        
	        case 'number':
	            // JSON numbers must be finite. Encode non-finite numbers as null.
	            return isFinite(value) ? String(value) : 'null';
	        
	        case 'boolean':
	        case 'null':
	            // If the value is a boolean or null, convert it to a string. Note:
	            // typeof null does not produce 'null'. The case is included here in
	            // the remote chance that this gets fixed someday.
	            return String(value);
	            
	        case 'object':
	            if (!value) return 'null';
	            gap += indent;
	            partial = [];
	            
	            // Array.isArray
	            if (Object.prototype.toString.apply(value) === '[object Array]') {
	                length = value.length;
	                for (i = 0; i < length; i += 1) {
	                    partial[i] = str(i, value) || 'null';
	                }
	                
	                // Join all of the elements together, separated with commas, and
	                // wrap them in brackets.
	                v = partial.length === 0 ? '[]' : gap ?
	                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
	                    '[' + partial.join(',') + ']';
	                gap = mind;
	                return v;
	            }
	            
	            // If the replacer is an array, use it to select the members to be
	            // stringified.
	            if (rep && typeof rep === 'object') {
	                length = rep.length;
	                for (i = 0; i < length; i += 1) {
	                    k = rep[i];
	                    if (typeof k === 'string') {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            else {
	                // Otherwise, iterate through all of the keys in the object.
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            
	        // Join all of the member texts together, separated with commas,
	        // and wrap them in braces.

	        v = partial.length === 0 ? '{}' : gap ?
	            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
	            '{' + partial.join(',') + '}';
	        gap = mind;
	        return v;
	    }
	}

	module.exports = function (value, replacer, space) {
	    var i;
	    gap = '';
	    indent = '';
	    
	    // If the space parameter is a number, make an indent string containing that
	    // many spaces.
	    if (typeof space === 'number') {
	        for (i = 0; i < space; i += 1) {
	            indent += ' ';
	        }
	    }
	    // If the space parameter is a string, it will be used as the indent string.
	    else if (typeof space === 'string') {
	        indent = space;
	    }

	    // If there is a replacer, it must be a function or an array.
	    // Otherwise, throw an error.
	    rep = replacer;
	    if (replacer && typeof replacer !== 'function'
	    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
	        throw new Error('JSON.stringify');
	    }
	    
	    // Make a fake root object containing our value under the key of ''.
	    // Return the result of stringifying the value.
	    return str('', {'': value});
	};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	var _base64url = __webpack_require__(25);

	var _base64url2 = _interopRequireDefault(_base64url);

	var _tweetnacl = __webpack_require__(26);

	var _tweetnacl2 = _interopRequireDefault(_tweetnacl);

	var _fastSha = __webpack_require__(22);

	var _fastSha2 = _interopRequireDefault(_fastSha);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Class providing static crypto primitives for Node environments using libsodium.
	 */
	var CryptoNode = function () {
	    function CryptoNode() {
	        _classCallCheck(this, CryptoNode);
	    }

	    _createClass(CryptoNode, null, [{
	        key: "generateKeys",

	        /**
	         * Generates a key pair to use with the Token system.
	         *
	         * @param {string} keyLevel - "LOW", "STANDARD", or "PRIVILEGED"
	         * @param {number} expirationMs - (optional) expiration duration of the key in milliseconds
	         * @param {boolean} extractable - whether the private key can be extracted into raw data
	         * @return {Object} generated key pair
	         */
	        value: function generateKeys(keyLevel, expirationMs) {
	            var extractable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	            var keyPair;
	            return regeneratorRuntime.async(function generateKeys$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            keyPair = _tweetnacl2.default.sign.keyPair();

	                            keyPair.id = (0, _base64url2.default)((0, _fastSha2.default)(keyPair.publicKey)).substring(0, 16);
	                            keyPair.algorithm = 'ED25519';
	                            keyPair.level = keyLevel;
	                            keyPair.privateKey = keyPair.secretKey;
	                            if (expirationMs !== undefined) keyPair.expiresAtMs = new Date().getTime() + expirationMs;
	                            delete keyPair.secretKey;
	                            return _context.abrupt("return", keyPair);

	                        case 8:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Signs a string and returns the signature.
	         *
	         * @param {string} message - message to sign
	         * @param {Object} keys - keys to sign with
	         * @return {string} signature
	         */

	    }, {
	        key: "sign",
	        value: function sign(message, keys) {
	            var msg;
	            return regeneratorRuntime.async(function sign$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            msg = _Util2.default.wrapBuffer(message);
	                            return _context2.abrupt("return", (0, _base64url2.default)(_tweetnacl2.default.sign.detached(msg, keys.privateKey)));

	                        case 2:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Verifies a signature on a string. Throws if verification fails.
	         *
	         * @param {string} message - string to verify
	         * @param {string} signature - signature to verify
	         * @param {Uint8Array} publicKey - public key to use for verification
	         */

	    }, {
	        key: "verify",
	        value: function verify(message, signature, publicKey) {
	            var msg, sig, result;
	            return regeneratorRuntime.async(function verify$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            msg = _Util2.default.wrapBuffer(message);
	                            sig = _Util2.default.bufferKey(signature);
	                            result = _tweetnacl2.default.sign.detached.verify(msg, sig, publicKey);

	                            if (result) {
	                                _context3.next = 5;
	                                break;
	                            }

	                            throw new Error("Invalid signature " + signature + " on message " + message + " with pk " + publicKey);

	                        case 5:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return CryptoNode;
	}();

	exports.default = CryptoNode;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	lass to provide static utility functions.
	


	var _bs = __webpack_require__(16);

	var _bs2 = _interopRequireDefault(_bs);

	var _fastSha = __webpack_require__(22);

	var _fastSha2 = _interopRequireDefault(_fastSha);

	var _jsonStableStringify = __webpack_require__(6);

	var _jsonStableStringify2 = _interopRequireDefault(_jsonStableStringify);

	var _base64url = __webpack_require__(23);

	var _base64url2 = _interopRequireDefault(_base64url);

	var _buffer = __webpack_require__(19);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = function () {
	    function Util() {
	        _classCallCheck(this, Util);
	    }

	    _createClass(Util, null, [{
	        key: "generateNonce",

	        /**
	         * Generates a random nonce
	         *
	         * @return {string} nonce - random string
	         */
	        value: function generateNonce() {
	            return Math.random().toString(36).slice(-9) + Math.random().toString(36).slice(-9);
	        }

	        /**
	         * Generates a random alias. Handy for tests.
	         *
	         * @return {Object} alias protobuf
	         */

	    }, {
	        key: "randomAlias",
	        value: function randomAlias() {
	            return {
	                type: 'EMAIL',
	                value: 'test-' + Util.generateNonce() + '+noverify@example.com'
	            };
	        }

	        /**
	         * Returns the token alias.
	         *
	         * @return {Object} token alias protobuf
	         */

	    }, {
	        key: "tokenAlias",
	        value: function tokenAlias() {
	            return {
	                type: 'DOMAIN',
	                value: 'token.io'
	            };
	        }

	        /**
	         * Returns the token realm.
	         *
	         * @return {string} token realm
	         */

	    }, {
	        key: "tokenRealm",
	        value: function tokenRealm() {
	            return 'token';
	        }

	        /**
	         * Tests if a string ends with a suffix,
	         *
	         * @param {string} str - the string to test
	         * @param {string} suffix - the suffix to test
	         * @return {boolean} endsWith - true if it does
	         */

	    }, {
	        key: "stringEndsWith",
	        value: function stringEndsWith(str, suffix) {
	            if (str === null || str === '' || suffix === null || suffix === '') {
	                return false;
	            }
	            str = str.toString();
	            suffix = suffix.toString();
	            return str.indexOf(suffix, str.length - suffix.length) !== -1;
	        }

	        /**
	         * Gets the specified byte of the 4 byte word, according to index. Assumes 2s complement
	         * representation of the word
	         *
	         * @param {number} word - 32 bit value number, in 2s complement
	         * @param {number} index - index of the byte to return
	         * @return {number} result - the desired byte [0, 255]
	         */

	    }, {
	        key: "getByte",
	        value: function getByte(word, index) {
	            if (index === 0) {
	                return word & (1 << 8) - 1;
	            } else if (index === 1) {
	                return (word & (1 << 16) - 1) >> 8;
	            } else if (index === 2) {
	                return (word & (1 << 24) - 1) >> 16;
	            }
	            var temp = (word & (1 << 8) - 1 << 24) >> 24;
	            return temp < 0 ? 256 + temp : temp;
	        }

	        /**
	         * Count the number of decimal points in a number
	         *
	         * @param {Number} value - number
	         * @return {Number} count - number of decimals
	         */

	    }, {
	        key: "countDecimals",
	        value: function countDecimals(value) {
	            if (Math.floor(value) === value) {
	                return 0;
	            }
	            return value.toString().split(".")[1].length || 0;
	        }

	        /**
	         * Helper method to handle promise exceptions. The function will be executed, and if
	         * anything fails, a rejected promise is returned, with the method name that failed,
	         * included in the rejection.
	         *
	         * @param {function} method - outside method that is being executed
	         * @param {function} fn - function to try to execute
	         * @return {Promise} promise - successful or rejected promise
	         */

	    }, {
	        key: "callAsync",
	        value: function callAsync(method, fn) {
	            var reason;
	            return regeneratorRuntime.async(function callAsync$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _context.prev = 0;
	                            _context.next = 3;
	                            return regeneratorRuntime.awrap(fn());

	                        case 3:
	                            return _context.abrupt("return", _context.sent);

	                        case 6:
	                            _context.prev = 6;
	                            _context.t0 = _context["catch"](0);
	                            reason = _context.t0.response !== undefined && _context.t0.response.data !== undefined ? _context.t0.response.data : "UNKNOWN";

	                            _context.t0.info = method.name + ': ' + _context.t0.message + '. Reason: ' + reason;
	                            return _context.abrupt("return", Promise.reject(_context.t0));

	                        case 11:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, null, this, [[0, 6]]);
	        }

	        /**
	         * Helper method similar to the one above, but without promises
	         *
	         * @param {function} method - outside method that is being executed
	         * @param {function} fn - function to try to execute
	         * @return {Object} result - successful result or thrown error
	         */

	    }, {
	        key: "callSync",
	        value: function callSync(method, fn) {
	            try {
	                return fn();
	            } catch (err) {
	                var reason = err.response !== undefined && err.response.data !== undefined ? err.response.data : "UNKNOWN";
	                err.info = method.name + ': ' + err.message + '. Reason: ' + reason;
	                throw err;
	            }
	        }

	        /**
	         * Support alias hashing
	         *
	         * @param {Object} alias - alias to be hashed
	         * @return {String} result - hashed alias
	         * TODO(PR-1138): remove username support
	         */

	    }, {
	        key: "hashAndSerializeAlias",
	        value: function hashAndSerializeAlias(alias) {
	            if (alias.type === 'USERNAME') {
	                return alias.value;
	            }
	            return _bs2.default.encode((0, _fastSha2.default)(Buffer.from((0, _jsonStableStringify2.default)(alias), 'utf8')));
	        }

	        /**
	         * Hash a string value.
	         *
	         * @param {string} value - value to be hahsed
	         * @return {string} result - hashed value
	         */

	    }, {
	        key: "hashString",
	        value: function hashString(value) {
	            return _bs2.default.encode((0, _fastSha2.default)(Buffer.from(value, 'utf8')));
	        }

	        /**
	         * If we're on a token page, sets up an iframe to avoid CORS preflights. All requests in this
	         * window will be routed through the iframe.
	         *
	         * @param {string} suffix - domain suffix for Iframe passthrough
	         * @param {string} url - base url for the API gateway
	         */

	    }, {
	        key: "enableIframePassthrough",
	        value: function enableIframePassthrough(suffix, url) {
	            if ((true) && (Util.stringEndsWith(document.domain, suffix) || document.domain === suffix.substring(1))) {
	                var setupAPI = function setupAPI() {
	                    window.oldXMLHttpRequest = window.XMLHttpRequest;
	                    window.oldFetch = window.fetch;
	                    window.XMLHttpRequest = this.contentWindow.XMLHttpRequest;
	                    window.fetch = this.contentWindow.fetch;
	                };

	                var iframe = document.getElementById('tokenApiIframe');
	                if (iframe === null) {
	                    iframe = document.createElement('iframe');
	                    iframe.id = 'tokenApiIframe';
	                    iframe.src = url + '/iframe';
	                    iframe.style.position = 'absolute';
	                    iframe.style.left = '-9999px';
	                    iframe.onload = setupAPI;
	                    document.body.appendChild(iframe);
	                }
	            }
	        }

	        /**
	         * If we're on a token page, this disables passthrough
	         *
	         * @param {string} suffix - domain suffix for Iframe passthrough
	         */

	    }, {
	        key: "disableIframePassthrough",
	        value: function disableIframePassthrough(suffix) {
	            if ((true) && (Util.stringEndsWith(document.domain, suffix) || document.domain === suffix.substring(1))) {
	                if (window.oldXMLHttpRequest) {
	                    window.XMLHttpRequest = window.oldXMLHttpRequest;
	                }
	                if (window.oldFetch) {
	                    window.fetch = window.oldFetch;
	                }
	                var iframe = document.getElementById('tokenApiIframe');
	                if (iframe !== null) {
	                    document.body.removeChild(iframe);
	                }
	            }
	        }

	        /**
	         * Gets the signing key from a list of keys corresponding to the signature.
	         *
	         * @param {Array} keys -  list of keys
	         * @param {Object} signature - signature
	         * @return {Object} key - the signing key
	         */

	    }, {
	        key: "getSigningKey",
	        value: function getSigningKey(keys, signature) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (key.id === signature.keyId) {
	                        return key;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            throw new Error('Invalid signature');
	        }

	        /**
	         * Converts a key to string.
	         *
	         * @param {Uint8Array} key - key to encode
	         * @return {string} encoded key
	         */

	    }, {
	        key: "strKey",
	        value: function strKey(key) {
	            return (0, _base64url2.default)(key);
	        }

	        /**
	         * Wraps buffer as an Uint8Array object.
	         *
	         * @param {string|Buffer} buffer - data
	         * @return {Uint8Array} data
	         */

	    }, {
	        key: "wrapBuffer",
	        value: function wrapBuffer(buffer) {
	            return new Uint8Array(new _buffer.Buffer(buffer));
	        }

	        /**
	         * Converts a key from a string to buffer.
	         *
	         * @param {string} key - base64Url encoded key
	         * @return {Uint8Array} buffered key
	         */

	    }, {
	        key: "bufferKey",
	        value: function bufferKey(key) {
	            return Util.wrapBuffer(_base64url2.default.toBuffer(key));
	        }

	        /**
	         * Converts a key to a token key.
	         *
	         * @param {Object} key - key
	         * @param {string} level - key level
	         * @return {Object} token key
	         */

	    }, {
	        key: "tokenKey",
	        value: function tokenKey(key, level) {
	            return _extends({
	                id: key.id,
	                level: level,
	                algorithm: key.algorithm,
	                publicKey: Util.strKey(key.publicKey)
	            }, key.expiresAtMs && { expiresAtMs: key.expiresAtMs });
	        }
	    }, {
	        key: "parseParamsFromUrl",
	        value: function parseParamsFromUrl(url) {
	            var query = url.split('?')[1];
	            var result = {};
	            query.split("&").forEach(function (part) {
	                var item = part.split("=");
	                result[item[0]] = decodeURIComponent(item[1]);
	            });
	            return result;
	        }
	    }, {
	        key: "setUpHttpErrorLogging",
	        value: function setUpHttpErrorLogging(instance) {
	            instance.interceptors.response.use(function (res) {
	                return res;
	            }, function (err) {
	                console.log(err.response);
	                return Promise.reject(err);
	            });
	        }
	    }, {
	        key: "isFirefox",
	        value: function isFirefox() {
	            return (true) && typeof window.InstallTrigger !== 'undefined';
	        }
	    }, {
	        key: "isIE11",
	        value: function isIE11() {
	            return (true) && window.MSInputMethodContext && document.documentMode;
	        }
	    }, {
	        key: "isEdge",
	        value: function isEdge() {
	            return (true) && /Edge/.test(window.navigator.userAgent);
	        }
	    }]);

	    return Util;
	}();

	exports.default = Util;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12).Buffer))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(13)
	var ieee754 = __webpack_require__(14)
	var isArray = __webpack_require__(15)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \board_rows and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return (b64.length * 3 / 4) - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr((len * 3 / 4) - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0; i < l; i += 4) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ }),
/* 14 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 15 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var basex = __webpack_require__(17)
	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

	module.exports = basex(ALPHABET)


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	// base-x encoding
	// Forked from https://github.com/cryptocoinjs/bs58
	// Originally written by Mike Hearn for BitcoinJ
	// Copyright (c) 2011 Google Inc
	// Ported to JavaScript by Stefan Thomas
	// Merged Buffer refactorings from base58-native by Stephen Pair
	// Copyright (c) 2013 BitPay Inc

	var Buffer = __webpack_require__(18).Buffer

	module.exports = function base (ALPHABET) {
	  var ALPHABET_MAP = {}
	  var BASE = ALPHABET.length
	  var LEADER = ALPHABET.charAt(0)

	  // pre-compute lookup table
	  for (var z = 0; z < ALPHABET.length; z++) {
	    var x = ALPHABET.charAt(z)

	    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
	    ALPHABET_MAP[x] = z
	  }

	  function encode (source) {
	    if (source.length === 0) return ''

	    var digits = [0]
	    for (var i = 0; i < source.length; ++i) {
	      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
	        carry += digits[j] << 8
	        digits[j] = carry % BASE
	        carry = (carry / BASE) | 0
	      }

	      while (carry > 0) {
	        digits.push(carry % BASE)
	        carry = (carry / BASE) | 0
	      }
	    }

	    var string = ''

	    // deal with leading zeros
	    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += ALPHABET[0]
	    // convert digits to a string
	    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]

	    return string
	  }

	  function decodeUnsafe (string) {
	    if (string.length === 0) return Buffer.allocUnsafe(0)

	    var bytes = [0]
	    for (var i = 0; i < string.length; i++) {
	      var value = ALPHABET_MAP[string[i]]
	      if (value === undefined) return

	      for (var j = 0, carry = value; j < bytes.length; ++j) {
	        carry += bytes[j] * BASE
	        bytes[j] = carry & 0xff
	        carry >>= 8
	      }

	      while (carry > 0) {
	        bytes.push(carry & 0xff)
	        carry >>= 8
	      }
	    }

	    // deal with leading zeros
	    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
	      bytes.push(0)
	    }

	    return Buffer.from(bytes.reverse())
	  }

	  function decode (string) {
	    var buffer = decodeUnsafe(string)
	    if (buffer) return buffer

	    throw new Error('Non-base' + BASE + ' character')
	  }

	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(19)
	var Buffer = buffer.Buffer

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(20)
	var ieee754 = __webpack_require__(14)
	var isArray = __webpack_require__(21)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \board_rows and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12).Buffer))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ }),
/* 21 */
/***/ (function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	    // Hack to make all exports of this module sha256 function object properties.
	    var exports = {};
	    factory(exports);
	    var sha256 = exports["default"];
	    for (var k in exports) {
	        sha256[k] = exports[k];
	    }
	        
	    if (typeof module === 'object' && typeof module.exports === 'object') {
	        module.exports = sha256;
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return sha256; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); 
	    } else {
	        root.sha256 = sha256;
	    }
	})(this, function(exports) {
	"use strict";
	// SHA-256 (+ HMAC and PBKDF2) for JavaScript.
	//
	// Written in 2014-2016 by Dmitry Chestnykh.
	// Public domain, no warranty.
	//
	// Functions (accept and return Uint8Arrays):
	//
	//   sha256(message) -> hash
	//   sha256.hmac(key, message) -> mac
	//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk
	//
	//  Classes:
	//
	//   new sha256.Hash()
	//   new sha256.HMAC(key)
	//
	exports.digestLength = 32;
	exports.blockSize = 64;
	// SHA-256 constants
	var K = new Uint32Array([
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
	    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
	    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
	    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
	    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
	    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
	    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
	    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
	    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
	    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	]);
	function hashBlocks(w, v, p, pos, len) {
	    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;
	    while (len >= 64) {
	        a = v[0];
	        b = v[1];
	        c = v[2];
	        d = v[3];
	        e = v[4];
	        f = v[5];
	        g = v[6];
	        h = v[7];
	        for (i = 0; i < 16; i++) {
	            j = pos + i * 4;
	            w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |
	                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));
	        }
	        for (i = 16; i < 64; i++) {
	            u = w[i - 2];
	            t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);
	            u = w[i - 15];
	            t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);
	            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
	        }
	        for (i = 0; i < 64; i++) {
	            t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^
	                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +
	                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;
	            t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^
	                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
	            h = g;
	            g = f;
	            f = e;
	            e = (d + t1) | 0;
	            d = c;
	            c = b;
	            b = a;
	            a = (t1 + t2) | 0;
	        }
	        v[0] += a;
	        v[1] += b;
	        v[2] += c;
	        v[3] += d;
	        v[4] += e;
	        v[5] += f;
	        v[6] += g;
	        v[7] += h;
	        pos += 64;
	        len -= 64;
	    }
	    return pos;
	}
	// Hash implements SHA256 hash algorithm.
	var Hash = (function () {
	    function Hash() {
	        this.digestLength = exports.digestLength;
	        this.blockSize = exports.blockSize;
	        // Note: Int32Array is used instead of Uint32Array for performance reasons.
	        this.state = new Int32Array(8); // hash state
	        this.temp = new Int32Array(64); // temporary state
	        this.buffer = new Uint8Array(128); // buffer for data to hash
	        this.bufferLength = 0; // number of bytes in buffer
	        this.bytesHashed = 0; // number of total bytes hashed
	        this.finished = false; // indicates whether the hash was finalized
	        this.reset();
	    }
	    // Resets hash state making it possible
	    // to re-use this instance to hash other data.
	    Hash.prototype.reset = function () {
	        this.state[0] = 0x6a09e667;
	        this.state[1] = 0xbb67ae85;
	        this.state[2] = 0x3c6ef372;
	        this.state[3] = 0xa54ff53a;
	        this.state[4] = 0x510e527f;
	        this.state[5] = 0x9b05688c;
	        this.state[6] = 0x1f83d9ab;
	        this.state[7] = 0x5be0cd19;
	        this.bufferLength = 0;
	        this.bytesHashed = 0;
	        this.finished = false;
	        return this;
	    };
	    // Cleans internal buffers and re-initializes hash state.
	    Hash.prototype.clean = function () {
	        for (var i = 0; i < this.buffer.length; i++)
	            this.buffer[i] = 0;
	        for (var i = 0; i < this.temp.length; i++)
	            this.temp[i] = 0;
	        this.reset();
	    };
	    // Updates hash state with the given data.
	    //
	    // Optionally, length of the data can be specified to hash
	    // fewer bytes than data.length.
	    //
	    // Throws error when trying to update already finalized hash:
	    // instance must be reset to use it again.
	    Hash.prototype.update = function (data, dataLength) {
	        if (dataLength === void 0) { dataLength = data.length; }
	        if (this.finished) {
	            throw new Error("SHA256: can't update because hash was finished.");
	        }
	        var dataPos = 0;
	        this.bytesHashed += dataLength;
	        if (this.bufferLength > 0) {
	            while (this.bufferLength < 64 && dataLength > 0) {
	                this.buffer[this.bufferLength++] = data[dataPos++];
	                dataLength--;
	            }
	            if (this.bufferLength === 64) {
	                hashBlocks(this.temp, this.state, this.buffer, 0, 64);
	                this.bufferLength = 0;
	            }
	        }
	        if (dataLength >= 64) {
	            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);
	            dataLength %= 64;
	        }
	        while (dataLength > 0) {
	            this.buffer[this.bufferLength++] = data[dataPos++];
	            dataLength--;
	        }
	        return this;
	    };
	    // Finalizes hash state and puts hash into out.
	    //
	    // If hash was already finalized, puts the same value.
	    Hash.prototype.finish = function (out) {
	        if (!this.finished) {
	            var bytesHashed = this.bytesHashed;
	            var left = this.bufferLength;
	            var bitLenHi = (bytesHashed / 0x20000000) | 0;
	            var bitLenLo = bytesHashed << 3;
	            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;
	            this.buffer[left] = 0x80;
	            for (var i = left + 1; i < padLength - 8; i++) {
	                this.buffer[i] = 0;
	            }
	            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;
	            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;
	            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;
	            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;
	            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;
	            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;
	            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;
	            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;
	            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);
	            this.finished = true;
	        }
	        for (var i = 0; i < 8; i++) {
	            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;
	            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
	            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
	            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
	        }
	        return this;
	    };
	    // Returns the final hash digest.
	    Hash.prototype.digest = function () {
	        var out = new Uint8Array(this.digestLength);
	        this.finish(out);
	        return out;
	    };
	    // Internal function for use in HMAC for optimization.
	    Hash.prototype._saveState = function (out) {
	        for (var i = 0; i < this.state.length; i++) {
	            out[i] = this.state[i];
	        }
	    };
	    // Internal function for use in HMAC for optimization.
	    Hash.prototype._restoreState = function (from, bytesHashed) {
	        for (var i = 0; i < this.state.length; i++) {
	            this.state[i] = from[i];
	        }
	        this.bytesHashed = bytesHashed;
	        this.finished = false;
	        this.bufferLength = 0;
	    };
	    return Hash;
	}());
	exports.Hash = Hash;
	// HMAC implements HMAC-SHA256 message authentication algorithm.
	var HMAC = (function () {
	    function HMAC(key) {
	        this.inner = new Hash();
	        this.outer = new Hash();
	        this.blockSize = this.inner.blockSize;
	        this.digestLength = this.inner.digestLength;
	        var pad = new Uint8Array(this.blockSize);
	        if (key.length > this.blockSize) {
	            (new Hash()).update(key).finish(pad).clean();
	        }
	        else {
	            for (var i = 0; i < key.length; i++) {
	                pad[i] = key[i];
	            }
	        }
	        for (var i = 0; i < pad.length; i++) {
	            pad[i] ^= 0x36;
	        }
	        this.inner.update(pad);
	        for (var i = 0; i < pad.length; i++) {
	            pad[i] ^= 0x36 ^ 0x5c;
	        }
	        this.outer.update(pad);
	        this.istate = new Uint32Array(this.digestLength / 4);
	        this.ostate = new Uint32Array(this.digestLength / 4);
	        this.inner._saveState(this.istate);
	        this.outer._saveState(this.ostate);
	        for (var i = 0; i < pad.length; i++) {
	            pad[i] = 0;
	        }
	    }
	    // Returns HMAC state to the state initialized with key
	    // to make it possible to run HMAC over the other data with the same
	    // key without creating a new instance.
	    HMAC.prototype.reset = function () {
	        this.inner._restoreState(this.istate, this.inner.blockSize);
	        this.outer._restoreState(this.ostate, this.outer.blockSize);
	        return this;
	    };
	    // Cleans HMAC state.
	    HMAC.prototype.clean = function () {
	        for (var i = 0; i < this.istate.length; i++) {
	            this.ostate[i] = this.istate[i] = 0;
	        }
	        this.inner.clean();
	        this.outer.clean();
	    };
	    // Updates state with provided data.
	    HMAC.prototype.update = function (data) {
	        this.inner.update(data);
	        return this;
	    };
	    // Finalizes HMAC and puts the result in out.
	    HMAC.prototype.finish = function (out) {
	        if (this.outer.finished) {
	            this.outer.finish(out);
	        }
	        else {
	            this.inner.finish(out);
	            this.outer.update(out, this.digestLength).finish(out);
	        }
	        return this;
	    };
	    // Returns message authentication code.
	    HMAC.prototype.digest = function () {
	        var out = new Uint8Array(this.digestLength);
	        this.finish(out);
	        return out;
	    };
	    return HMAC;
	}());
	exports.HMAC = HMAC;
	// Returns SHA256 hash of data.
	function hash(data) {
	    var h = (new Hash()).update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	exports.hash = hash;
	exports.__esModule = true;
	exports["default"] = hash;
	// Returns HMAC-SHA256 of data under the key.
	function hmac(key, data) {
	    var h = (new HMAC(key)).update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	exports.hmac = hmac;
	// Derives a key from password and salt using PBKDF2-HMAC-SHA256
	// with the given number of iterations.
	//
	// The number of bytes returned is equal to dkLen.
	//
	// (For better security, avoid dkLen greater than hash length - 32 bytes).
	function pbkdf2(password, salt, iterations, dkLen) {
	    var prf = new HMAC(password);
	    var len = prf.digestLength;
	    var ctr = new Uint8Array(4);
	    var t = new Uint8Array(len);
	    var u = new Uint8Array(len);
	    var dk = new Uint8Array(dkLen);
	    for (var i = 0; i * len < dkLen; i++) {
	        var c = i + 1;
	        ctr[0] = (c >>> 24) & 0xff;
	        ctr[1] = (c >>> 16) & 0xff;
	        ctr[2] = (c >>> 8) & 0xff;
	        ctr[3] = (c >>> 0) & 0xff;
	        prf.reset();
	        prf.update(salt);
	        prf.update(ctr);
	        prf.finish(u);
	        for (var j = 0; j < len; j++) {
	            t[j] = u[j];
	        }
	        for (var j = 2; j <= iterations; j++) {
	            prf.reset();
	            prf.update(u).finish(u);
	            for (var k = 0; k < len; k++) {
	                t[k] ^= u[k];
	            }
	        }
	        for (var j = 0; j < len && i * len + j < dkLen; j++) {
	            dk[i * len + j] = t[j];
	        }
	    }
	    for (var i = 0; i < len; i++) {
	        t[i] = u[i] = 0;
	    }
	    for (var i = 0; i < 4; i++) {
	        ctr[i] = 0;
	    }
	    prf.clean();
	    return dk;
	}
	exports.pbkdf2 = pbkdf2;
	});


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	var pad_string_1 = __webpack_require__(24);
	function encode(input, encoding) {
	    if (encoding === void 0) { encoding = "utf8"; }
	    if (Buffer.isBuffer(input)) {
	        return fromBase64(input.toString("base64"));
	    }
	    return fromBase64(new Buffer(input, encoding).toString("base64"));
	}
	;
	function decode(base64url, encoding) {
	    if (encoding === void 0) { encoding = "utf8"; }
	    return new Buffer(toBase64(base64url), "base64").toString(encoding);
	}
	function toBase64(base64url) {
	    base64url = base64url.toString();
	    return pad_string_1.default(base64url)
	        .replace(/\-/g, "+")
	        .replace(/_/g, "/");
	}
	function fromBase64(base64) {
	    return base64
	        .replace(/=/g, "")
	        .replace(/\+/g, "-")
	        .replace(/\//g, "_");
	}
	function toBuffer(base64url) {
	    return new Buffer(toBase64(base64url), "base64");
	}
	var base64url = encode;
	base64url.encode = encode;
	base64url.decode = decode;
	base64url.toBase64 = toBase64;
	base64url.fromBase64 = fromBase64;
	base64url.toBuffer = toBuffer;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = base64url;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12).Buffer))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	function padString(input) {
	    var segmentLength = 4;
	    var stringLength = input.length;
	    var diff = stringLength % segmentLength;
	    if (!diff) {
	        return input;
	    }
	    var position = stringLength;
	    var padLength = segmentLength - diff;
	    var paddedStringLength = stringLength + padLength;
	    var buffer = new Buffer(paddedStringLength);
	    buffer.write(input);
	    while (padLength--) {
	        buffer.write("=", position++);
	    }
	    return buffer.toString();
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = padString;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12).Buffer))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(23).default;
	module.exports.default = module.exports;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	(function(nacl) {
	'use strict';

	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	//
	// Implementation derived from TweetNaCl version 20140427.
	// See for details: http://tweetnacl.cr.yp.to/

	var gf = function(init) {
	  var i, r = new Float64Array(16);
	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	  return r;
	};

	//  Pluggable, initialized in high-level API below.
	var randombytes = function(/* x, board_rows */) { throw new Error('no PRNG'); };

	var _0 = new Uint8Array(16);
	var _9 = new Uint8Array(32); _9[0] = 9;

	var gf0 = gf(),
	    gf1 = gf([1]),
	    _121665 = gf([0xdb41, 1]),
	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

	function ts64(x, i, h, l) {
	  x[i]   = (h >> 24) & 0xff;
	  x[i+1] = (h >> 16) & 0xff;
	  x[i+2] = (h >>  8) & 0xff;
	  x[i+3] = h & 0xff;
	  x[i+4] = (l >> 24)  & 0xff;
	  x[i+5] = (l >> 16)  & 0xff;
	  x[i+6] = (l >>  8)  & 0xff;
	  x[i+7] = l & 0xff;
	}

	function vn(x, xi, y, yi, n) {
	  var i,d = 0;
	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
	  return (1 & ((d - 1) >>> 8)) - 1;
	}

	function crypto_verify_16(x, xi, y, yi) {
	  return vn(x,xi,y,yi,16);
	}

	function crypto_verify_32(x, xi, y, yi) {
	  return vn(x,xi,y,yi,32);
	}

	function core_salsa20(o, p, k, c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	   x0 =  x0 +  j0 | 0;
	   x1 =  x1 +  j1 | 0;
	   x2 =  x2 +  j2 | 0;
	   x3 =  x3 +  j3 | 0;
	   x4 =  x4 +  j4 | 0;
	   x5 =  x5 +  j5 | 0;
	   x6 =  x6 +  j6 | 0;
	   x7 =  x7 +  j7 | 0;
	   x8 =  x8 +  j8 | 0;
	   x9 =  x9 +  j9 | 0;
	  x10 = x10 + j10 | 0;
	  x11 = x11 + j11 | 0;
	  x12 = x12 + j12 | 0;
	  x13 = x13 + j13 | 0;
	  x14 = x14 + j14 | 0;
	  x15 = x15 + j15 | 0;

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x1 >>>  0 & 0xff;
	  o[ 5] = x1 >>>  8 & 0xff;
	  o[ 6] = x1 >>> 16 & 0xff;
	  o[ 7] = x1 >>> 24 & 0xff;

	  o[ 8] = x2 >>>  0 & 0xff;
	  o[ 9] = x2 >>>  8 & 0xff;
	  o[10] = x2 >>> 16 & 0xff;
	  o[11] = x2 >>> 24 & 0xff;

	  o[12] = x3 >>>  0 & 0xff;
	  o[13] = x3 >>>  8 & 0xff;
	  o[14] = x3 >>> 16 & 0xff;
	  o[15] = x3 >>> 24 & 0xff;

	  o[16] = x4 >>>  0 & 0xff;
	  o[17] = x4 >>>  8 & 0xff;
	  o[18] = x4 >>> 16 & 0xff;
	  o[19] = x4 >>> 24 & 0xff;

	  o[20] = x5 >>>  0 & 0xff;
	  o[21] = x5 >>>  8 & 0xff;
	  o[22] = x5 >>> 16 & 0xff;
	  o[23] = x5 >>> 24 & 0xff;

	  o[24] = x6 >>>  0 & 0xff;
	  o[25] = x6 >>>  8 & 0xff;
	  o[26] = x6 >>> 16 & 0xff;
	  o[27] = x6 >>> 24 & 0xff;

	  o[28] = x7 >>>  0 & 0xff;
	  o[29] = x7 >>>  8 & 0xff;
	  o[30] = x7 >>> 16 & 0xff;
	  o[31] = x7 >>> 24 & 0xff;

	  o[32] = x8 >>>  0 & 0xff;
	  o[33] = x8 >>>  8 & 0xff;
	  o[34] = x8 >>> 16 & 0xff;
	  o[35] = x8 >>> 24 & 0xff;

	  o[36] = x9 >>>  0 & 0xff;
	  o[37] = x9 >>>  8 & 0xff;
	  o[38] = x9 >>> 16 & 0xff;
	  o[39] = x9 >>> 24 & 0xff;

	  o[40] = x10 >>>  0 & 0xff;
	  o[41] = x10 >>>  8 & 0xff;
	  o[42] = x10 >>> 16 & 0xff;
	  o[43] = x10 >>> 24 & 0xff;

	  o[44] = x11 >>>  0 & 0xff;
	  o[45] = x11 >>>  8 & 0xff;
	  o[46] = x11 >>> 16 & 0xff;
	  o[47] = x11 >>> 24 & 0xff;

	  o[48] = x12 >>>  0 & 0xff;
	  o[49] = x12 >>>  8 & 0xff;
	  o[50] = x12 >>> 16 & 0xff;
	  o[51] = x12 >>> 24 & 0xff;

	  o[52] = x13 >>>  0 & 0xff;
	  o[53] = x13 >>>  8 & 0xff;
	  o[54] = x13 >>> 16 & 0xff;
	  o[55] = x13 >>> 24 & 0xff;

	  o[56] = x14 >>>  0 & 0xff;
	  o[57] = x14 >>>  8 & 0xff;
	  o[58] = x14 >>> 16 & 0xff;
	  o[59] = x14 >>> 24 & 0xff;

	  o[60] = x15 >>>  0 & 0xff;
	  o[61] = x15 >>>  8 & 0xff;
	  o[62] = x15 >>> 16 & 0xff;
	  o[63] = x15 >>> 24 & 0xff;
	}

	function core_hsalsa20(o,p,k,c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x5 >>>  0 & 0xff;
	  o[ 5] = x5 >>>  8 & 0xff;
	  o[ 6] = x5 >>> 16 & 0xff;
	  o[ 7] = x5 >>> 24 & 0xff;

	  o[ 8] = x10 >>>  0 & 0xff;
	  o[ 9] = x10 >>>  8 & 0xff;
	  o[10] = x10 >>> 16 & 0xff;
	  o[11] = x10 >>> 24 & 0xff;

	  o[12] = x15 >>>  0 & 0xff;
	  o[13] = x15 >>>  8 & 0xff;
	  o[14] = x15 >>> 16 & 0xff;
	  o[15] = x15 >>> 24 & 0xff;

	  o[16] = x6 >>>  0 & 0xff;
	  o[17] = x6 >>>  8 & 0xff;
	  o[18] = x6 >>> 16 & 0xff;
	  o[19] = x6 >>> 24 & 0xff;

	  o[20] = x7 >>>  0 & 0xff;
	  o[21] = x7 >>>  8 & 0xff;
	  o[22] = x7 >>> 16 & 0xff;
	  o[23] = x7 >>> 24 & 0xff;

	  o[24] = x8 >>>  0 & 0xff;
	  o[25] = x8 >>>  8 & 0xff;
	  o[26] = x8 >>> 16 & 0xff;
	  o[27] = x8 >>> 24 & 0xff;

	  o[28] = x9 >>>  0 & 0xff;
	  o[29] = x9 >>>  8 & 0xff;
	  o[30] = x9 >>> 16 & 0xff;
	  o[31] = x9 >>> 24 & 0xff;
	}

	function crypto_core_salsa20(out,inp,k,c) {
	  core_salsa20(out,inp,k,c);
	}

	function crypto_core_hsalsa20(out,inp,k,c) {
	  core_hsalsa20(out,inp,k,c);
	}

	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	            // "expand 32-byte k"

	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	    mpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	  }
	  return 0;
	}

	function crypto_stream_salsa20(c,cpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
	  }
	  return 0;
	}

	function crypto_stream(c,cpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20(c,cpos,d,sn,s);
	}

	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
	}

	/*
	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
	* https://github.com/floodyberry/poly1305-donna
	*/

	var poly1305 = function(key) {
	  this.buffer = new Uint8Array(16);
	  this.r = new Uint16Array(10);
	  this.h = new Uint16Array(10);
	  this.pad = new Uint16Array(8);
	  this.leftover = 0;
	  this.fin = 0;

	  var t0, t1, t2, t3, t4, t5, t6, t7;

	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	  this.r[9] = ((t7 >>>  5)) & 0x007f;

	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	};

	poly1305.prototype.blocks = function(m, mpos, bytes) {
	  var hibit = this.fin ? 0 : (1 << 11);
	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

	  var h0 = this.h[0],
	      h1 = this.h[1],
	      h2 = this.h[2],
	      h3 = this.h[3],
	      h4 = this.h[4],
	      h5 = this.h[5],
	      h6 = this.h[6],
	      h7 = this.h[7],
	      h8 = this.h[8],
	      h9 = this.h[9];

	  var r0 = this.r[0],
	      r1 = this.r[1],
	      r2 = this.r[2],
	      r3 = this.r[3],
	      r4 = this.r[4],
	      r5 = this.r[5],
	      r6 = this.r[6],
	      r7 = this.r[7],
	      r8 = this.r[8],
	      r9 = this.r[9];

	  while (bytes >= 16) {
	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
	    h5 += ((t4 >>>  1)) & 0x1fff;
	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	    h9 += ((t7 >>> 5)) | hibit;

	    c = 0;

	    d0 = c;
	    d0 += h0 * r0;
	    d0 += h1 * (5 * r9);
	    d0 += h2 * (5 * r8);
	    d0 += h3 * (5 * r7);
	    d0 += h4 * (5 * r6);
	    c = (d0 >>> 13); d0 &= 0x1fff;
	    d0 += h5 * (5 * r5);
	    d0 += h6 * (5 * r4);
	    d0 += h7 * (5 * r3);
	    d0 += h8 * (5 * r2);
	    d0 += h9 * (5 * r1);
	    c += (d0 >>> 13); d0 &= 0x1fff;

	    d1 = c;
	    d1 += h0 * r1;
	    d1 += h1 * r0;
	    d1 += h2 * (5 * r9);
	    d1 += h3 * (5 * r8);
	    d1 += h4 * (5 * r7);
	    c = (d1 >>> 13); d1 &= 0x1fff;
	    d1 += h5 * (5 * r6);
	    d1 += h6 * (5 * r5);
	    d1 += h7 * (5 * r4);
	    d1 += h8 * (5 * r3);
	    d1 += h9 * (5 * r2);
	    c += (d1 >>> 13); d1 &= 0x1fff;

	    d2 = c;
	    d2 += h0 * r2;
	    d2 += h1 * r1;
	    d2 += h2 * r0;
	    d2 += h3 * (5 * r9);
	    d2 += h4 * (5 * r8);
	    c = (d2 >>> 13); d2 &= 0x1fff;
	    d2 += h5 * (5 * r7);
	    d2 += h6 * (5 * r6);
	    d2 += h7 * (5 * r5);
	    d2 += h8 * (5 * r4);
	    d2 += h9 * (5 * r3);
	    c += (d2 >>> 13); d2 &= 0x1fff;

	    d3 = c;
	    d3 += h0 * r3;
	    d3 += h1 * r2;
	    d3 += h2 * r1;
	    d3 += h3 * r0;
	    d3 += h4 * (5 * r9);
	    c = (d3 >>> 13); d3 &= 0x1fff;
	    d3 += h5 * (5 * r8);
	    d3 += h6 * (5 * r7);
	    d3 += h7 * (5 * r6);
	    d3 += h8 * (5 * r5);
	    d3 += h9 * (5 * r4);
	    c += (d3 >>> 13); d3 &= 0x1fff;

	    d4 = c;
	    d4 += h0 * r4;
	    d4 += h1 * r3;
	    d4 += h2 * r2;
	    d4 += h3 * r1;
	    d4 += h4 * r0;
	    c = (d4 >>> 13); d4 &= 0x1fff;
	    d4 += h5 * (5 * r9);
	    d4 += h6 * (5 * r8);
	    d4 += h7 * (5 * r7);
	    d4 += h8 * (5 * r6);
	    d4 += h9 * (5 * r5);
	    c += (d4 >>> 13); d4 &= 0x1fff;

	    d5 = c;
	    d5 += h0 * r5;
	    d5 += h1 * r4;
	    d5 += h2 * r3;
	    d5 += h3 * r2;
	    d5 += h4 * r1;
	    c = (d5 >>> 13); d5 &= 0x1fff;
	    d5 += h5 * r0;
	    d5 += h6 * (5 * r9);
	    d5 += h7 * (5 * r8);
	    d5 += h8 * (5 * r7);
	    d5 += h9 * (5 * r6);
	    c += (d5 >>> 13); d5 &= 0x1fff;

	    d6 = c;
	    d6 += h0 * r6;
	    d6 += h1 * r5;
	    d6 += h2 * r4;
	    d6 += h3 * r3;
	    d6 += h4 * r2;
	    c = (d6 >>> 13); d6 &= 0x1fff;
	    d6 += h5 * r1;
	    d6 += h6 * r0;
	    d6 += h7 * (5 * r9);
	    d6 += h8 * (5 * r8);
	    d6 += h9 * (5 * r7);
	    c += (d6 >>> 13); d6 &= 0x1fff;

	    d7 = c;
	    d7 += h0 * r7;
	    d7 += h1 * r6;
	    d7 += h2 * r5;
	    d7 += h3 * r4;
	    d7 += h4 * r3;
	    c = (d7 >>> 13); d7 &= 0x1fff;
	    d7 += h5 * r2;
	    d7 += h6 * r1;
	    d7 += h7 * r0;
	    d7 += h8 * (5 * r9);
	    d7 += h9 * (5 * r8);
	    c += (d7 >>> 13); d7 &= 0x1fff;

	    d8 = c;
	    d8 += h0 * r8;
	    d8 += h1 * r7;
	    d8 += h2 * r6;
	    d8 += h3 * r5;
	    d8 += h4 * r4;
	    c = (d8 >>> 13); d8 &= 0x1fff;
	    d8 += h5 * r3;
	    d8 += h6 * r2;
	    d8 += h7 * r1;
	    d8 += h8 * r0;
	    d8 += h9 * (5 * r9);
	    c += (d8 >>> 13); d8 &= 0x1fff;

	    d9 = c;
	    d9 += h0 * r9;
	    d9 += h1 * r8;
	    d9 += h2 * r7;
	    d9 += h3 * r6;
	    d9 += h4 * r5;
	    c = (d9 >>> 13); d9 &= 0x1fff;
	    d9 += h5 * r4;
	    d9 += h6 * r3;
	    d9 += h7 * r2;
	    d9 += h8 * r1;
	    d9 += h9 * r0;
	    c += (d9 >>> 13); d9 &= 0x1fff;

	    c = (((c << 2) + c)) | 0;
	    c = (c + d0) | 0;
	    d0 = c & 0x1fff;
	    c = (c >>> 13);
	    d1 += c;

	    h0 = d0;
	    h1 = d1;
	    h2 = d2;
	    h3 = d3;
	    h4 = d4;
	    h5 = d5;
	    h6 = d6;
	    h7 = d7;
	    h8 = d8;
	    h9 = d9;

	    mpos += 16;
	    bytes -= 16;
	  }
	  this.h[0] = h0;
	  this.h[1] = h1;
	  this.h[2] = h2;
	  this.h[3] = h3;
	  this.h[4] = h4;
	  this.h[5] = h5;
	  this.h[6] = h6;
	  this.h[7] = h7;
	  this.h[8] = h8;
	  this.h[9] = h9;
	};

	poly1305.prototype.finish = function(mac, macpos) {
	  var g = new Uint16Array(10);
	  var c, mask, f, i;

	  if (this.leftover) {
	    i = this.leftover;
	    this.buffer[i++] = 1;
	    for (; i < 16; i++) this.buffer[i] = 0;
	    this.fin = 1;
	    this.blocks(this.buffer, 0, 16);
	  }

	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  for (i = 2; i < 10; i++) {
	    this.h[i] += c;
	    c = this.h[i] >>> 13;
	    this.h[i] &= 0x1fff;
	  }
	  this.h[0] += (c * 5);
	  c = this.h[0] >>> 13;
	  this.h[0] &= 0x1fff;
	  this.h[1] += c;
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  this.h[2] += c;

	  g[0] = this.h[0] + 5;
	  c = g[0] >>> 13;
	  g[0] &= 0x1fff;
	  for (i = 1; i < 10; i++) {
	    g[i] = this.h[i] + c;
	    c = g[i] >>> 13;
	    g[i] &= 0x1fff;
	  }
	  g[9] -= (1 << 13);

	  mask = (c ^ 1) - 1;
	  for (i = 0; i < 10; i++) g[i] &= mask;
	  mask = ~mask;
	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

	  f = this.h[0] + this.pad[0];
	  this.h[0] = f & 0xffff;
	  for (i = 1; i < 8; i++) {
	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
	    this.h[i] = f & 0xffff;
	  }

	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
	};

	poly1305.prototype.update = function(m, mpos, bytes) {
	  var i, want;

	  if (this.leftover) {
	    want = (16 - this.leftover);
	    if (want > bytes)
	      want = bytes;
	    for (i = 0; i < want; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    bytes -= want;
	    mpos += want;
	    this.leftover += want;
	    if (this.leftover < 16)
	      return;
	    this.blocks(this.buffer, 0, 16);
	    this.leftover = 0;
	  }

	  if (bytes >= 16) {
	    want = bytes - (bytes % 16);
	    this.blocks(m, mpos, want);
	    mpos += want;
	    bytes -= want;
	  }

	  if (bytes) {
	    for (i = 0; i < bytes; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    this.leftover += bytes;
	  }
	};

	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	  var s = new poly1305(k);
	  s.update(m, mpos, n);
	  s.finish(out, outpos);
	  return 0;
	}

	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	  var x = new Uint8Array(16);
	  crypto_onetimeauth(x,0,m,mpos,n,k);
	  return crypto_verify_16(h,hpos,x,0);
	}

	function crypto_secretbox(c,m,d,n,k) {
	  var i;
	  if (d < 32) return -1;
	  crypto_stream_xor(c,0,m,0,d,n,k);
	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	  for (i = 0; i < 16; i++) c[i] = 0;
	  return 0;
	}

	function crypto_secretbox_open(m,c,d,n,k) {
	  var i;
	  var x = new Uint8Array(32);
	  if (d < 32) return -1;
	  crypto_stream(x,0,32,n,k);
	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
	  crypto_stream_xor(m,0,c,0,d,n,k);
	  for (i = 0; i < 32; i++) m[i] = 0;
	  return 0;
	}

	function set25519(r, a) {
	  var i;
	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
	}

	function car25519(o) {
	  var i, v, c = 1;
	  for (i = 0; i < 16; i++) {
	    v = o[i] + c + 65535;
	    c = Math.floor(v / 65536);
	    o[i] = v - c * 65536;
	  }
	  o[0] += c-1 + 37 * (c-1);
	}

	function sel25519(p, q, b) {
	  var t, c = ~(b-1);
	  for (var i = 0; i < 16; i++) {
	    t = c & (p[i] ^ q[i]);
	    p[i] ^= t;
	    q[i] ^= t;
	  }
	}

	function pack25519(o, n) {
	  var i, j, b;
	  var m = gf(), t = gf();
	  for (i = 0; i < 16; i++) t[i] = n[i];
	  car25519(t);
	  car25519(t);
	  car25519(t);
	  for (j = 0; j < 2; j++) {
	    m[0] = t[0] - 0xffed;
	    for (i = 1; i < 15; i++) {
	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	      m[i-1] &= 0xffff;
	    }
	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	    b = (m[15]>>16) & 1;
	    m[14] &= 0xffff;
	    sel25519(t, m, 1-b);
	  }
	  for (i = 0; i < 16; i++) {
	    o[2*i] = t[i] & 0xff;
	    o[2*i+1] = t[i]>>8;
	  }
	}

	function neq25519(a, b) {
	  var c = new Uint8Array(32), d = new Uint8Array(32);
	  pack25519(c, a);
	  pack25519(d, b);
	  return crypto_verify_32(c, 0, d, 0);
	}

	function par25519(a) {
	  var d = new Uint8Array(32);
	  pack25519(d, a);
	  return d[0] & 1;
	}

	function unpack25519(o, n) {
	  var i;
	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	  o[15] &= 0x7fff;
	}

	function A(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
	}

	function Z(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
	}

	function M(o, a, b) {
	  var v, c,
	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
	    b0 = b[0],
	    b1 = b[1],
	    b2 = b[2],
	    b3 = b[3],
	    b4 = b[4],
	    b5 = b[5],
	    b6 = b[6],
	    b7 = b[7],
	    b8 = b[8],
	    b9 = b[9],
	    b10 = b[10],
	    b11 = b[11],
	    b12 = b[12],
	    b13 = b[13],
	    b14 = b[14],
	    b15 = b[15];

	  v = a[0];
	  t0 += v * b0;
	  t1 += v * b1;
	  t2 += v * b2;
	  t3 += v * b3;
	  t4 += v * b4;
	  t5 += v * b5;
	  t6 += v * b6;
	  t7 += v * b7;
	  t8 += v * b8;
	  t9 += v * b9;
	  t10 += v * b10;
	  t11 += v * b11;
	  t12 += v * b12;
	  t13 += v * b13;
	  t14 += v * b14;
	  t15 += v * b15;
	  v = a[1];
	  t1 += v * b0;
	  t2 += v * b1;
	  t3 += v * b2;
	  t4 += v * b3;
	  t5 += v * b4;
	  t6 += v * b5;
	  t7 += v * b6;
	  t8 += v * b7;
	  t9 += v * b8;
	  t10 += v * b9;
	  t11 += v * b10;
	  t12 += v * b11;
	  t13 += v * b12;
	  t14 += v * b13;
	  t15 += v * b14;
	  t16 += v * b15;
	  v = a[2];
	  t2 += v * b0;
	  t3 += v * b1;
	  t4 += v * b2;
	  t5 += v * b3;
	  t6 += v * b4;
	  t7 += v * b5;
	  t8 += v * b6;
	  t9 += v * b7;
	  t10 += v * b8;
	  t11 += v * b9;
	  t12 += v * b10;
	  t13 += v * b11;
	  t14 += v * b12;
	  t15 += v * b13;
	  t16 += v * b14;
	  t17 += v * b15;
	  v = a[3];
	  t3 += v * b0;
	  t4 += v * b1;
	  t5 += v * b2;
	  t6 += v * b3;
	  t7 += v * b4;
	  t8 += v * b5;
	  t9 += v * b6;
	  t10 += v * b7;
	  t11 += v * b8;
	  t12 += v * b9;
	  t13 += v * b10;
	  t14 += v * b11;
	  t15 += v * b12;
	  t16 += v * b13;
	  t17 += v * b14;
	  t18 += v * b15;
	  v = a[4];
	  t4 += v * b0;
	  t5 += v * b1;
	  t6 += v * b2;
	  t7 += v * b3;
	  t8 += v * b4;
	  t9 += v * b5;
	  t10 += v * b6;
	  t11 += v * b7;
	  t12 += v * b8;
	  t13 += v * b9;
	  t14 += v * b10;
	  t15 += v * b11;
	  t16 += v * b12;
	  t17 += v * b13;
	  t18 += v * b14;
	  t19 += v * b15;
	  v = a[5];
	  t5 += v * b0;
	  t6 += v * b1;
	  t7 += v * b2;
	  t8 += v * b3;
	  t9 += v * b4;
	  t10 += v * b5;
	  t11 += v * b6;
	  t12 += v * b7;
	  t13 += v * b8;
	  t14 += v * b9;
	  t15 += v * b10;
	  t16 += v * b11;
	  t17 += v * b12;
	  t18 += v * b13;
	  t19 += v * b14;
	  t20 += v * b15;
	  v = a[6];
	  t6 += v * b0;
	  t7 += v * b1;
	  t8 += v * b2;
	  t9 += v * b3;
	  t10 += v * b4;
	  t11 += v * b5;
	  t12 += v * b6;
	  t13 += v * b7;
	  t14 += v * b8;
	  t15 += v * b9;
	  t16 += v * b10;
	  t17 += v * b11;
	  t18 += v * b12;
	  t19 += v * b13;
	  t20 += v * b14;
	  t21 += v * b15;
	  v = a[7];
	  t7 += v * b0;
	  t8 += v * b1;
	  t9 += v * b2;
	  t10 += v * b3;
	  t11 += v * b4;
	  t12 += v * b5;
	  t13 += v * b6;
	  t14 += v * b7;
	  t15 += v * b8;
	  t16 += v * b9;
	  t17 += v * b10;
	  t18 += v * b11;
	  t19 += v * b12;
	  t20 += v * b13;
	  t21 += v * b14;
	  t22 += v * b15;
	  v = a[8];
	  t8 += v * b0;
	  t9 += v * b1;
	  t10 += v * b2;
	  t11 += v * b3;
	  t12 += v * b4;
	  t13 += v * b5;
	  t14 += v * b6;
	  t15 += v * b7;
	  t16 += v * b8;
	  t17 += v * b9;
	  t18 += v * b10;
	  t19 += v * b11;
	  t20 += v * b12;
	  t21 += v * b13;
	  t22 += v * b14;
	  t23 += v * b15;
	  v = a[9];
	  t9 += v * b0;
	  t10 += v * b1;
	  t11 += v * b2;
	  t12 += v * b3;
	  t13 += v * b4;
	  t14 += v * b5;
	  t15 += v * b6;
	  t16 += v * b7;
	  t17 += v * b8;
	  t18 += v * b9;
	  t19 += v * b10;
	  t20 += v * b11;
	  t21 += v * b12;
	  t22 += v * b13;
	  t23 += v * b14;
	  t24 += v * b15;
	  v = a[10];
	  t10 += v * b0;
	  t11 += v * b1;
	  t12 += v * b2;
	  t13 += v * b3;
	  t14 += v * b4;
	  t15 += v * b5;
	  t16 += v * b6;
	  t17 += v * b7;
	  t18 += v * b8;
	  t19 += v * b9;
	  t20 += v * b10;
	  t21 += v * b11;
	  t22 += v * b12;
	  t23 += v * b13;
	  t24 += v * b14;
	  t25 += v * b15;
	  v = a[11];
	  t11 += v * b0;
	  t12 += v * b1;
	  t13 += v * b2;
	  t14 += v * b3;
	  t15 += v * b4;
	  t16 += v * b5;
	  t17 += v * b6;
	  t18 += v * b7;
	  t19 += v * b8;
	  t20 += v * b9;
	  t21 += v * b10;
	  t22 += v * b11;
	  t23 += v * b12;
	  t24 += v * b13;
	  t25 += v * b14;
	  t26 += v * b15;
	  v = a[12];
	  t12 += v * b0;
	  t13 += v * b1;
	  t14 += v * b2;
	  t15 += v * b3;
	  t16 += v * b4;
	  t17 += v * b5;
	  t18 += v * b6;
	  t19 += v * b7;
	  t20 += v * b8;
	  t21 += v * b9;
	  t22 += v * b10;
	  t23 += v * b11;
	  t24 += v * b12;
	  t25 += v * b13;
	  t26 += v * b14;
	  t27 += v * b15;
	  v = a[13];
	  t13 += v * b0;
	  t14 += v * b1;
	  t15 += v * b2;
	  t16 += v * b3;
	  t17 += v * b4;
	  t18 += v * b5;
	  t19 += v * b6;
	  t20 += v * b7;
	  t21 += v * b8;
	  t22 += v * b9;
	  t23 += v * b10;
	  t24 += v * b11;
	  t25 += v * b12;
	  t26 += v * b13;
	  t27 += v * b14;
	  t28 += v * b15;
	  v = a[14];
	  t14 += v * b0;
	  t15 += v * b1;
	  t16 += v * b2;
	  t17 += v * b3;
	  t18 += v * b4;
	  t19 += v * b5;
	  t20 += v * b6;
	  t21 += v * b7;
	  t22 += v * b8;
	  t23 += v * b9;
	  t24 += v * b10;
	  t25 += v * b11;
	  t26 += v * b12;
	  t27 += v * b13;
	  t28 += v * b14;
	  t29 += v * b15;
	  v = a[15];
	  t15 += v * b0;
	  t16 += v * b1;
	  t17 += v * b2;
	  t18 += v * b3;
	  t19 += v * b4;
	  t20 += v * b5;
	  t21 += v * b6;
	  t22 += v * b7;
	  t23 += v * b8;
	  t24 += v * b9;
	  t25 += v * b10;
	  t26 += v * b11;
	  t27 += v * b12;
	  t28 += v * b13;
	  t29 += v * b14;
	  t30 += v * b15;

	  t0  += 38 * t16;
	  t1  += 38 * t17;
	  t2  += 38 * t18;
	  t3  += 38 * t19;
	  t4  += 38 * t20;
	  t5  += 38 * t21;
	  t6  += 38 * t22;
	  t7  += 38 * t23;
	  t8  += 38 * t24;
	  t9  += 38 * t25;
	  t10 += 38 * t26;
	  t11 += 38 * t27;
	  t12 += 38 * t28;
	  t13 += 38 * t29;
	  t14 += 38 * t30;
	  // t15 left as is

	  // first car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  // second car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  o[ 0] = t0;
	  o[ 1] = t1;
	  o[ 2] = t2;
	  o[ 3] = t3;
	  o[ 4] = t4;
	  o[ 5] = t5;
	  o[ 6] = t6;
	  o[ 7] = t7;
	  o[ 8] = t8;
	  o[ 9] = t9;
	  o[10] = t10;
	  o[11] = t11;
	  o[12] = t12;
	  o[13] = t13;
	  o[14] = t14;
	  o[15] = t15;
	}

	function S(o, a) {
	  M(o, a, a);
	}

	function inv25519(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 253; a >= 0; a--) {
	    S(c, c);
	    if(a !== 2 && a !== 4) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function pow2523(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if(a !== 1) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function crypto_scalarmult(q, n, p) {
	  var z = new Uint8Array(32);
	  var x = new Float64Array(80), r, i;
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf();
	  for (i = 0; i < 31; i++) z[i] = n[i];
	  z[31]=(n[31]&127)|64;
	  z[0]&=248;
	  unpack25519(x,p);
	  for (i = 0; i < 16; i++) {
	    b[i]=x[i];
	    d[i]=a[i]=c[i]=0;
	  }
	  a[0]=d[0]=1;
	  for (i=254; i>=0; --i) {
	    r=(z[i>>>3]>>>(i&7))&1;
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	    A(e,a,c);
	    Z(a,a,c);
	    A(c,b,d);
	    Z(b,b,d);
	    S(d,e);
	    S(f,a);
	    M(a,c,a);
	    M(c,b,e);
	    A(e,a,c);
	    Z(a,a,c);
	    S(b,a);
	    Z(c,d,f);
	    M(a,c,_121665);
	    A(a,a,d);
	    M(c,c,a);
	    M(a,d,f);
	    M(d,b,x);
	    S(b,e);
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	  }
	  for (i = 0; i < 16; i++) {
	    x[i+16]=a[i];
	    x[i+32]=c[i];
	    x[i+48]=b[i];
	    x[i+64]=d[i];
	  }
	  var x32 = x.subarray(32);
	  var x16 = x.subarray(16);
	  inv25519(x32,x32);
	  M(x16,x16,x32);
	  pack25519(q,x16);
	  return 0;
	}

	function crypto_scalarmult_base(q, n) {
	  return crypto_scalarmult(q, n, _9);
	}

	function crypto_box_keypair(y, x) {
	  randombytes(x, 32);
	  return crypto_scalarmult_base(y, x);
	}

	function crypto_box_beforenm(k, y, x) {
	  var s = new Uint8Array(32);
	  crypto_scalarmult(s, x, y);
	  return crypto_core_hsalsa20(k, _0, s, sigma);
	}

	var crypto_box_afternm = crypto_secretbox;
	var crypto_box_open_afternm = crypto_secretbox_open;

	function crypto_box(c, m, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_afternm(c, m, d, n, k);
	}

	function crypto_box_open(m, c, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_open_afternm(m, c, d, n, k);
	}

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function crypto_hashblocks_hl(hh, hl, m, n) {
	  var wh = new Int32Array(16), wl = new Int32Array(16),
	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
	      th, tl, i, j, h, l, a, b, c, d;

	  var ah0 = hh[0],
	      ah1 = hh[1],
	      ah2 = hh[2],
	      ah3 = hh[3],
	      ah4 = hh[4],
	      ah5 = hh[5],
	      ah6 = hh[6],
	      ah7 = hh[7],

	      al0 = hl[0],
	      al1 = hl[1],
	      al2 = hl[2],
	      al3 = hl[3],
	      al4 = hl[4],
	      al5 = hl[5],
	      al6 = hl[6],
	      al7 = hl[7];

	  var pos = 0;
	  while (n >= 128) {
	    for (i = 0; i < 16; i++) {
	      j = 8 * i + pos;
	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
	    }
	    for (i = 0; i < 80; i++) {
	      bh0 = ah0;
	      bh1 = ah1;
	      bh2 = ah2;
	      bh3 = ah3;
	      bh4 = ah4;
	      bh5 = ah5;
	      bh6 = ah6;
	      bh7 = ah7;

	      bl0 = al0;
	      bl1 = al1;
	      bl2 = al2;
	      bl3 = al3;
	      bl4 = al4;
	      bl5 = al5;
	      bl6 = al6;
	      bl7 = al7;

	      // add
	      h = ah7;
	      l = al7;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma1
	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Ch
	      h = (ah4 & ah5) ^ (~ah4 & ah6);
	      l = (al4 & al5) ^ (~al4 & al6);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // K
	      h = K[i*2];
	      l = K[i*2+1];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // w
	      h = wh[i%16];
	      l = wl[i%16];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      th = c & 0xffff | d << 16;
	      tl = a & 0xffff | b << 16;

	      // add
	      h = th;
	      l = tl;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma0
	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Maj
	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh7 = (c & 0xffff) | (d << 16);
	      bl7 = (a & 0xffff) | (b << 16);

	      // add
	      h = bh3;
	      l = bl3;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      h = th;
	      l = tl;

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh3 = (c & 0xffff) | (d << 16);
	      bl3 = (a & 0xffff) | (b << 16);

	      ah1 = bh0;
	      ah2 = bh1;
	      ah3 = bh2;
	      ah4 = bh3;
	      ah5 = bh4;
	      ah6 = bh5;
	      ah7 = bh6;
	      ah0 = bh7;

	      al1 = bl0;
	      al2 = bl1;
	      al3 = bl2;
	      al4 = bl3;
	      al5 = bl4;
	      al6 = bl5;
	      al7 = bl6;
	      al0 = bl7;

	      if (i%16 === 15) {
	        for (j = 0; j < 16; j++) {
	          // add
	          h = wh[j];
	          l = wl[j];

	          a = l & 0xffff; b = l >>> 16;
	          c = h & 0xffff; d = h >>> 16;

	          h = wh[(j+9)%16];
	          l = wl[(j+9)%16];

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma0
	          th = wh[(j+1)%16];
	          tl = wl[(j+1)%16];
	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma1
	          th = wh[(j+14)%16];
	          tl = wl[(j+14)%16];
	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          b += a >>> 16;
	          c += b >>> 16;
	          d += c >>> 16;

	          wh[j] = (c & 0xffff) | (d << 16);
	          wl[j] = (a & 0xffff) | (b << 16);
	        }
	      }
	    }

	    // add
	    h = ah0;
	    l = al0;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[0];
	    l = hl[0];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
	    hl[0] = al0 = (a & 0xffff) | (b << 16);

	    h = ah1;
	    l = al1;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[1];
	    l = hl[1];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
	    hl[1] = al1 = (a & 0xffff) | (b << 16);

	    h = ah2;
	    l = al2;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[2];
	    l = hl[2];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
	    hl[2] = al2 = (a & 0xffff) | (b << 16);

	    h = ah3;
	    l = al3;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[3];
	    l = hl[3];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
	    hl[3] = al3 = (a & 0xffff) | (b << 16);

	    h = ah4;
	    l = al4;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[4];
	    l = hl[4];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
	    hl[4] = al4 = (a & 0xffff) | (b << 16);

	    h = ah5;
	    l = al5;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[5];
	    l = hl[5];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
	    hl[5] = al5 = (a & 0xffff) | (b << 16);

	    h = ah6;
	    l = al6;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[6];
	    l = hl[6];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
	    hl[6] = al6 = (a & 0xffff) | (b << 16);

	    h = ah7;
	    l = al7;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[7];
	    l = hl[7];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
	    hl[7] = al7 = (a & 0xffff) | (b << 16);

	    pos += 128;
	    n -= 128;
	  }

	  return n;
	}

	function crypto_hash(out, m, n) {
	  var hh = new Int32Array(8),
	      hl = new Int32Array(8),
	      x = new Uint8Array(256),
	      i, b = n;

	  hh[0] = 0x6a09e667;
	  hh[1] = 0xbb67ae85;
	  hh[2] = 0x3c6ef372;
	  hh[3] = 0xa54ff53a;
	  hh[4] = 0x510e527f;
	  hh[5] = 0x9b05688c;
	  hh[6] = 0x1f83d9ab;
	  hh[7] = 0x5be0cd19;

	  hl[0] = 0xf3bcc908;
	  hl[1] = 0x84caa73b;
	  hl[2] = 0xfe94f82b;
	  hl[3] = 0x5f1d36f1;
	  hl[4] = 0xade682d1;
	  hl[5] = 0x2b3e6c1f;
	  hl[6] = 0xfb41bd6b;
	  hl[7] = 0x137e2179;

	  crypto_hashblocks_hl(hh, hl, m, n);
	  n %= 128;

	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
	  x[n] = 128;

	  n = 256-128*(n<112?1:0);
	  x[n-9] = 0;
	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
	  crypto_hashblocks_hl(hh, hl, x, n);

	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

	  return 0;
	}

	function add(p, q) {
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf(),
	      g = gf(), h = gf(), t = gf();

	  Z(a, p[1], p[0]);
	  Z(t, q[1], q[0]);
	  M(a, a, t);
	  A(b, p[0], p[1]);
	  A(t, q[0], q[1]);
	  M(b, b, t);
	  M(c, p[3], q[3]);
	  M(c, c, D2);
	  M(d, p[2], q[2]);
	  A(d, d, d);
	  Z(e, b, a);
	  Z(f, d, c);
	  A(g, d, c);
	  A(h, b, a);

	  M(p[0], e, f);
	  M(p[1], h, g);
	  M(p[2], g, f);
	  M(p[3], e, h);
	}

	function cswap(p, q, b) {
	  var i;
	  for (i = 0; i < 4; i++) {
	    sel25519(p[i], q[i], b);
	  }
	}

	function pack(r, p) {
	  var tx = gf(), ty = gf(), zi = gf();
	  inv25519(zi, p[2]);
	  M(tx, p[0], zi);
	  M(ty, p[1], zi);
	  pack25519(r, ty);
	  r[31] ^= par25519(tx) << 7;
	}

	function scalarmult(p, q, s) {
	  var b, i;
	  set25519(p[0], gf0);
	  set25519(p[1], gf1);
	  set25519(p[2], gf1);
	  set25519(p[3], gf0);
	  for (i = 255; i >= 0; --i) {
	    b = (s[(i/8)|0] >> (i&7)) & 1;
	    cswap(p, q, b);
	    add(q, p);
	    add(p, p);
	    cswap(p, q, b);
	  }
	}

	function scalarbase(p, s) {
	  var q = [gf(), gf(), gf(), gf()];
	  set25519(q[0], X);
	  set25519(q[1], Y);
	  set25519(q[2], gf1);
	  M(q[3], X, Y);
	  scalarmult(p, q, s);
	}

	function crypto_sign_keypair(pk, sk, seeded) {
	  var d = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	  var i;

	  if (!seeded) randombytes(sk, 32);
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  scalarbase(p, d);
	  pack(pk, p);

	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
	  return 0;
	}

	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

	function modL(r, x) {
	  var carry, i, j, k;
	  for (i = 63; i >= 32; --i) {
	    carry = 0;
	    for (j = i - 32, k = i - 12; j < k; ++j) {
	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	      carry = (x[j] + 128) >> 8;
	      x[j] -= carry * 256;
	    }
	    x[j] += carry;
	    x[i] = 0;
	  }
	  carry = 0;
	  for (j = 0; j < 32; j++) {
	    x[j] += carry - (x[31] >> 4) * L[j];
	    carry = x[j] >> 8;
	    x[j] &= 255;
	  }
	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
	  for (i = 0; i < 32; i++) {
	    x[i+1] += x[i] >> 8;
	    r[i] = x[i] & 255;
	  }
	}

	function reduce(r) {
	  var x = new Float64Array(64), i;
	  for (i = 0; i < 64; i++) x[i] = r[i];
	  for (i = 0; i < 64; i++) r[i] = 0;
	  modL(r, x);
	}

	// Note: difference from C - smlen returned, not passed as argument.
	function crypto_sign(sm, m, n, sk) {
	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
	  var i, j, x = new Float64Array(64);
	  var p = [gf(), gf(), gf(), gf()];

	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  var smlen = n + 64;
	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

	  crypto_hash(r, sm.subarray(32), n+32);
	  reduce(r);
	  scalarbase(p, r);
	  pack(sm, p);

	  for (i = 32; i < 64; i++) sm[i] = sk[i];
	  crypto_hash(h, sm, n + 64);
	  reduce(h);

	  for (i = 0; i < 64; i++) x[i] = 0;
	  for (i = 0; i < 32; i++) x[i] = r[i];
	  for (i = 0; i < 32; i++) {
	    for (j = 0; j < 32; j++) {
	      x[i+j] += h[i] * d[j];
	    }
	  }

	  modL(sm.subarray(32), x);
	  return smlen;
	}

	function unpackneg(r, p) {
	  var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();

	  set25519(r[2], gf1);
	  unpack25519(r[1], p);
	  S(num, r[1]);
	  M(den, num, D);
	  Z(num, num, r[2]);
	  A(den, r[2], den);

	  S(den2, den);
	  S(den4, den2);
	  M(den6, den4, den2);
	  M(t, den6, num);
	  M(t, t, den);

	  pow2523(t, t);
	  M(t, t, num);
	  M(t, t, den);
	  M(t, t, den);
	  M(r[0], t, den);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) M(r[0], r[0], I);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) return -1;

	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

	  M(r[3], r[0], r[1]);
	  return 0;
	}

	function crypto_sign_open(m, sm, n, pk) {
	  var i, mlen;
	  var t = new Uint8Array(32), h = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()],
	      q = [gf(), gf(), gf(), gf()];

	  mlen = -1;
	  if (n < 64) return -1;

	  if (unpackneg(q, pk)) return -1;

	  for (i = 0; i < n; i++) m[i] = sm[i];
	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
	  crypto_hash(h, m, n);
	  reduce(h);
	  scalarmult(p, q, h);

	  scalarbase(q, sm.subarray(32));
	  add(p, q);
	  pack(t, p);

	  n -= 64;
	  if (crypto_verify_32(sm, 0, t, 0)) {
	    for (i = 0; i < n; i++) m[i] = 0;
	    return -1;
	  }

	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
	  mlen = n;
	  return mlen;
	}

	var crypto_secretbox_KEYBYTES = 32,
	    crypto_secretbox_NONCEBYTES = 24,
	    crypto_secretbox_ZEROBYTES = 32,
	    crypto_secretbox_BOXZEROBYTES = 16,
	    crypto_scalarmult_BYTES = 32,
	    crypto_scalarmult_SCALARBYTES = 32,
	    crypto_box_PUBLICKEYBYTES = 32,
	    crypto_box_SECRETKEYBYTES = 32,
	    crypto_box_BEFORENMBYTES = 32,
	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	    crypto_sign_BYTES = 64,
	    crypto_sign_PUBLICKEYBYTES = 32,
	    crypto_sign_SECRETKEYBYTES = 64,
	    crypto_sign_SEEDBYTES = 32,
	    crypto_hash_BYTES = 64;

	nacl.lowlevel = {
	  crypto_core_hsalsa20: crypto_core_hsalsa20,
	  crypto_stream_xor: crypto_stream_xor,
	  crypto_stream: crypto_stream,
	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	  crypto_stream_salsa20: crypto_stream_salsa20,
	  crypto_onetimeauth: crypto_onetimeauth,
	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	  crypto_verify_16: crypto_verify_16,
	  crypto_verify_32: crypto_verify_32,
	  crypto_secretbox: crypto_secretbox,
	  crypto_secretbox_open: crypto_secretbox_open,
	  crypto_scalarmult: crypto_scalarmult,
	  crypto_scalarmult_base: crypto_scalarmult_base,
	  crypto_box_beforenm: crypto_box_beforenm,
	  crypto_box_afternm: crypto_box_afternm,
	  crypto_box: crypto_box,
	  crypto_box_open: crypto_box_open,
	  crypto_box_keypair: crypto_box_keypair,
	  crypto_hash: crypto_hash,
	  crypto_sign: crypto_sign,
	  crypto_sign_keypair: crypto_sign_keypair,
	  crypto_sign_open: crypto_sign_open,

	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	  crypto_sign_BYTES: crypto_sign_BYTES,
	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	  crypto_hash_BYTES: crypto_hash_BYTES
	};

	/* High-level API */

	function checkLengths(k, n) {
	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	}

	function checkBoxLengths(pk, sk) {
	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	}

	function checkArrayTypes() {
	  for (var i = 0; i < arguments.length; i++) {
	    if (!(arguments[i] instanceof Uint8Array))
	      throw new TypeError('unexpected type, use Uint8Array');
	  }
	}

	function cleanup(arr) {
	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
	}

	nacl.randomBytes = function(n) {
	  var b = new Uint8Array(n);
	  randombytes(b, n);
	  return b;
	};

	nacl.secretbox = function(msg, nonce, key) {
	  checkArrayTypes(msg, nonce, key);
	  checkLengths(key, nonce);
	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	  var c = new Uint8Array(m.length);
	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
	  crypto_secretbox(c, m, m.length, nonce, key);
	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
	};

	nacl.secretbox.open = function(box, nonce, key) {
	  checkArrayTypes(box, nonce, key);
	  checkLengths(key, nonce);
	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	  var m = new Uint8Array(c.length);
	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
	  if (c.length < 32) return null;
	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
	  return m.subarray(crypto_secretbox_ZEROBYTES);
	};

	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

	nacl.scalarMult = function(n, p) {
	  checkArrayTypes(n, p);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad board_rows size');
	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult(q, n, p);
	  return q;
	};

	nacl.scalarMult.base = function(n) {
	  checkArrayTypes(n);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad board_rows size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult_base(q, n);
	  return q;
	};

	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

	nacl.box = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox(msg, nonce, k);
	};

	nacl.box.before = function(publicKey, secretKey) {
	  checkArrayTypes(publicKey, secretKey);
	  checkBoxLengths(publicKey, secretKey);
	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	  crypto_box_beforenm(k, publicKey, secretKey);
	  return k;
	};

	nacl.box.after = nacl.secretbox;

	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox.open(msg, nonce, k);
	};

	nacl.box.open.after = nacl.secretbox.open;

	nacl.box.keyPair = function() {
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	  crypto_box_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.box.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  crypto_scalarmult_base(pk, secretKey);
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	nacl.box.nonceLength = crypto_box_NONCEBYTES;
	nacl.box.overheadLength = nacl.secretbox.overheadLength;

	nacl.sign = function(msg, secretKey) {
	  checkArrayTypes(msg, secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
	  crypto_sign(signedMsg, msg, msg.length, secretKey);
	  return signedMsg;
	};

	nacl.sign.open = function(signedMsg, publicKey) {
	  checkArrayTypes(signedMsg, publicKey);
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var tmp = new Uint8Array(signedMsg.length);
	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	  if (mlen < 0) return null;
	  var m = new Uint8Array(mlen);
	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
	  return m;
	};

	nacl.sign.detached = function(msg, secretKey) {
	  var signedMsg = nacl.sign(msg, secretKey);
	  var sig = new Uint8Array(crypto_sign_BYTES);
	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
	  return sig;
	};

	nacl.sign.detached.verify = function(msg, sig, publicKey) {
	  checkArrayTypes(msg, sig, publicKey);
	  if (sig.length !== crypto_sign_BYTES)
	    throw new Error('bad signature size');
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var i;
	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
	};

	nacl.sign.keyPair = function() {
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  crypto_sign_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.sign.keyPair.fromSeed = function(seed) {
	  checkArrayTypes(seed);
	  if (seed.length !== crypto_sign_SEEDBYTES)
	    throw new Error('bad seed size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
	  crypto_sign_keypair(pk, sk, true);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	nacl.sign.signatureLength = crypto_sign_BYTES;

	nacl.hash = function(msg) {
	  checkArrayTypes(msg);
	  var h = new Uint8Array(crypto_hash_BYTES);
	  crypto_hash(h, msg, msg.length);
	  return h;
	};

	nacl.hash.hashLength = crypto_hash_BYTES;

	nacl.verify = function(x, y) {
	  checkArrayTypes(x, y);
	  // Zero length arguments are considered not equal.
	  if (x.length === 0 || y.length === 0) return false;
	  if (x.length !== y.length) return false;
	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
	};

	nacl.setPRNG = function(fn) {
	  randombytes = fn;
	};

	(function() {
	  // Initialize PRNG if environment provides CSPRNG.
	  // If not, methods calling randombytes will throw.
	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
	  if (crypto && crypto.getRandomValues) {
	    // Browsers.
	    var QUOTA = 65536;
	    nacl.setPRNG(function(x, n) {
	      var i, v = new Uint8Array(n);
	      for (i = 0; i < n; i += QUOTA) {
	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	      }
	      for (i = 0; i < n; i++) x[i] = v[i];
	      cleanup(v);
	    });
	  } else if (true) {
	    // Node.js.
	    crypto = __webpack_require__(27);
	    if (crypto && crypto.randomBytes) {
	      nacl.setPRNG(function(x, n) {
	        var i, v = crypto.randomBytes(n);
	        for (i = 0; i < n; i++) x[i] = v[i];
	        cleanup(v);
	      });
	    }
	  }
	})();

	})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _base64url = __webpack_require__(25);

	var _base64url2 = _interopRequireDefault(_base64url);

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var crypto = (true) && window.crypto;

	// supported algorithms
	var ECDSA = 'ECDSA_SHA256';
	var RSA = 'RS256';

	var algorithm = _Util2.default.isFirefox || _Util2.default.isEdge() ? RSA : ECDSA; // default to ECDSA and fallback to RSA

	/**
	 * Class providing static crypto primitives for the browser using Web Cryptography API.
	 */

	var CryptoBrowser = function () {
	    function CryptoBrowser() {
	        _classCallCheck(this, CryptoBrowser);
	    }

	    _createClass(CryptoBrowser, null, [{
	        key: 'generateKeys',

	        /**
	         * Generates a key pair to use with the Token system.
	         *
	         * @param {string} keyLevel - "LOW", "STANDARD", or "PRIVILEGED"
	         * @param {string} expirationMs - (optional) expiration duration of the key in milliseconds
	         * @param {boolean} extractable - whether the private key can be extracted into raw data
	         * @return {Object} generated key pair
	         */
	        value: function generateKeys(keyLevel, expirationMs) {
	            var extractable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	            var keyPair;
	            return regeneratorRuntime.async(function generateKeys$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _context.next = 2;
	                            return regeneratorRuntime.awrap(CryptoBrowser._generateKeyPair(extractable));

	                        case 2:
	                            keyPair = _context.sent;

	                            keyPair.level = keyLevel;
	                            if (expirationMs !== undefined) keyPair.expiresAtMs = new Date().getTime() + expirationMs;
	                            return _context.abrupt('return', keyPair);

	                        case 6:
	                        case 'end':
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Signs a string and returns the signature.
	         *
	         * @param {string} message - message to sign
	         * @param {Object} keys - keys to sign with
	         * @return {string} signature
	         */

	    }, {
	        key: 'sign',
	        value: function sign(message, keys) {
	            var importedPrivateKey, sig;
	            return regeneratorRuntime.async(function sign$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            importedPrivateKey = keys.privateKey;

	                            if (keys.privateKey.constructor.name === 'CryptoKey') {
	                                _context2.next = 5;
	                                break;
	                            }

	                            _context2.next = 4;
	                            return regeneratorRuntime.awrap(crypto.subtle.importKey('jwk', keys.privateKey, CryptoBrowser[algorithm].import, false, ['sign']));

	                        case 4:
	                            importedPrivateKey = _context2.sent;

	                        case 5:
	                            _context2.t0 = Uint8Array;
	                            _context2.next = 8;
	                            return regeneratorRuntime.awrap(crypto.subtle.sign(CryptoBrowser[algorithm].sign, importedPrivateKey, _Util2.default.wrapBuffer(message)));

	                        case 8:
	                            _context2.t1 = _context2.sent;
	                            sig = new _context2.t0(_context2.t1);

	                            if (algorithm === ECDSA) sig = CryptoBrowser._P1363ToDer(sig);
	                            return _context2.abrupt('return', (0, _base64url2.default)(sig));

	                        case 12:
	                        case 'end':
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Verifies a signature on a string. Throws if verification fails.
	         *
	         * @param {string} message - string to verify
	         * @param {string} signature - signature to verify
	         * @param {Uint8Array} publicKey - public key to use for verification
	         */

	    }, {
	        key: 'verify',
	        value: function verify(message, signature, publicKey) {
	            var importedPublicKey, result;
	            return regeneratorRuntime.async(function verify$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            signature = _Util2.default.bufferKey(signature);
	                            if (algorithm === ECDSA) signature = CryptoBrowser._DerToP1363(signature);
	                            _context3.next = 4;
	                            return regeneratorRuntime.awrap(crypto.subtle.importKey('spki', publicKey, CryptoBrowser[algorithm].import, false, ['verify']));

	                        case 4:
	                            importedPublicKey = _context3.sent;
	                            _context3.next = 7;
	                            return regeneratorRuntime.awrap(crypto.subtle.verify(CryptoBrowser[algorithm].verify, importedPublicKey, signature, _Util2.default.wrapBuffer(message)));

	                        case 7:
	                            result = _context3.sent;

	                            if (result) {
	                                _context3.next = 10;
	                                break;
	                            }

	                            throw new Error('Invalid signature ' + signature + ' on message ' + message + ' with pk ' + publicKey);

	                        case 10:
	                        case 'end':
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }, {
	        key: '_generateKeyPair',
	        value: function _generateKeyPair(extractable) {
	            var keyPair;
	            return regeneratorRuntime.async(function _generateKeyPair$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            keyPair = void 0;
	                            _context4.prev = 1;
	                            _context4.next = 4;
	                            return regeneratorRuntime.awrap(crypto.subtle.generateKey(CryptoBrowser[algorithm].generate, extractable, ['sign', 'verify']));

	                        case 4:
	                            keyPair = _context4.sent;
	                            _context4.next = 13;
	                            break;

	                        case 7:
	                            _context4.prev = 7;
	                            _context4.t0 = _context4['catch'](1);

	                            algorithm = RSA;
	                            _context4.next = 12;
	                            return regeneratorRuntime.awrap(crypto.subtle.generateKey(CryptoBrowser[algorithm].generate, extractable, ['sign', 'verify']));

	                        case 12:
	                            keyPair = _context4.sent;

	                        case 13:
	                            keyPair = { publicKey: keyPair.publicKey, privateKey: keyPair.privateKey }; // for MS Edge

	                            if (!extractable) {
	                                _context4.next = 18;
	                                break;
	                            }

	                            _context4.next = 17;
	                            return regeneratorRuntime.awrap(crypto.subtle.exportKey('jwk', keyPair.privateKey));

	                        case 17:
	                            keyPair.privateKey = _context4.sent;

	                        case 18:
	                            _context4.t1 = Uint8Array;
	                            _context4.next = 21;
	                            return regeneratorRuntime.awrap(crypto.subtle.exportKey('spki', keyPair.publicKey));

	                        case 21:
	                            _context4.t2 = _context4.sent;
	                            keyPair.publicKey = new _context4.t1(_context4.t2);
	                            _context4.t3 = _base64url2.default;
	                            _context4.next = 26;
	                            return regeneratorRuntime.awrap(crypto.subtle.digest('SHA-256', keyPair.publicKey));

	                        case 26:
	                            _context4.t4 = _context4.sent;
	                            keyPair.id = (0, _context4.t3)(_context4.t4).substring(0, 16);

	                            keyPair.algorithm = algorithm;
	                            return _context4.abrupt('return', keyPair);

	                        case 30:
	                        case 'end':
	                            return _context4.stop();
	                    }
	                }
	            }, null, this, [[1, 7]]);
	        }

	        /**
	         * Converts an ECDSA signature from P1363 to DER format
	         *
	         * @param {Uint8Array} sig - P1363 signature
	         * @return {Uint8Array} DER signature
	         * @private
	         */

	    }, {
	        key: '_P1363ToDer',
	        value: function _P1363ToDer(sig) {
	            var signature = Array.from(sig, function (x) {
	                return ('00' + x.toString(16)).slice(-2);
	            }).join('');
	            var r = signature.substr(0, signature.length / 2);
	            var s = signature.substr(signature.length / 2);
	            r = r.replace(/^(00)+/, '');
	            s = s.replace(/^(00)+/, '');
	            if ((parseInt(r, 16) & '0x80') > 0) r = '00' + r;
	            if ((parseInt(s, 16) & '0x80') > 0) s = '00' + s;
	            var rString = '02' + (r.length / 2).toString(16).padStart(2, '0') + r;
	            var sString = '02' + (s.length / 2).toString(16).padStart(2, '0') + s;
	            var derSig = '30' + ((rString.length + sString.length) / 2).toString(16).padStart(2, '0') + rString + sString;
	            return new Uint8Array(derSig.match(/[\da-f]{2}/gi).map(function (h) {
	                return parseInt(h, 16);
	            }));
	        }

	        /**
	         * Converts an ECDSA signature from DER to P1363 format
	         *
	         * @param {Uint8Array} sig - DER signature
	         * @return {Uint8Array} P1363 signature
	         * @private
	         */

	    }, {
	        key: '_DerToP1363',
	        value: function _DerToP1363(sig) {
	            var signature = Array.from(sig, function (x) {
	                return ('00' + x.toString(16)).slice(-2);
	            }).join('');
	            var rLength = parseInt(signature.substr(6, 2), 16) * 2;
	            var r = signature.substr(8, rLength);
	            var s = signature.substr(12 + rLength);
	            r = r.length > 64 ? r.substr(-64) : r.padStart(64, '0');
	            s = s.length > 64 ? s.substr(-64) : s.padStart(64, '0');
	            var p1363Sig = '' + r + s;
	            return new Uint8Array(p1363Sig.match(/[\da-f]{2}/gi).map(function (h) {
	                return parseInt(h, 16);
	            }));
	        }
	    }, {
	        key: ECDSA,
	        get: function get() {
	            var ao = {}; // algorithm options
	            ao.generate = ao.import = {
	                name: "ECDSA",
	                namedCurve: "P-256" // can be "P-256", "P-384", or "P-521"
	            };
	            ao.sign = ao.verify = {
	                name: "ECDSA",
	                hash: { name: "SHA-256" } // can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
	            };
	            return ao;
	        }
	    }, {
	        key: RSA,
	        get: function get() {
	            var ao = {};
	            ao.generate = {
	                name: "RSASSA-PKCS1-v1_5",
	                modulusLength: 2048, // can be 1024, 2048, or 4096
	                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
	                hash: { name: "SHA-256" } // can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
	            };
	            ao.import = ao.sign = ao.verify = {
	                name: "RSASSA-PKCS1-v1_5",
	                hash: { name: "SHA-256" } // can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
	            };
	            return ao;
	        }
	    }]);

	    return CryptoBrowser;
	}();

	exports.default = CryptoBrowser;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _KeyStoreCryptoEngine2 = __webpack_require__(30);

	var _KeyStoreCryptoEngine3 = _interopRequireDefault(_KeyStoreCryptoEngine2);

	var _BrowserKeyStore = __webpack_require__(31);

	var _BrowserKeyStore2 = _interopRequireDefault(_BrowserKeyStore);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Crypto engine for the browser, it handles signatures, verifications,
	 * and keys are stored in IndexedDB using the following schema
	 *
	 * KEY: memberId (e.g. 'board_cols:12345:678')
	 * VALUE (JS object):
	 * {
	 *      LOW: {
	 *          id: 456,
	 *          algorithm: ECDSA,
	 *          level: LOW,
	 *          publicKey: key data in Uint8Array format
	 *          privateKey: non-extractable object
	 *      },
	 *      STANDARD: {...},
	 *      PRIVILEGED: {...},
	 * }
	 *
	 * Furthermore, activeMemberId is stored in localStorage
	 */
	var globalKeyStore = new _BrowserKeyStore2.default();

	var BrowserCryptoEngine = function (_KeyStoreCryptoEngine) {
	    _inherits(BrowserCryptoEngine, _KeyStoreCryptoEngine);

	    /**
	     * Constructs the engine, using an existing member/keys if it is in localStorage
	     *
	     * @param {string} memberId - memberId of the member we want to create the engine for
	     */
	    function BrowserCryptoEngine(memberId) {
	        _classCallCheck(this, BrowserCryptoEngine);

	        return _possibleConstructorReturn(this, (BrowserCryptoEngine.__proto__ || Object.getPrototypeOf(BrowserCryptoEngine)).call(this, memberId, globalKeyStore));
	    }

	    _createClass(BrowserCryptoEngine, null, [{
	        key: 'getActiveMemberId',
	        value: function getActiveMemberId() {
	            return _BrowserKeyStore2.default.getActiveMemberId();
	        }
	    }, {
	        key: 'setActiveMemberId',
	        value: function setActiveMemberId(memberId) {
	            _BrowserKeyStore2.default.setActiveMemberId(memberId);
	        }
	    }, {
	        key: 'clearAllKeys',
	        value: function clearAllKeys() {
	            return regeneratorRuntime.async(function clearAllKeys$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _context.next = 2;
	                            return regeneratorRuntime.awrap(globalKeyStore.clearAllKeys());

	                        case 2:
	                            return _context.abrupt('return', _context.sent);

	                        case 3:
	                        case 'end':
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return BrowserCryptoEngine;
	}(_KeyStoreCryptoEngine3.default);

	exports.default = BrowserCryptoEngine;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Crypto = __webpack_require__(5);

	var _Crypto2 = _interopRequireDefault(_Crypto);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Base crypto engine that are extended by others, it handles signatures, verifications, and key storage.
	 */
	var KeyStoreCryptoEngine = function () {
	    function KeyStoreCryptoEngine(memberId, keystore) {
	        _classCallCheck(this, KeyStoreCryptoEngine);

	        if (!memberId) {
	            throw new Error('Invalid memberId');
	        }
	        if (!keystore) {
	            throw new Error('Invalid keystore');
	        }
	        this._memberId = memberId;
	        this._keystore = keystore;
	        if (memberId && keystore.constructor.setActiveMemberId) {
	            keystore.constructor.setActiveMemberId(memberId);
	        }
	    }

	    /**
	     * Generate a key pair and store it.
	     *
	     * @param {string} level - "LOW", "STANDARD", or "PRIVILEGED"
	     * @param {number} expirationMs - (optional) expiration duration of the key in milliseconds
	     * @return {Object} key
	     */


	    _createClass(KeyStoreCryptoEngine, [{
	        key: 'generateKey',
	        value: function generateKey(level, expirationMs) {
	            var keyPair, stored;
	            return regeneratorRuntime.async(function generateKey$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _context.next = 2;
	                            return regeneratorRuntime.awrap(_Crypto2.default.generateKeys(level, expirationMs));

	                        case 2:
	                            keyPair = _context.sent;
	                            _context.next = 5;
	                            return regeneratorRuntime.awrap(this._keystore.put(this._memberId, keyPair));

	                        case 5:
	                            stored = _context.sent;

	                            if (stored && stored.privateKey) {
	                                delete stored.privateKey;
	                            }
	                            return _context.abrupt('return', stored);

	                        case 8:
	                        case 'end':
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Create a signer. Assumes we previously generated the relevant key.
	         *
	         * @param {string} level - privilege level "LOW", "STANDARD", "PRIVILEGED"
	         * @return {Object} signer object that implements sign, signJson, and getKeyId
	         */

	    }, {
	        key: 'createSigner',
	        value: function createSigner(level) {
	            var keyPair;
	            return regeneratorRuntime.async(function createSigner$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            _context2.next = 2;
	                            return regeneratorRuntime.awrap(this._keystore.getByLevel(this._memberId, level));

	                        case 2:
	                            keyPair = _context2.sent;
	                            return _context2.abrupt('return', _Crypto2.default.createSignerFromKeypair(keyPair));

	                        case 4:
	                        case 'end':
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Create a verifier. Assumes we have the key with the passed ID.
	         *
	         * @param {string} keyId - ID of key to use
	         * @return {Object} verifier object that implements verify and verifyJson
	         */

	    }, {
	        key: 'createVerifier',
	        value: function createVerifier(keyId) {
	            var keyPair;
	            return regeneratorRuntime.async(function createVerifier$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            _context3.next = 2;
	                            return regeneratorRuntime.awrap(this._keystore.getById(this._memberId, keyId));

	                        case 2:
	                            keyPair = _context3.sent;
	                            return _context3.abrupt('return', _Crypto2.default.createVerifierFromKeypair(keyPair));

	                        case 4:
	                        case 'end':
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return KeyStoreCryptoEngine;
	}();

	exports.default = KeyStoreCryptoEngine;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var MEMBER_KEY_DB = 'member_key';
	var MEMBER_KEY_DB_VERSION = 1;
	var MEMBER_KEY_STORE = 'member_keys';

	var READ_ONLY = 'readonly';
	var READ_WRITE = 'readwrite';

	var BrowserKeyStore = function () {
	    function BrowserKeyStore() {
	        _classCallCheck(this, BrowserKeyStore);
	    }

	    _createClass(BrowserKeyStore, [{
	        key: 'put',


	        /**
	         * Store a member's key pair.
	         *
	         * @param {string} memberId - ID of member
	         * @param {Object} keyPair - key pair to store
	         * @return {Promise} promise that resolves into the key pair that was passed in
	         */
	        value: function put(memberId, keyPair) {
	            var store;
	            return regeneratorRuntime.async(function put$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            if (memberId) {
	                                _context.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (keyPair) {
	                                _context.next = 4;
	                                break;
	                            }

	                            throw new Error("Don't know what key to put");

	                        case 4:
	                            if (keyPair.level) {
	                                _context.next = 6;
	                                break;
	                            }

	                            throw new Error("Don't know what level to put key");

	                        case 6:
	                            if (true) {
	                                _context.next = 8;
	                                break;
	                            }

	                            throw new Error("Browser Only");

	                        case 8:
	                            if (!(keyPair.expiresAtMs < Date.now())) {
	                                _context.next = 10;
	                                break;
	                            }

	                            throw new Error('Key ' + keyPair.id + ' has expired');

	                        case 10:
	                            _context.next = 12;
	                            return regeneratorRuntime.awrap(BrowserKeyStore._getObjectStore(MEMBER_KEY_STORE, READ_WRITE));

	                        case 12:
	                            store = _context.sent;
	                            return _context.abrupt('return', new Promise(function (resolve, reject) {
	                                var getReq = store.get(memberId);
	                                getReq.onsuccess = function () {
	                                    var member = getReq.result || {};
	                                    var putReq = store.put(Object.assign(member, _defineProperty({}, keyPair.level, keyPair)), memberId);
	                                    putReq.onsuccess = function () {
	                                        BrowserKeyStore.setActiveMemberId(memberId);
	                                        resolve(keyPair);
	                                    };
	                                    putReq.onerror = function () {
	                                        return reject(new Error('Error saving member to database: ' + putReq.error));
	                                    };
	                                };
	                                getReq.onerror = function () {
	                                    return reject(new Error('Error getting member from database: ' + getReq.error));
	                                };
	                            }));

	                        case 14:
	                        case 'end':
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Look up a key by memberId and level.
	         *
	         * @param {string} memberId - ID of member
	         * @param {string} level - "LOW", "STANDARD", or "PRIVILEGED"
	         * @return {Promise} promise that resolves into the retrieved key pair
	         */

	    }, {
	        key: 'getByLevel',
	        value: function getByLevel(memberId, level) {
	            var store;
	            return regeneratorRuntime.async(function getByLevel$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            if (memberId) {
	                                _context2.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (level) {
	                                _context2.next = 4;
	                                break;
	                            }

	                            throw new Error("Don't know what key level to get");

	                        case 4:
	                            if (true) {
	                                _context2.next = 6;
	                                break;
	                            }

	                            throw new Error("Browser Only");

	                        case 6:
	                            _context2.next = 8;
	                            return regeneratorRuntime.awrap(BrowserKeyStore._getObjectStore(MEMBER_KEY_STORE));

	                        case 8:
	                            store = _context2.sent;
	                            return _context2.abrupt('return', new Promise(function (resolve, reject) {
	                                var getReq = store.get(memberId);
	                                getReq.onsuccess = function () {
	                                    var member = getReq.result;
	                                    if (!member) {
	                                        return reject(new Error('Member with id ' + memberId + ' not found'));
	                                    }
	                                    if (!member[level]) {
	                                        return reject(new Error('No key with level ' + level + ' found'));
	                                    }
	                                    if (member[level].expiresAtMs < Date.now()) {
	                                        return reject(new Error('Key with level ' + level + ' has expired'));
	                                    }
	                                    BrowserKeyStore.setActiveMemberId(memberId);
	                                    resolve(getReq.result[level]);
	                                };
	                                getReq.onerror = function () {
	                                    return reject(new Error('Error getting member from database: ' + getReq.error));
	                                };
	                            }));

	                        case 10:
	                        case 'end':
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Look up a key by memberId and keyId.
	         *
	         * @param {string} memberId - ID of member
	         * @param {string} keyId - key ID
	         * @return {Promise} promise that resolves into the retrieved key pair
	         */

	    }, {
	        key: 'getById',
	        value: function getById(memberId, keyId) {
	            var store;
	            return regeneratorRuntime.async(function getById$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            if (memberId) {
	                                _context3.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (keyId) {
	                                _context3.next = 4;
	                                break;
	                            }

	                            throw new Error('Don\'t know id of key to get');

	                        case 4:
	                            if (true) {
	                                _context3.next = 6;
	                                break;
	                            }

	                            throw new Error("Browser Only");

	                        case 6:
	                            _context3.next = 8;
	                            return regeneratorRuntime.awrap(BrowserKeyStore._getObjectStore(MEMBER_KEY_STORE));

	                        case 8:
	                            store = _context3.sent;
	                            return _context3.abrupt('return', new Promise(function (resolve, reject) {
	                                var getReq = store.get(memberId);
	                                getReq.onsuccess = function () {
	                                    var member = getReq.result;
	                                    if (!member) {
	                                        return reject(new Error('member ' + memberId + ' not found'));
	                                    }
	                                    Object.values(member).forEach(function (keyPair) {
	                                        if (keyPair.id === keyId) {
	                                            if (keyPair.expiresAtMs < Date.now()) {
	                                                reject(new Error('Key with id ' + keyPair.id + ' has expired'));
	                                            }
	                                            BrowserKeyStore.setActiveMemberId(memberId);
	                                            resolve(keyPair);
	                                        }
	                                    });
	                                    reject(new Error('No key with id ' + keyId + ' found'));
	                                };
	                                getReq.onerror = function () {
	                                    return reject(new Error('Error getting member from database: ' + getReq.error));
	                                };
	                            }));

	                        case 10:
	                        case 'end':
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Return list of member's keys.
	         *
	         * @param {string} memberId - ID of member
	         * @return {Promise} promise that resolves into the retrieved list of key pairs
	         */

	    }, {
	        key: 'listKeys',
	        value: function listKeys(memberId) {
	            var store;
	            return regeneratorRuntime.async(function listKeys$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            if (memberId) {
	                                _context4.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (true) {
	                                _context4.next = 4;
	                                break;
	                            }

	                            throw new Error("Browser Only");

	                        case 4:
	                            _context4.next = 6;
	                            return regeneratorRuntime.awrap(BrowserKeyStore._getObjectStore(MEMBER_KEY_STORE));

	                        case 6:
	                            store = _context4.sent;
	                            return _context4.abrupt('return', new Promise(function (resolve, reject) {
	                                var getReq = store.get(memberId);
	                                getReq.onsuccess = function () {
	                                    var member = getReq.result;
	                                    if (!member) {
	                                        return reject(new Error('member ' + memberId + ' not found'));
	                                    }
	                                    BrowserKeyStore.setActiveMemberId(memberId);
	                                    resolve(Object.values(member).filter(function (keyPair) {
	                                        return !(keyPair.expiresAtMs < Date.now());
	                                    }));
	                                };
	                                getReq.onerror = function () {
	                                    return reject(new Error('Error getting member from database: ' + getReq.error));
	                                };
	                            }));

	                        case 8:
	                        case 'end':
	                            return _context4.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Clears all keys in object store
	         *
	         * @return {Promise<any>} promise that resolves when all keys have been cleared
	         */

	    }, {
	        key: 'clearAllKeys',
	        value: function clearAllKeys() {
	            var store;
	            return regeneratorRuntime.async(function clearAllKeys$(_context5) {
	                while (1) {
	                    switch (_context5.prev = _context5.next) {
	                        case 0:
	                            _context5.next = 2;
	                            return regeneratorRuntime.awrap(BrowserKeyStore._getObjectStore(MEMBER_KEY_STORE, READ_WRITE));

	                        case 2:
	                            store = _context5.sent;
	                            return _context5.abrupt('return', new Promise(function (resolve, reject) {
	                                var clearReq = store.clear();
	                                clearReq.onsuccess = function () {
	                                    return resolve();
	                                };
	                                clearReq.onerror = function () {
	                                    return reject(new Error('Error clearing the database: ' + clearReq.error));
	                                };
	                            }));

	                        case 4:
	                        case 'end':
	                            return _context5.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Opens an instance of IndexedDB
	         *
	         * @param {string} dbName - name of db
	         * @param {string} dbVersion - version of db
	         * @return {Promise<IDBDatabase>} promise that resolves into the database object
	         * @private
	         */

	    }], [{
	        key: 'setActiveMemberId',

	        /**
	         * Keep track of the ID of the most recently active member.
	         *
	         * @param {string} memberId - ID of member
	         */
	        value: function setActiveMemberId(memberId) {
	            localStorage.activeMemberId = memberId;
	        }

	        /**
	         * Get the ID of the most recently active member.
	         *
	         * @return {string} ID of member
	         */

	    }, {
	        key: 'getActiveMemberId',
	        value: function getActiveMemberId() {
	            var memberId = localStorage.activeMemberId;
	            if (!memberId) {
	                throw new Error('No active memberId on this browser');
	            }
	            return memberId;
	        }
	    }, {
	        key: '_openDb',
	        value: function _openDb(dbName, dbVersion) {
	            return regeneratorRuntime.async(function _openDb$(_context6) {
	                while (1) {
	                    switch (_context6.prev = _context6.next) {
	                        case 0:
	                            return _context6.abrupt('return', new Promise(function (resolve, reject) {
	                                if (!indexedDB) reject(new Error('Your browser does not support IndexedDB'));
	                                var openReq = indexedDB.open(dbName, dbVersion);
	                                openReq.onsuccess = function () {
	                                    resolve(openReq.result);
	                                };
	                                openReq.onerror = function () {
	                                    return reject(new Error('Error opening database: ' + openReq.error));
	                                };
	                                openReq.onupgradeneeded = function (e) {
	                                    var db = e.target.result;
	                                    db.createObjectStore(MEMBER_KEY_STORE);
	                                };
	                            }));

	                        case 1:
	                        case 'end':
	                            return _context6.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Retrieves an object store from the db
	         *
	         * @param {string} storeName - name of object store
	         * @param {string} mode - readonly, readwrite, or readwriteflush, defaults to readonly
	         * @return {Promise<IDBObjectStore>} promise that resolves into the store object
	         * @private
	         */

	    }, {
	        key: '_getObjectStore',
	        value: function _getObjectStore(storeName) {
	            var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : READ_ONLY;
	            var db, txn;
	            return regeneratorRuntime.async(function _getObjectStore$(_context7) {
	                while (1) {
	                    switch (_context7.prev = _context7.next) {
	                        case 0:
	                            _context7.next = 2;
	                            return regeneratorRuntime.awrap(BrowserKeyStore._openDb(MEMBER_KEY_DB, MEMBER_KEY_DB_VERSION));

	                        case 2:
	                            db = _context7.sent;
	                            txn = db.transaction(storeName, mode);

	                            txn.oncomplete = function () {
	                                return db.close();
	                            };
	                            txn.onerror = function () {
	                                throw new Error('Error opening transaction: ' + txn.error);
	                            };
	                            return _context7.abrupt('return', txn.objectStore(storeName));

	                        case 7:
	                        case 'end':
	                            return _context7.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return BrowserKeyStore;
	}();

	exports.default = BrowserKeyStore;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _KeyStoreCryptoEngine2 = __webpack_require__(30);

	var _KeyStoreCryptoEngine3 = _interopRequireDefault(_KeyStoreCryptoEngine2);

	var _MemoryKeyStore = __webpack_require__(33);

	var _MemoryKeyStore2 = _interopRequireDefault(_MemoryKeyStore);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * MemoryCryptoEngine: Implements the CryptoEngine interface.
	 *
	 * Crypto engine to handle signatures, verifications, and key storage, in memory. Handles storage
	 * for multiple members at once, and uses the following schema:
	 *
	 * {
	 *   "ACTIVE": "board_cols:12345:678", // member ID of most-recently active member
	 *   "board_cols:12345:678": { // a member's keys:
	 *     "PRIVILEGED": {
	 *          id: "456", // key ID
	 *          algorithm: ED25519,
	 *          level: PRIVILEGED,
	 *          publicKey: Buffer(...), // public key data
	 *          privateKey: Buffer(...), // secret key data
	 *      },
	 *     "LOW": {...},
	 *     "STANDARD": {...},
	 *   },
	 *   "board_cols:91011:12d": {...} // other member's keys...
	 * }
	 *
	 */

	var globalKeyStore = new _MemoryKeyStore2.default();

	var MemoryCryptoEngine = function (_KeyStoreCryptoEngine) {
	    _inherits(MemoryCryptoEngine, _KeyStoreCryptoEngine);

	    function MemoryCryptoEngine(memberId) {
	        _classCallCheck(this, MemoryCryptoEngine);

	        return _possibleConstructorReturn(this, (MemoryCryptoEngine.__proto__ || Object.getPrototypeOf(MemoryCryptoEngine)).call(this, memberId, globalKeyStore));
	    }

	    /**
	     * Gets the currently active memberId.
	     * This allows login without caching memberId somewhere
	     *
	     * @return {string} memberId - active memberId
	     */


	    _createClass(MemoryCryptoEngine, null, [{
	        key: 'getActiveMemberId',
	        value: function getActiveMemberId() {
	            var memberId = _MemoryKeyStore2.default.getActiveMemberId();
	            if (!memberId) {
	                throw new Error('No active memberId on this browser');
	            }
	            return memberId;
	        }
	    }]);

	    return MemoryCryptoEngine;
	}(_KeyStoreCryptoEngine3.default);

	exports.default = MemoryCryptoEngine;

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var globalStorage = {};

	var MemoryKeyStore = function () {
	    function MemoryKeyStore() {
	        _classCallCheck(this, MemoryKeyStore);
	    }

	    _createClass(MemoryKeyStore, [{
	        key: "put",


	        /**
	         * Store a member's key pair.
	         *
	         * @param {string} memberId - ID of member
	         * @param {Object} keyPair - key pair to store
	         * @return {Object} the stored key pair
	         */
	        value: function put(memberId, keyPair) {
	            return regeneratorRuntime.async(function put$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            if (memberId) {
	                                _context.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (keyPair) {
	                                _context.next = 4;
	                                break;
	                            }

	                            throw new Error("Don't know what key to put");

	                        case 4:
	                            if (keyPair.level) {
	                                _context.next = 6;
	                                break;
	                            }

	                            throw new Error("Invalid key structure: has no privilege level");

	                        case 6:
	                            if (!(keyPair.expiresAtMs < Date.now())) {
	                                _context.next = 8;
	                                break;
	                            }

	                            throw new Error("Key " + keyPair.id + " has expired");

	                        case 8:
	                            if (!globalStorage[memberId]) {
	                                globalStorage[memberId] = {};
	                            }
	                            globalStorage[memberId][keyPair.level] = clone(keyPair);
	                            globalStorage.ACTIVE = memberId;
	                            return _context.abrupt("return", clone(globalStorage[memberId][keyPair.level]));

	                        case 12:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Look up a key by memberId and level.
	         *
	         * @param {string} memberId - ID of member
	         * @param {string} level - "LOW", "STANDARD", or "PRIVILEGED"
	         * @return {Object} key pair
	         */

	    }, {
	        key: "getByLevel",
	        value: function getByLevel(memberId, level) {
	            return regeneratorRuntime.async(function getByLevel$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            if (memberId) {
	                                _context2.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (level) {
	                                _context2.next = 4;
	                                break;
	                            }

	                            throw new Error("Don't know what key level to get");

	                        case 4:
	                            if (globalStorage[memberId]) {
	                                _context2.next = 6;
	                                break;
	                            }

	                            throw new Error("member " + memberId + " not found");

	                        case 6:
	                            if (globalStorage[memberId][level]) {
	                                _context2.next = 8;
	                                break;
	                            }

	                            throw new Error("No key with level " + level + " found");

	                        case 8:
	                            if (!(globalStorage[memberId][level].expiresAtMs < Date.now())) {
	                                _context2.next = 10;
	                                break;
	                            }

	                            throw new Error("Key with level " + level + " has expired");

	                        case 10:
	                            return _context2.abrupt("return", clone(globalStorage[memberId][level]));

	                        case 11:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Look up a key by memberId and keyId.
	         *
	         * @param {string} memberId - ID of member
	         * @param {string} keyId - key ID
	         * @return {Object} key pair
	         */

	    }, {
	        key: "getById",
	        value: function getById(memberId, keyId) {
	            var level;
	            return regeneratorRuntime.async(function getById$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            if (globalStorage[memberId]) {
	                                _context3.next = 2;
	                                break;
	                            }

	                            throw new Error("member " + memberId + " not found");

	                        case 2:
	                            if (keyId) {
	                                _context3.next = 4;
	                                break;
	                            }

	                            throw new Error("Don't know id of key to get");

	                        case 4:
	                            _context3.t0 = regeneratorRuntime.keys(globalStorage[memberId]);

	                        case 5:
	                            if ((_context3.t1 = _context3.t0()).done) {
	                                _context3.next = 14;
	                                break;
	                            }

	                            level = _context3.t1.value;

	                            if (!Object.prototype.hasOwnProperty.call(globalStorage[memberId], level)) {
	                                _context3.next = 12;
	                                break;
	                            }

	                            if (!(globalStorage[memberId][level].id === keyId)) {
	                                _context3.next = 12;
	                                break;
	                            }

	                            if (!(globalStorage[memberId][level].expiresAtMs < Date.now())) {
	                                _context3.next = 11;
	                                break;
	                            }

	                            throw new Error("Key with id " + globalStorage[memberId][level].id + " has expired");

	                        case 11:
	                            return _context3.abrupt("return", clone(globalStorage[memberId][level]));

	                        case 12:
	                            _context3.next = 5;
	                            break;

	                        case 14:
	                            throw new Error("No key with id " + keyId + " found");

	                        case 15:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Return list of member's keys.
	         *
	         * @param {string} memberId - ID of member
	         * @return {Object} list of keys
	         */

	    }, {
	        key: "listKeys",
	        value: function listKeys(memberId) {
	            return regeneratorRuntime.async(function listKeys$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            if (globalStorage[memberId]) {
	                                _context4.next = 2;
	                                break;
	                            }

	                            throw new Error("member " + memberId + " not found");

	                        case 2:
	                            return _context4.abrupt("return", Object.keys(globalStorage[memberId]).map(function (level) {
	                                return clone(globalStorage[memberId][level]);
	                            }).filter(function (keyPair) {
	                                return !(keyPair.expiresAtMs < Date.now());
	                            }));

	                        case 3:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Keep track of the ID of the most recently active member.
	         *
	         * @param {string} memberId - ID of member
	         */

	    }], [{
	        key: "setActiveMemberId",
	        value: function setActiveMemberId(memberId) {
	            globalStorage.ACTIVE = memberId;
	        }

	        /**
	         * Get the ID of the most recently active member.
	         *
	         * @return {string} ID of member
	         */

	    }, {
	        key: "getActiveMemberId",
	        value: function getActiveMemberId() {
	            var memberId = globalStorage.ACTIVE;
	            if (!memberId) {
	                throw new Error('No active memberId');
	            }
	            return memberId;
	        }
	    }]);

	    return MemoryKeyStore;
	}();

	/**
	 * Return a (shallow) copy of an object.
	 *
	 * If the "user" of a key pair object edits it (e.g., deleting privateKey),
	 * that shouldn't affect the "stored" key pair. Thus, we can't pass around
	 * references to stored objects. Instead, we do some object-copying.
	 *
	 * @param {Object} obj - object to copy
	 * @return {Object} copy of obj
	 */


	function clone(obj) {
	    return Object.assign({}, obj);
	}

	exports.default = MemoryKeyStore;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _MemoryKeyStore = __webpack_require__(33);

	var _MemoryKeyStore2 = _interopRequireDefault(_MemoryKeyStore);

	var _KeyStoreCryptoEngine2 = __webpack_require__(30);

	var _KeyStoreCryptoEngine3 = _interopRequireDefault(_KeyStoreCryptoEngine2);

	var _Crypto = __webpack_require__(5);

	var _Crypto2 = _interopRequireDefault(_Crypto);

	var _base64url = __webpack_require__(25);

	var _base64url2 = _interopRequireDefault(_base64url);

	var _fastSha = __webpack_require__(22);

	var _fastSha2 = _interopRequireDefault(_fastSha);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var keys = [];
	var globalKeyStore = new _MemoryKeyStore2.default();

	/**
	 * Crypto engine that handles hardcoded keys
	 */

	var ManualCryptoEngine = function (_KeyStoreCryptoEngine) {
	    _inherits(ManualCryptoEngine, _KeyStoreCryptoEngine);

	    _createClass(ManualCryptoEngine, null, [{
	        key: "setKeys",

	        /**
	         * Set the hardcoded keys used by ManualCryptoEngine
	         *
	         * @param {Array} memberKeys - keys to set
	         *
	         * Must be an array with objects of the format:
	         * {
	         *     publicKey: "123456",
	         *     privateKey: "123456",
	         *     level: "LOW" || "STANDARD" || "PRIVILEGED",
	         * }
	         */
	        value: function setKeys(memberKeys) {
	            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, keyPair;

	            return regeneratorRuntime.async(function setKeys$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            if (!(!memberKeys || !Array.isArray(memberKeys) || memberKeys.length < 1)) {
	                                _context.next = 2;
	                                break;
	                            }

	                            throw new Error('invalid keys format');

	                        case 2:
	                            keys = memberKeys;
	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context.prev = 6;
	                            _iterator = keys[Symbol.iterator]();

	                        case 8:
	                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	                                _context.next = 19;
	                                break;
	                            }

	                            keyPair = _step.value;

	                            if (!(!keyPair.publicKey || !keyPair.privateKey || !keyPair.level)) {
	                                _context.next = 12;
	                                break;
	                            }

	                            throw new Error("Invalid keyPair format");

	                        case 12:
	                            if (typeof keyPair.publicKey === 'string') {
	                                keyPair.publicKey = _Crypto2.default.bufferKey(keyPair.publicKey);
	                            }
	                            if (typeof keyPair.privateKey === 'string') {
	                                keyPair.privateKey = _Crypto2.default.bufferKey(keyPair.privateKey);
	                            }
	                            if (!keyPair.id) {
	                                keyPair.id = (0, _base64url2.default)((0, _fastSha2.default)(keyPair.publicKey)).substring(0, 16);
	                            }
	                            keyPair.algorithm = 'ED25519';

	                        case 16:
	                            _iteratorNormalCompletion = true;
	                            _context.next = 8;
	                            break;

	                        case 19:
	                            _context.next = 25;
	                            break;

	                        case 21:
	                            _context.prev = 21;
	                            _context.t0 = _context["catch"](6);
	                            _didIteratorError = true;
	                            _iteratorError = _context.t0;

	                        case 25:
	                            _context.prev = 25;
	                            _context.prev = 26;

	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }

	                        case 28:
	                            _context.prev = 28;

	                            if (!_didIteratorError) {
	                                _context.next = 31;
	                                break;
	                            }

	                            throw _iteratorError;

	                        case 31:
	                            return _context.finish(28);

	                        case 32:
	                            return _context.finish(25);

	                        case 33:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, null, this, [[6, 21, 25, 33], [26,, 28, 32]]);
	        }
	    }]);

	    function ManualCryptoEngine(memberId) {
	        _classCallCheck(this, ManualCryptoEngine);

	        if (keys.length < 1) {
	            throw new Error('Keys must be set before constructing.');
	        }
	        return _possibleConstructorReturn(this, (ManualCryptoEngine.__proto__ || Object.getPrototypeOf(ManualCryptoEngine)).call(this, memberId, globalKeyStore));
	    }

	    /**
	     * Generate a keyPair and store it.
	     *
	     * @param {string} level - privilege level "LOW", "STANDARD", "PRIVILEGED"
	     * @return {Object} key
	     */


	    _createClass(ManualCryptoEngine, [{
	        key: "generateKey",
	        value: function generateKey(level) {
	            var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, keyPair, cloned;

	            return regeneratorRuntime.async(function generateKey$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            _iteratorNormalCompletion2 = true;
	                            _didIteratorError2 = false;
	                            _iteratorError2 = undefined;
	                            _context2.prev = 3;
	                            _iterator2 = keys[Symbol.iterator]();

	                        case 5:
	                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	                                _context2.next = 14;
	                                break;
	                            }

	                            keyPair = _step2.value;

	                            if (!(keyPair.level === level)) {
	                                _context2.next = 11;
	                                break;
	                            }

	                            cloned = clone(keyPair);

	                            if (cloned.privateKey) {
	                                delete cloned.privateKey;
	                            }
	                            return _context2.abrupt("return", cloned);

	                        case 11:
	                            _iteratorNormalCompletion2 = true;
	                            _context2.next = 5;
	                            break;

	                        case 14:
	                            _context2.next = 20;
	                            break;

	                        case 16:
	                            _context2.prev = 16;
	                            _context2.t0 = _context2["catch"](3);
	                            _didIteratorError2 = true;
	                            _iteratorError2 = _context2.t0;

	                        case 20:
	                            _context2.prev = 20;
	                            _context2.prev = 21;

	                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                _iterator2.return();
	                            }

	                        case 23:
	                            _context2.prev = 23;

	                            if (!_didIteratorError2) {
	                                _context2.next = 26;
	                                break;
	                            }

	                            throw _iteratorError2;

	                        case 26:
	                            return _context2.finish(23);

	                        case 27:
	                            return _context2.finish(20);

	                        case 28:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, null, this, [[3, 16, 20, 28], [21,, 23, 27]]);
	        }

	        /**
	         * Create a signer. Assumes we previously generated the relevant key.
	         *
	         * @param {string} level - privilege level "LOW", "STANDARD", "PRIVILEGED"
	         * @return {Object} signer - object that implements sign, signJson
	         */

	    }, {
	        key: "createSigner",
	        value: function createSigner(level) {
	            var keyPairs;
	            return regeneratorRuntime.async(function createSigner$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            keyPairs = keys.filter(function (k) {
	                                return k.level === level;
	                            });

	                            if (!(!keyPairs || !keyPairs.length)) {
	                                _context3.next = 3;
	                                break;
	                            }

	                            throw new Error("No key with level " + level + " found");

	                        case 3:
	                            return _context3.abrupt("return", _Crypto2.default.createSignerFromKeypair(clone(keyPairs[0])));

	                        case 4:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Create a verifier. Assumes we have the key with the passed ID.
	         *
	         * @param {string} keyId - ID of key to use
	         * @return {Object} signer - object that implements verify, verifyJson
	         */

	    }, {
	        key: "createVerifier",
	        value: function createVerifier(keyId) {
	            var keyPairs;
	            return regeneratorRuntime.async(function createVerifier$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            keyPairs = keys.filter(function (k) {
	                                return k.id === keyId;
	                            });

	                            if (!(!keyPairs || !keyPairs.length)) {
	                                _context4.next = 3;
	                                break;
	                            }

	                            throw new Error("No key with id " + keyId + " found");

	                        case 3:
	                            return _context4.abrupt("return", _Crypto2.default.createVerifierFromKeypair(clone(keyPairs[0])));

	                        case 4:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return ManualCryptoEngine;
	}(_KeyStoreCryptoEngine3.default);

	/**
	 * Return a (shallow) copy of an object.
	 *
	 * If the "user" of a key pair object edits it (e.g., deleting privateKey),
	 * that shouldn't affect the "stored" key pair. Thus, we can't pass around
	 * references to stored objects. Instead, we do some object-copying.
	 *
	 * @param {Object} obj - object to copy
	 * @return {Object} copy of obj
	 */


	function clone(obj) {
	    return Object.assign({}, obj);
	}

	exports.default = ManualCryptoEngine;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _KeyStoreCryptoEngine2 = __webpack_require__(30);

	var _KeyStoreCryptoEngine3 = _interopRequireDefault(_KeyStoreCryptoEngine2);

	var _UnsecuredFileKeyStore = __webpack_require__(36);

	var _UnsecuredFileKeyStore2 = _interopRequireDefault(_UnsecuredFileKeyStore);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * UnsecuredFileCryptoEngine: Implements the CryptoEngine interface.
	 *
	 * Crypto engine to handle signatures, verifications, and key storage, in a file. Uses the following
	 * schema
	 *
	 * filename: memberId
	 *
	 * file contents: {
	 *    "keys":[{
	 *        "id":"HxxJ-LKfhYVSDMgC", // key ID
	 *        "level":"LOW",
	 *        "algorithm":"ED25519",
	 *        "publicKey":"wHhFB13fbFVwXGkHPToWASQCQ3hJegQQ", // Crypto.strKey( public key )
	 *        "privateKey":"YgnDobEA0HoZvM7YXvJBR1Sd006apRbeEl6BBA" // Crypto.strKey( secret key )
	 *    }],
	 * }
	 */
	var globalKeyStore = new _UnsecuredFileKeyStore2.default();

	var dirRootSet = null;

	var UnsecuredFileCryptoEngine = function (_KeyStoreCryptoEngine) {
	    _inherits(UnsecuredFileCryptoEngine, _KeyStoreCryptoEngine);

	    _createClass(UnsecuredFileCryptoEngine, null, [{
	        key: 'setDirRoot',

	        /**
	         * Set the dir in which we'll store key-files.
	         * When an sdk user calls Token = new TokenLib('sandbox', './keys'),
	         * that calls UnsecuredFileCryptoEngine.setDirRoot('./keys')
	         *
	         * @param {string} dirRoot - path
	         */
	        value: function setDirRoot(dirRoot) {
	            _UnsecuredFileKeyStore2.default.setDirRoot(dirRoot);
	            dirRootSet = dirRoot;
	        }

	        /**
	         * Constructs the engine
	         *
	         * @param {string} memberId - memberId of the member we want to create the engine for
	         */

	    }]);

	    function UnsecuredFileCryptoEngine(memberId) {
	        _classCallCheck(this, UnsecuredFileCryptoEngine);

	        if (true) {
	            throw new Error("Not available on browser");
	        }
	        if (!memberId) {
	            throw new Error("Invalid memberId");
	        }
	        if (!dirRootSet) {
	            throw new Error("No valid directory set");
	        }

	        return _possibleConstructorReturn(this, (UnsecuredFileCryptoEngine.__proto__ || Object.getPrototypeOf(UnsecuredFileCryptoEngine)).call(this, memberId, globalKeyStore));
	    }

	    /**
	     * Get ID of "active" member. (This would make more sense in browser,
	     * where we'd use it to keep track of browser-linked member.)
	     *
	     * @return {string} member ID of active member (or throw if none such);
	     */


	    _createClass(UnsecuredFileCryptoEngine, null, [{
	        key: 'getActiveMemberId',
	        value: function getActiveMemberId() {
	            var memberId = _UnsecuredFileKeyStore2.default.getActiveMemberId();
	            if (!memberId) {
	                throw new Error('No active memberId on this browser');
	            }
	            return memberId;
	        }
	    }]);

	    return UnsecuredFileCryptoEngine;
	}(_KeyStoreCryptoEngine3.default);

	exports.default = UnsecuredFileCryptoEngine;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Crypto = __webpack_require__(5);

	var _Crypto2 = _interopRequireDefault(_Crypto);

	var _PromiseFileSystem = __webpack_require__(37);

	var _PromiseFileSystem2 = _interopRequireDefault(_PromiseFileSystem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var globals = {
	    activeMemberId: ''
	};

	var UnsecuredFileKeyStore = function () {
	    function UnsecuredFileKeyStore() {
	        _classCallCheck(this, UnsecuredFileKeyStore);
	    }

	    _createClass(UnsecuredFileKeyStore, [{
	        key: 'put',


	        /**
	         * Store a key pair.
	         *
	         * @param {string} memberId - ID of member
	         * @param {Object} keyPair - key pair
	         * @return {Object} stored key pair
	         */
	        value: function put(memberId, keyPair) {
	            var member;
	            return regeneratorRuntime.async(function put$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            if (memberId) {
	                                _context.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (keyPair) {
	                                _context.next = 4;
	                                break;
	                            }

	                            throw new Error("Don't know what key to put");

	                        case 4:
	                            if (keyPair.level) {
	                                _context.next = 6;
	                                break;
	                            }

	                            throw new Error("Don't know what level to put key");

	                        case 6:
	                            if (!(keyPair.expiresAtMs < Date.now())) {
	                                _context.next = 8;
	                                break;
	                            }

	                            throw new Error('Key ' + keyPair.id + ' has expired');

	                        case 8:
	                            if (false) {
	                                _context.next = 10;
	                                break;
	                            }

	                            throw new Error("Not available on browser");

	                        case 10:
	                            _context.next = 12;
	                            return regeneratorRuntime.awrap(this._loadMember(memberId));

	                        case 12:
	                            _context.t0 = _context.sent;

	                            if (_context.t0) {
	                                _context.next = 15;
	                                break;
	                            }

	                            _context.t0 = {};

	                        case 15:
	                            member = _context.t0;

	                            member[keyPair.level] = keyPair;
	                            _context.next = 19;
	                            return regeneratorRuntime.awrap(this._saveMember(memberId, member));

	                        case 19:
	                            UnsecuredFileKeyStore.setActiveMemberId(memberId);
	                            return _context.abrupt('return', keyPair);

	                        case 21:
	                        case 'end':
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Look up a key by memberId and level.
	         *
	         * @param {string} memberId - ID of member
	         * @param {string} level - "LOW", "STANDARD", or "PRIVILEGED"
	         * @return {Object} key pair
	         */

	    }, {
	        key: 'getByLevel',
	        value: function getByLevel(memberId, level) {
	            var member;
	            return regeneratorRuntime.async(function getByLevel$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            if (memberId) {
	                                _context2.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (level) {
	                                _context2.next = 4;
	                                break;
	                            }

	                            throw new Error("Don't know what key level to get");

	                        case 4:
	                            if (false) {
	                                _context2.next = 6;
	                                break;
	                            }

	                            throw new Error("Not available on browser");

	                        case 6:
	                            _context2.next = 8;
	                            return regeneratorRuntime.awrap(this._loadMember(memberId));

	                        case 8:
	                            member = _context2.sent;

	                            if (member) {
	                                _context2.next = 11;
	                                break;
	                            }

	                            throw new Error('Member with id ' + memberId + ' not found');

	                        case 11:
	                            if (member[level]) {
	                                _context2.next = 13;
	                                break;
	                            }

	                            throw new Error('No key with level ' + level + ' found');

	                        case 13:
	                            if (!(member[level].expiresAtMs < Date.now())) {
	                                _context2.next = 15;
	                                break;
	                            }

	                            throw new Error('Key with level ' + level + ' has expired');

	                        case 15:
	                            UnsecuredFileKeyStore.setActiveMemberId(memberId);
	                            return _context2.abrupt('return', member[level]);

	                        case 17:
	                        case 'end':
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Look up a key by memberId and keyId.
	         *
	         * @param {string} memberId - ID of member
	         * @param {string} keyId - key ID
	         * @return {Object} key pair
	         */

	    }, {
	        key: 'getById',
	        value: function getById(memberId, keyId) {
	            var member, level;
	            return regeneratorRuntime.async(function getById$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            if (memberId) {
	                                _context3.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (keyId) {
	                                _context3.next = 4;
	                                break;
	                            }

	                            throw new Error('Don\'t know id of key to get');

	                        case 4:
	                            if (false) {
	                                _context3.next = 6;
	                                break;
	                            }

	                            throw new Error("Not available on browser");

	                        case 6:
	                            _context3.next = 8;
	                            return regeneratorRuntime.awrap(this._loadMember(memberId));

	                        case 8:
	                            member = _context3.sent;

	                            if (member) {
	                                _context3.next = 11;
	                                break;
	                            }

	                            throw new Error('member ' + memberId + ' not found');

	                        case 11:
	                            _context3.t0 = regeneratorRuntime.keys(member);

	                        case 12:
	                            if ((_context3.t1 = _context3.t0()).done) {
	                                _context3.next = 22;
	                                break;
	                            }

	                            level = _context3.t1.value;

	                            if (!Object.prototype.hasOwnProperty.call(member, level)) {
	                                _context3.next = 20;
	                                break;
	                            }

	                            if (!(member[level].id === keyId)) {
	                                _context3.next = 20;
	                                break;
	                            }

	                            if (!(member[level].expiresAtMs < Date.now())) {
	                                _context3.next = 18;
	                                break;
	                            }

	                            throw new Error('Key with id ' + member[level].id + ' has expired');

	                        case 18:
	                            UnsecuredFileKeyStore.setActiveMemberId(memberId);
	                            return _context3.abrupt('return', member[level]);

	                        case 20:
	                            _context3.next = 12;
	                            break;

	                        case 22:
	                            throw new Error('No key with id ' + keyId + ' found');

	                        case 23:
	                        case 'end':
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Return list of member's keys.
	         *
	         * @param {string} memberId - ID of member
	         * @return {Object} list of keys
	         */

	    }, {
	        key: 'listKeys',
	        value: function listKeys(memberId) {
	            var member, list, level;
	            return regeneratorRuntime.async(function listKeys$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            if (memberId) {
	                                _context4.next = 2;
	                                break;
	                            }

	                            throw new Error("Invalid memberId");

	                        case 2:
	                            if (false) {
	                                _context4.next = 4;
	                                break;
	                            }

	                            throw new Error("Not available on browser");

	                        case 4:
	                            _context4.next = 6;
	                            return regeneratorRuntime.awrap(this._loadMember(memberId));

	                        case 6:
	                            member = _context4.sent;

	                            if (member) {
	                                _context4.next = 10;
	                                break;
	                            }

	                            if (member) {
	                                _context4.next = 10;
	                                break;
	                            }

	                            throw new Error('member ' + memberId + ' not found');

	                        case 10:
	                            UnsecuredFileKeyStore.setActiveMemberId(memberId);
	                            list = [];

	                            for (level in member) {
	                                if (member.hasOwnProperty(level) && !(member[level].expiresAtMs < Date.now())) {
	                                    list.push(member[level]);
	                                }
	                            }
	                            return _context4.abrupt('return', list);

	                        case 14:
	                        case 'end':
	                            return _context4.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Keep track of the ID of the most recently active member.
	         *
	         * @param {string} memberId - ID of member
	         */

	    }, {
	        key: '_saveMember',


	        /**
	         * Save a member's keys.
	         *
	         * @param {string} memberId - member Id
	         * @param {Object} member - obj dict of keys { "LOW": {...}, "STANDARD": {...}, ... }
	         */
	        value: function _saveMember(memberId, member) {
	            var strKeys, level, keyCopy;
	            return regeneratorRuntime.async(function _saveMember$(_context5) {
	                while (1) {
	                    switch (_context5.prev = _context5.next) {
	                        case 0:
	                            // instead of { LOW: {...}, ... } we want [ {...}, ... ]
	                            // convert keys from buffer -> string
	                            strKeys = [];

	                            for (level in member) {
	                                if (member.hasOwnProperty(level)) {
	                                    keyCopy = Object.assign({}, member[level]);

	                                    if (keyCopy.publicKey) {
	                                        keyCopy.publicKey = _Crypto2.default.strKey(keyCopy.publicKey);
	                                    }
	                                    if (keyCopy.privateKey) {
	                                        keyCopy.privateKey = _Crypto2.default.strKey(keyCopy.privateKey);
	                                    }
	                                    strKeys.push(keyCopy);
	                                }
	                            }
	                            _context5.next = 4;
	                            return regeneratorRuntime.awrap(_PromiseFileSystem2.default.writeFile(memberId.split(':').join('_'), JSON.stringify({ keys: strKeys })));

	                        case 4:
	                        case 'end':
	                            return _context5.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Load a member's keys.
	         *
	         * @param {string} memberId - ID of member
	         * @return {Object} object dict level : key {"LOW": {...}, "STANDARD": {...}, ...}
	         */

	    }, {
	        key: '_loadMember',
	        value: function _loadMember(memberId) {
	            var data, keyList, member, i, key;
	            return regeneratorRuntime.async(function _loadMember$(_context6) {
	                while (1) {
	                    switch (_context6.prev = _context6.next) {
	                        case 0:
	                            data = void 0;
	                            _context6.prev = 1;
	                            _context6.next = 4;
	                            return regeneratorRuntime.awrap(_PromiseFileSystem2.default.readFile(memberId.split(':').join('_')));

	                        case 4:
	                            data = _context6.sent;
	                            _context6.next = 10;
	                            break;

	                        case 7:
	                            _context6.prev = 7;
	                            _context6.t0 = _context6['catch'](1);

	                            data = '{"keys":[]}';

	                        case 10:
	                            keyList = JSON.parse(data).keys || [];
	                            member = {};

	                            for (i = 0; i < keyList.length; i++) {
	                                key = keyList[i];

	                                if (key.publicKey) {
	                                    key.publicKey = _Crypto2.default.bufferKey(key.publicKey);
	                                }
	                                if (key.privateKey) {
	                                    key.privateKey = _Crypto2.default.bufferKey(key.privateKey);
	                                }
	                                member[key.level] = key;
	                            }
	                            return _context6.abrupt('return', member);

	                        case 14:
	                        case 'end':
	                            return _context6.stop();
	                    }
	                }
	            }, null, this, [[1, 7]]);
	        }
	    }], [{
	        key: 'setDirRoot',
	        value: function setDirRoot(dirRoot) {
	            _PromiseFileSystem2.default.dirRoot = dirRoot;
	        }
	    }, {
	        key: 'setActiveMemberId',
	        value: function setActiveMemberId(memberId) {
	            globals.activeMemberId = memberId;
	        }

	        /**
	         * Get the ID of the most recently active member.
	         *
	         * @return {string} ID of member
	         */

	    }, {
	        key: 'getActiveMemberId',
	        value: function getActiveMemberId() {
	            var memberId = globals.activeMemberId;
	            if (!memberId) {
	                throw new Error('No active memberId on this browser');
	            }
	            return memberId;
	        }
	    }]);

	    return UnsecuredFileKeyStore;
	}();

	exports.default = UnsecuredFileKeyStore;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var fs = void 0;
	var path = void 0;

	if (false) {
	    fs = require('fs');
	    path = require('path');
	}

	var PromiseFileSystem = function () {
	    function PromiseFileSystem() {
	        _classCallCheck(this, PromiseFileSystem);
	    }

	    _createClass(PromiseFileSystem, null, [{
	        key: 'readFile',


	        /**
	         * Reads a file from the filesystem (from the given directory)
	         *
	         * @param {string} filename - file to read
	         * @return {Promise} promise - with data
	         */
	        value: function readFile(filename) {
	            if (true) return Promise.reject('Not available on browser');

	            return new Promise(function (resolve, reject) {
	                fs.readFile(PromiseFileSystem._getFullFilename(filename), PromiseFileSystem._options, function (err, buffer) {
	                    if (err) {
	                        reject(err);
	                    } else {
	                        resolve(buffer);
	                    }
	                });
	            });
	        }
	    }, {
	        key: 'writeFile',
	        value: function writeFile(filename, data) {
	            if (true) return Promise.reject('Not available on browser');

	            return new Promise(function (resolve, reject) {
	                PromiseFileSystem._ensureExists(PromiseFileSystem.dirRoot, function (err) {
	                    if (err) {
	                        reject(err);
	                    }
	                    fs.writeFile(PromiseFileSystem._getFullFilename(filename), data, PromiseFileSystem._options, function (err) {
	                        if (err) {
	                            reject(err);
	                        } else {
	                            resolve();
	                        }
	                    });
	                });
	            });
	        }
	    }, {
	        key: '_ensureExists',
	        value: function _ensureExists(path, cb) {
	            if (true) return Promise.reject('Not available on browser');

	            fs.mkdir(path, function (err) {
	                if (err) {
	                    if (err.code === 'EEXIST') cb(null); // ignore folder already exists
	                    else cb(err); // something else went wrong
	                } else cb(null); // successfully created folder
	            });
	        }
	    }, {
	        key: '_getFullFilename',
	        value: function _getFullFilename(filename) {
	            if (true) return Promise.reject('Not available on browser');

	            return path.join(PromiseFileSystem.dirRoot, filename);
	        }
	    }]);

	    return PromiseFileSystem;
	}();

	PromiseFileSystem._options = { encoding: 'utf-8', mode: 384 };
	PromiseFileSystem.dirRoot = null;

	exports.default = PromiseFileSystem;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _AuthHttpClient = __webpack_require__(39);

	var _AuthHttpClient2 = _interopRequireDefault(_AuthHttpClient);

	var _HttpClient = __webpack_require__(69);

	var _HttpClient2 = _interopRequireDefault(_HttpClient);

	var _TransferTokenBuilder = __webpack_require__(70);

	var _TransferTokenBuilder2 = _interopRequireDefault(_TransferTokenBuilder);

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	var _AccessTokenBuilder = __webpack_require__(71);

	var _AccessTokenBuilder2 = _interopRequireDefault(_AccessTokenBuilder);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Member object. Allows member-wide actions. Some calls return a promise, and some return
	 * objects
	 *
	 */
	var Member = function () {

	    /**
	     * Represents a Member
	     *
	     * @constructor
	     * @param {string} env - The environment to use for this member
	     * @param {string} memberId - The id of this memberId
	     * @param {Object} cryptoEngine - the cryptoEngine to use for signing and key storage
	     * @param {string} developerKey - the developer key
	     * @param {function} globalRpcErrorCallback - callback to invoke on any cross-cutting RPC
	     * @param {bool} loggingEnabled - enable HTTP error logging if true
	     * call error. For example: SDK version mismatch
	     * @param {string} customSdkUrl - set to override the default sdk url
	     */
	    function Member(env, memberId, cryptoEngine, developerKey, globalRpcErrorCallback, loggingEnabled, customSdkUrl) {
	        _classCallCheck(this, Member);

	        this._id = memberId;
	        this._client = new _AuthHttpClient2.default(env, memberId, cryptoEngine, developerKey, globalRpcErrorCallback, loggingEnabled, customSdkUrl);
	        this._unauthenticatedClient = new _HttpClient2.default(env, developerKey, globalRpcErrorCallback, loggingEnabled, customSdkUrl);
	    }

	    /**
	     * Gets the memberId
	     *
	     * @return {string} memberId
	     */


	    _createClass(Member, [{
	        key: "memberId",
	        value: function memberId() {
	            return this._id;
	        }

	        /**
	         * Gets all of the member's aliases
	         *
	         * @return {Promise} aliases - member's aliases
	         */

	    }, {
	        key: "aliases",
	        value: function aliases() {
	            var _this = this;

	            return _Util2.default.callAsync(this.aliases, function _callee() {
	                var res;
	                return regeneratorRuntime.async(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return regeneratorRuntime.awrap(_this._client.getAliases());

	                            case 2:
	                                res = _context.sent;
	                                return _context.abrupt("return", res.data.aliases);

	                            case 4:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, null, _this);
	            });
	        }

	        /**
	         * Gets the member's first alias
	         *
	         * @return {Promise} alias - member's alias
	         */

	    }, {
	        key: "firstAlias",
	        value: function firstAlias() {
	            var _this2 = this;

	            return _Util2.default.callAsync(this.firstAlias, function _callee2() {
	                var res;
	                return regeneratorRuntime.async(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return regeneratorRuntime.awrap(_this2._client.getAliases());

	                            case 2:
	                                res = _context2.sent;
	                                return _context2.abrupt("return", res.data.aliases[0]);

	                            case 4:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, null, _this2);
	            });
	        }

	        /**
	         * Gets the member's public keys
	         *
	         * @return {Promise} keys - keys objects
	         */

	    }, {
	        key: "keys",
	        value: function keys() {
	            var _this3 = this;

	            return _Util2.default.callAsync(this.keys, function _callee3() {
	                var member;
	                return regeneratorRuntime.async(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return regeneratorRuntime.awrap(_this3._getMember());

	                            case 2:
	                                member = _context3.sent;
	                                return _context3.abrupt("return", member.keys);

	                            case 4:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, null, _this3);
	            });
	        }

	        /**
	         * Sets the access token id to be used with this client.
	         *
	         * @param {string} accessTokenId - the access token id
	         */

	    }, {
	        key: "useAccessToken",
	        value: function useAccessToken(accessTokenId) {
	            this._client.useAccessToken(accessTokenId);
	        }

	        /**
	         * Clears the access token id used with this client.
	         */

	    }, {
	        key: "clearAccessToken",
	        value: function clearAccessToken() {
	            this._client.clearAccessToken();
	        }

	        /**
	         * Sets the customer initiated request flag to true.
	         */

	    }, {
	        key: "setCustomerInitiated",
	        value: function setCustomerInitiated() {
	            this._client.setCustomerInitiated();
	        }

	        /**
	         * Approves a new key for this member
	         *
	         * @param {Object} key - key to add
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "approveKey",
	        value: function approveKey(key) {
	            var _this4 = this;

	            return _Util2.default.callAsync(this.approveKey, function _callee4() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee4$(_context4) {
	                    while (1) {
	                        switch (_context4.prev = _context4.next) {
	                            case 0:
	                                _context4.next = 2;
	                                return regeneratorRuntime.awrap(_this4._getPreviousHash());

	                            case 2:
	                                prevHash = _context4.sent;
	                                _context4.next = 5;
	                                return regeneratorRuntime.awrap(_this4._client.approveKey(prevHash, key));

	                            case 5:
	                            case "end":
	                                return _context4.stop();
	                        }
	                    }
	                }, null, _this4);
	            });
	        }

	        /**
	         * Approves new keys for this member
	         *
	         * @param {Array} keys - keys to add
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "approveKeys",
	        value: function approveKeys(keys) {
	            var _this5 = this;

	            return _Util2.default.callAsync(this.approveKeys, function _callee5() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee5$(_context5) {
	                    while (1) {
	                        switch (_context5.prev = _context5.next) {
	                            case 0:
	                                _context5.next = 2;
	                                return regeneratorRuntime.awrap(_this5._getPreviousHash());

	                            case 2:
	                                prevHash = _context5.sent;
	                                _context5.next = 5;
	                                return regeneratorRuntime.awrap(_this5._client.approveKeys(prevHash, keys));

	                            case 5:
	                            case "end":
	                                return _context5.stop();
	                        }
	                    }
	                }, null, _this5);
	            });
	        }

	        /**
	         * Removes a key from this member
	         *
	         * @param {string} keyId - keyId to remove. Note, keyId is the hash of the pk
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "removeKey",
	        value: function removeKey(keyId) {
	            var _this6 = this;

	            return _Util2.default.callAsync(this.removeKey, function _callee6() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee6$(_context6) {
	                    while (1) {
	                        switch (_context6.prev = _context6.next) {
	                            case 0:
	                                _context6.next = 2;
	                                return regeneratorRuntime.awrap(_this6._getPreviousHash());

	                            case 2:
	                                prevHash = _context6.sent;
	                                _context6.next = 5;
	                                return regeneratorRuntime.awrap(_this6._client.removeKey(prevHash, keyId));

	                            case 5:
	                            case "end":
	                                return _context6.stop();
	                        }
	                    }
	                }, null, _this6);
	            });
	        }

	        /**
	         * Removes keys from this member
	         *
	         * @param {Array} keyIds - keyIds to remove. Note, keyId is the hash of the pk
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "removeKeys",
	        value: function removeKeys(keyIds) {
	            var _this7 = this;

	            return _Util2.default.callAsync(this.removeKeys, function _callee7() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee7$(_context7) {
	                    while (1) {
	                        switch (_context7.prev = _context7.next) {
	                            case 0:
	                                _context7.next = 2;
	                                return regeneratorRuntime.awrap(_this7._getPreviousHash());

	                            case 2:
	                                prevHash = _context7.sent;
	                                _context7.next = 5;
	                                return regeneratorRuntime.awrap(_this7._client.removeKeys(prevHash, keyIds));

	                            case 5:
	                            case "end":
	                                return _context7.stop();
	                        }
	                    }
	                }, null, _this7);
	            });
	        }

	        /**
	         * Adds an alias to this member
	         *
	         * @param {Object} alias - alias to add
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "addAlias",
	        value: function addAlias(alias, realm) {
	            var _this8 = this;

	            return _Util2.default.callAsync(this.addAlias, function _callee8() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee8$(_context8) {
	                    while (1) {
	                        switch (_context8.prev = _context8.next) {
	                            case 0:
	                                _context8.next = 2;
	                                return regeneratorRuntime.awrap(_this8._getPreviousHash());

	                            case 2:
	                                prevHash = _context8.sent;
	                                _context8.next = 5;
	                                return regeneratorRuntime.awrap(_this8._client.addAlias(prevHash, alias, realm));

	                            case 5:
	                            case "end":
	                                return _context8.stop();
	                        }
	                    }
	                }, null, _this8);
	            });
	        }

	        /**
	         * Adds aliases to this member
	         *
	         * @param {Array} aliases - aliases to add
	         * @param {string} realm - (optional) realm of the aliases
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "addAliases",
	        value: function addAliases(aliases, realm) {
	            var _this9 = this;

	            return _Util2.default.callAsync(this.addAliases, function _callee9() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee9$(_context9) {
	                    while (1) {
	                        switch (_context9.prev = _context9.next) {
	                            case 0:
	                                _context9.next = 2;
	                                return regeneratorRuntime.awrap(_this9._getPreviousHash());

	                            case 2:
	                                prevHash = _context9.sent;
	                                _context9.next = 5;
	                                return regeneratorRuntime.awrap(_this9._client.addAliases(prevHash, aliases, realm));

	                            case 5:
	                            case "end":
	                                return _context9.stop();
	                        }
	                    }
	                }, null, _this9);
	            });
	        }

	        /**
	         * Removes an alias from the memberId
	         *
	         * @param {Object} alias - alias to remove
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "removeAlias",
	        value: function removeAlias(alias) {
	            var _this10 = this;

	            return _Util2.default.callAsync(this.removeAlias, function _callee10() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee10$(_context10) {
	                    while (1) {
	                        switch (_context10.prev = _context10.next) {
	                            case 0:
	                                _context10.next = 2;
	                                return regeneratorRuntime.awrap(_this10._getPreviousHash());

	                            case 2:
	                                prevHash = _context10.sent;
	                                _context10.next = 5;
	                                return regeneratorRuntime.awrap(_this10._client.removeAlias(prevHash, alias));

	                            case 5:
	                            case "end":
	                                return _context10.stop();
	                        }
	                    }
	                }, null, _this10);
	            });
	        }

	        /**
	         * Removes aliases from the memberId
	         *
	         * @param {Array} aliases - aliases to remove
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "removeAliases",
	        value: function removeAliases(aliases) {
	            var _this11 = this;

	            return _Util2.default.callAsync(this.removeAliases, function _callee11() {
	                var prevHash;
	                return regeneratorRuntime.async(function _callee11$(_context11) {
	                    while (1) {
	                        switch (_context11.prev = _context11.next) {
	                            case 0:
	                                _context11.next = 2;
	                                return regeneratorRuntime.awrap(_this11._getPreviousHash());

	                            case 2:
	                                prevHash = _context11.sent;
	                                _context11.next = 5;
	                                return regeneratorRuntime.awrap(_this11._client.removeAliases(prevHash, aliases));

	                            case 5:
	                            case "end":
	                                return _context11.stop();
	                        }
	                    }
	                }, null, _this11);
	            });
	        }

	        /**
	         * Set the "normal consumer" rule as member's recovery rule.
	         * (As of Nov 2017, this rule was: To recover, verify an alias.)
	         * @return {Promise} promise containing RecoveryRule proto buffer.
	         */

	    }, {
	        key: "useDefaultRecoveryRule",
	        value: function useDefaultRecoveryRule() {
	            var _this12 = this;

	            return _Util2.default.callAsync(this.useDefaultRecoveryRule, function _callee12() {
	                var agentResponse, prevHash, rule, res;
	                return regeneratorRuntime.async(function _callee12$(_context12) {
	                    while (1) {
	                        switch (_context12.prev = _context12.next) {
	                            case 0:
	                                _context12.next = 2;
	                                return regeneratorRuntime.awrap(_this12._client.getDefaultRecoveryAgent());

	                            case 2:
	                                agentResponse = _context12.sent;
	                                _context12.next = 5;
	                                return regeneratorRuntime.awrap(_this12._getPreviousHash());

	                            case 5:
	                                prevHash = _context12.sent;
	                                rule = {
	                                    recoveryRule: {
	                                        primaryAgent: agentResponse.data.memberId
	                                    }
	                                };
	                                _context12.next = 9;
	                                return regeneratorRuntime.awrap(_this12._client.addRecoveryRule(prevHash, rule));

	                            case 9:
	                                res = _context12.sent;
	                                return _context12.abrupt("return", res.data.member.recoveryRule);

	                            case 11:
	                            case "end":
	                                return _context12.stop();
	                        }
	                    }
	                }, null, _this12);
	            });
	        }

	        /**
	         * Links bank accounts to the member
	         *
	         * @param {string} authorization - bankAuthorization obtained from bank, or
	         * oauthBankAuthorization
	         * @return {Promise} accounts - Promise resolving the the Accounts linked
	         */

	    }, {
	        key: "linkAccounts",
	        value: function linkAccounts(authorization) {
	            var _this13 = this;

	            return _Util2.default.callAsync(this.linkAccounts, function _callee13() {
	                var _res, res;

	                return regeneratorRuntime.async(function _callee13$(_context13) {
	                    while (1) {
	                        switch (_context13.prev = _context13.next) {
	                            case 0:
	                                if (!authorization.accessToken) {
	                                    _context13.next = 7;
	                                    break;
	                                }

	                                _context13.next = 3;
	                                return regeneratorRuntime.awrap(_this13._client.linkAccountsOauth(authorization));

	                            case 3:
	                                _res = _context13.sent;

	                                if (!(_res.data.status === 'FAILURE_BANK_AUTHORIZATION_REQUIRED')) {
	                                    _context13.next = 6;
	                                    break;
	                                }

	                                throw new Error('Cannot link accounts. Must send bankAuthorization retrieved' + ' through push notification');

	                            case 6:
	                                return _context13.abrupt("return", _res.data.accounts);

	                            case 7:
	                                _context13.next = 9;
	                                return regeneratorRuntime.awrap(_this13._client.linkAccounts(authorization));

	                            case 9:
	                                res = _context13.sent;
	                                return _context13.abrupt("return", res.data.accounts);

	                            case 11:
	                            case "end":
	                                return _context13.stop();
	                        }
	                    }
	                }, null, _this13);
	            });
	        }

	        /**
	         * Unlinks bank accounts previously linked by the linkAccounts call.
	         *
	         * @param {Array} accountIds - account ids to unlink
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "unlinkAccounts",
	        value: function unlinkAccounts(accountIds) {
	            var _this14 = this;

	            return _Util2.default.callAsync(this.unlinkAccounts, function _callee14() {
	                return regeneratorRuntime.async(function _callee14$(_context14) {
	                    while (1) {
	                        switch (_context14.prev = _context14.next) {
	                            case 0:
	                                _context14.next = 2;
	                                return regeneratorRuntime.awrap(_this14._client.unlinkAccounts(accountIds));

	                            case 2:
	                            case "end":
	                                return _context14.stop();
	                        }
	                    }
	                }, null, _this14);
	            });
	        }

	        /**
	         * Looks up the member's accounts
	         *
	         * @return {Promise} accounts - Promise resolving to the accounts
	         */

	    }, {
	        key: "getAccounts",
	        value: function getAccounts() {
	            var _this15 = this;

	            return _Util2.default.callAsync(this.getAccounts, function _callee15() {
	                var res;
	                return regeneratorRuntime.async(function _callee15$(_context15) {
	                    while (1) {
	                        switch (_context15.prev = _context15.next) {
	                            case 0:
	                                _context15.next = 2;
	                                return regeneratorRuntime.awrap(_this15._client.getAccounts());

	                            case 2:
	                                res = _context15.sent;
	                                return _context15.abrupt("return", res.data.accounts === undefined ? [] : res.data.accounts);

	                            case 4:
	                            case "end":
	                                return _context15.stop();
	                        }
	                    }
	                }, null, _this15);
	            });
	        }

	        /**
	         * Looks up a member's account by Id
	         *
	         * @param {string} accountId - accountId
	         * @return {Promise} account - Promise resolving to the account
	         */

	    }, {
	        key: "getAccount",
	        value: function getAccount(accountId) {
	            var _this16 = this;

	            return _Util2.default.callAsync(this.getAccount, function _callee16() {
	                var res;
	                return regeneratorRuntime.async(function _callee16$(_context16) {
	                    while (1) {
	                        switch (_context16.prev = _context16.next) {
	                            case 0:
	                                _context16.next = 2;
	                                return regeneratorRuntime.awrap(_this16._client.getAccount(accountId));

	                            case 2:
	                                res = _context16.sent;
	                                return _context16.abrupt("return", res.data.account === undefined ? [] : res.data.account);

	                            case 4:
	                            case "end":
	                                return _context16.stop();
	                        }
	                    }
	                }, null, _this16);
	            });
	        }

	        /**
	         * Gets the default bank account.
	         *
	         * @return {Promise} the default bank account
	         */

	    }, {
	        key: "getDefaultAccount",
	        value: function getDefaultAccount() {
	            var _this17 = this;

	            return _Util2.default.callAsync(this.getDefaultAccount, function _callee17() {
	                var res;
	                return regeneratorRuntime.async(function _callee17$(_context17) {
	                    while (1) {
	                        switch (_context17.prev = _context17.next) {
	                            case 0:
	                                _context17.next = 2;
	                                return regeneratorRuntime.awrap(_this17._client.getDefaultAccount(_this17.memberId()));

	                            case 2:
	                                res = _context17.sent;
	                                return _context17.abrupt("return", res.data.account);

	                            case 4:
	                            case "end":
	                                return _context17.stop();
	                        }
	                    }
	                }, null, _this17);
	            });
	        }

	        /**
	         * Sets the member's default bank account.
	         *
	         * @param {string} accountId - the bank account id
	         * @return {Promise} account - the account if found
	         */

	    }, {
	        key: "setDefaultAccount",
	        value: function setDefaultAccount(accountId) {
	            var _this18 = this;

	            return _Util2.default.callAsync(this.setDefaultAccount, function _callee18() {
	                var res;
	                return regeneratorRuntime.async(function _callee18$(_context18) {
	                    while (1) {
	                        switch (_context18.prev = _context18.next) {
	                            case 0:
	                                _context18.next = 2;
	                                return regeneratorRuntime.awrap(_this18._client.setDefaultAccount(accountId, _this18.memberId()));

	                            case 2:
	                                res = _context18.sent;
	                                return _context18.abrupt("return", res.data.account);

	                            case 4:
	                            case "end":
	                                return _context18.stop();
	                        }
	                    }
	                }, null, _this18);
	            });
	        }

	        /**
	         * Looks up if this account is default.
	         *
	         * @param {string} accountId - the bank account id
	         * @return {Promise} response - true if the account is default; false otherwise
	         */

	    }, {
	        key: "isDefaultAccount",
	        value: function isDefaultAccount(accountId) {
	            var _this19 = this;

	            return _Util2.default.callAsync(this.isDefaultAccount, function _callee19() {
	                return regeneratorRuntime.async(function _callee19$(_context19) {
	                    while (1) {
	                        switch (_context19.prev = _context19.next) {
	                            case 0:
	                                _context19.next = 2;
	                                return regeneratorRuntime.awrap(_this19.getDefaultAccount().id);

	                            case 2:
	                                _context19.t0 = _context19.sent;
	                                _context19.t1 = accountId;
	                                return _context19.abrupt("return", _context19.t0 === _context19.t1);

	                            case 5:
	                            case "end":
	                                return _context19.stop();
	                        }
	                    }
	                }, null, _this19);
	            });
	        }

	        /**
	         * Gets the info of a bank, including a link for pairing accounts at this bank
	         *
	         * @param {string} bankId - id of the bank
	         * @return {Object} bankInfo - info
	         */

	    }, {
	        key: "getBankInfo",
	        value: function getBankInfo(bankId) {
	            var _this20 = this;

	            return _Util2.default.callAsync(this.getBankInfo, function _callee20() {
	                var res;
	                return regeneratorRuntime.async(function _callee20$(_context20) {
	                    while (1) {
	                        switch (_context20.prev = _context20.next) {
	                            case 0:
	                                _context20.next = 2;
	                                return regeneratorRuntime.awrap(_this20._client.getBankInfo(bankId));

	                            case 2:
	                                res = _context20.sent;
	                                return _context20.abrupt("return", res.data.info);

	                            case 4:
	                            case "end":
	                                return _context20.stop();
	                        }
	                    }
	                }, null, _this20);
	            });
	        }

	        /**
	         * Creates a subscriber to receive notifications of member events, such as step up auth,
	         * new device requests, linking account requests, or transfer notifications
	         *
	         * @param {string} handler - who is handling the notifications
	         * @param {Object} handlerInstructions - map of strings with delivery options
	         * @return {Promise} subscriber - Subscriber
	         */

	    }, {
	        key: "subscribeToNotifications",
	        value: function subscribeToNotifications() {
	            var _this21 = this;

	            var handler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "token";
	            var handlerInstructions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	            return _Util2.default.callAsync(this.subscribeToNotifications, function _callee21() {
	                var res;
	                return regeneratorRuntime.async(function _callee21$(_context21) {
	                    while (1) {
	                        switch (_context21.prev = _context21.next) {
	                            case 0:
	                                _context21.next = 2;
	                                return regeneratorRuntime.awrap(_this21._client.subscribeToNotifications(handler, handlerInstructions));

	                            case 2:
	                                res = _context21.sent;
	                                return _context21.abrupt("return", res.data.subscriber);

	                            case 4:
	                            case "end":
	                                return _context21.stop();
	                        }
	                    }
	                }, null, _this21);
	            });
	        }

	        /**
	         * Gets all subscribers for this member
	         *
	         * @return {Promise} - subscribers
	         */

	    }, {
	        key: "getSubscribers",
	        value: function getSubscribers() {
	            var _this22 = this;

	            return _Util2.default.callAsync(this.getSubscribers, function _callee22() {
	                var res;
	                return regeneratorRuntime.async(function _callee22$(_context22) {
	                    while (1) {
	                        switch (_context22.prev = _context22.next) {
	                            case 0:
	                                _context22.next = 2;
	                                return regeneratorRuntime.awrap(_this22._client.getSubscribers());

	                            case 2:
	                                res = _context22.sent;
	                                return _context22.abrupt("return", res.data.subscribers === undefined ? [] : res.data.subscribers);

	                            case 4:
	                            case "end":
	                                return _context22.stop();
	                        }
	                    }
	                }, null, _this22);
	            });
	        }

	        /**
	         * Gets a specific subscriber by Id
	         *
	         * @param {string} subscriberId - id of the subscriber
	         * @return {Promise} - subscriber
	         */

	    }, {
	        key: "getSubscriber",
	        value: function getSubscriber(subscriberId) {
	            var _this23 = this;

	            return _Util2.default.callAsync(this.getSubscriber, function _callee23() {
	                var res;
	                return regeneratorRuntime.async(function _callee23$(_context23) {
	                    while (1) {
	                        switch (_context23.prev = _context23.next) {
	                            case 0:
	                                _context23.next = 2;
	                                return regeneratorRuntime.awrap(_this23._client.getSubscriber(subscriberId));

	                            case 2:
	                                res = _context23.sent;
	                                return _context23.abrupt("return", res.data.subscriber);

	                            case 4:
	                            case "end":
	                                return _context23.stop();
	                        }
	                    }
	                }, null, _this23);
	            });
	        }

	        /**
	         * Gets all notifications for this member
	         *
	         * @param {string} offset - where to start looking
	         * @param {int} limit - how many to look for
	         * @return {Promise} - notifications
	         */

	    }, {
	        key: "getNotifications",
	        value: function getNotifications(offset, limit) {
	            var _this24 = this;

	            return _Util2.default.callAsync(this.getNotifications, function _callee24() {
	                var res, data;
	                return regeneratorRuntime.async(function _callee24$(_context24) {
	                    while (1) {
	                        switch (_context24.prev = _context24.next) {
	                            case 0:
	                                _context24.next = 2;
	                                return regeneratorRuntime.awrap(_this24._client.getNotifications(offset, limit));

	                            case 2:
	                                res = _context24.sent;
	                                data = res.data.notifications === undefined ? [] : res.data.notifications;
	                                return _context24.abrupt("return", {
	                                    data: data,
	                                    offset: res.data.offset
	                                });

	                            case 5:
	                            case "end":
	                                return _context24.stop();
	                        }
	                    }
	                }, null, _this24);
	            });
	        }

	        /**
	         * Gets a specific notification by Id
	         *
	         * @param {string} notificationId - id of the notification
	         * @return {Promise} - notification
	         */

	    }, {
	        key: "getNotification",
	        value: function getNotification(notificationId) {
	            var _this25 = this;

	            return _Util2.default.callAsync(this.getNotification, function _callee25() {
	                var res;
	                return regeneratorRuntime.async(function _callee25$(_context25) {
	                    while (1) {
	                        switch (_context25.prev = _context25.next) {
	                            case 0:
	                                _context25.next = 2;
	                                return regeneratorRuntime.awrap(_this25._client.getNotification(notificationId));

	                            case 2:
	                                res = _context25.sent;
	                                return _context25.abrupt("return", res.data.notification);

	                            case 4:
	                            case "end":
	                                return _context25.stop();
	                        }
	                    }
	                }, null, _this25);
	            });
	        }

	        /**
	         * Unsubscribes from notifications (removes a subscriber)
	         *
	         * @param {string} subscriberId - subscriber to remove
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "unsubscribeFromNotifications",
	        value: function unsubscribeFromNotifications(subscriberId) {
	            var _this26 = this;

	            return _Util2.default.callAsync(this.unsubscribeFromNotifications, function _callee26() {
	                return regeneratorRuntime.async(function _callee26$(_context26) {
	                    while (1) {
	                        switch (_context26.prev = _context26.next) {
	                            case 0:
	                                _context26.next = 2;
	                                return regeneratorRuntime.awrap(_this26._client.unsubscribeFromNotifications(subscriberId));

	                            case 2:
	                            case "end":
	                                return _context26.stop();
	                        }
	                    }
	                }, null, _this26);
	            });
	        }

	        /**
	         * Triggers a token step up notification on the user's app
	         *
	         * @param {Object} stepUp - token step up notification payload
	         * @return {Promise} - notification status
	         */

	    }, {
	        key: "triggerStepUpNotification",
	        value: function triggerStepUpNotification(stepUp) {
	            var _this27 = this;

	            return _Util2.default.callAsync(this.triggerStepUpNotification, function _callee27() {
	                var res;
	                return regeneratorRuntime.async(function _callee27$(_context27) {
	                    while (1) {
	                        switch (_context27.prev = _context27.next) {
	                            case 0:
	                                _context27.next = 2;
	                                return regeneratorRuntime.awrap(_this27._client.triggerStepUpNotification(stepUp));

	                            case 2:
	                                res = _context27.sent;
	                                return _context27.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context27.stop();
	                        }
	                    }
	                }, null, _this27);
	            });
	        }

	        /**
	         * Triggers a balance step up notification on the user's app
	         * @param {Array} accountIds - array of account ids
	         * @return {Promise} - notification status
	         */

	    }, {
	        key: "triggerBalanceStepUpNotification",
	        value: function triggerBalanceStepUpNotification(accountIds) {
	            var _this28 = this;

	            return _Util2.default.callAsync(this.triggerBalanceStepUpNotification, function _callee28() {
	                var res;
	                return regeneratorRuntime.async(function _callee28$(_context28) {
	                    while (1) {
	                        switch (_context28.prev = _context28.next) {
	                            case 0:
	                                _context28.next = 2;
	                                return regeneratorRuntime.awrap(_this28._client.triggerBalanceStepUpNotification(accountIds));

	                            case 2:
	                                res = _context28.sent;
	                                return _context28.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context28.stop();
	                        }
	                    }
	                }, null, _this28);
	            });
	        }

	        /**
	         * Triggers a transaction step up notification on the user's app
	         * @param {String} accountId - account id
	         * @param {String} transactionId - transaction id
	         * @return {Promise} - notification status
	         */

	    }, {
	        key: "triggerTransactionStepUpNotification",
	        value: function triggerTransactionStepUpNotification(accountId, transactionId) {
	            var _this29 = this;

	            return _Util2.default.callAsync(this.triggerTransactionStepUpNotification, function _callee29() {
	                var res;
	                return regeneratorRuntime.async(function _callee29$(_context29) {
	                    while (1) {
	                        switch (_context29.prev = _context29.next) {
	                            case 0:
	                                _context29.next = 2;
	                                return regeneratorRuntime.awrap(_this29._client.triggerTransactionStepUpNotification(accountId, transactionId));

	                            case 2:
	                                res = _context29.sent;
	                                return _context29.abrupt("return", res.data.status);

	                            case 4:
	                            case "end":
	                                return _context29.stop();
	                        }
	                    }
	                }, null, _this29);
	            });
	        }

	        /**
	         * Creates an address for this member, and saves it
	         *
	         * @param {string} name - name of the address (e.g 'Home')
	         * @param {object} address - address
	         * @return {Promise} promise of AddressRecord structure
	         */

	    }, {
	        key: "addAddress",
	        value: function addAddress(name, address) {
	            var _this30 = this;

	            return _Util2.default.callAsync(this.addAddress, function _callee30() {
	                var res;
	                return regeneratorRuntime.async(function _callee30$(_context30) {
	                    while (1) {
	                        switch (_context30.prev = _context30.next) {
	                            case 0:
	                                _context30.next = 2;
	                                return regeneratorRuntime.awrap(_this30._client.addAddress(name, address));

	                            case 2:
	                                res = _context30.sent;
	                                return _context30.abrupt("return", res.data.address);

	                            case 4:
	                            case "end":
	                                return _context30.stop();
	                        }
	                    }
	                }, null, _this30);
	            });
	        }

	        /**
	         * Gets the member's address
	         *
	         * @param {string} addressId - the address id
	         * @return {Promise} address - AddressRecord structure
	         */

	    }, {
	        key: "getAddress",
	        value: function getAddress(addressId) {
	            var _this31 = this;

	            return _Util2.default.callAsync(this.getAddress, function _callee31() {
	                var res;
	                return regeneratorRuntime.async(function _callee31$(_context31) {
	                    while (1) {
	                        switch (_context31.prev = _context31.next) {
	                            case 0:
	                                _context31.next = 2;
	                                return regeneratorRuntime.awrap(_this31._client.getAddress(addressId));

	                            case 2:
	                                res = _context31.sent;
	                                return _context31.abrupt("return", res.data.address);

	                            case 4:
	                            case "end":
	                                return _context31.stop();
	                        }
	                    }
	                }, null, _this31);
	            });
	        }

	        /**
	         * Gets the member's addresses
	         *
	         * @return {Promise} addresses - list of AddressRecord structures
	         */

	    }, {
	        key: "getAddresses",
	        value: function getAddresses() {
	            var _this32 = this;

	            return _Util2.default.callAsync(this.getAddresses, function _callee32() {
	                var res;
	                return regeneratorRuntime.async(function _callee32$(_context32) {
	                    while (1) {
	                        switch (_context32.prev = _context32.next) {
	                            case 0:
	                                _context32.next = 2;
	                                return regeneratorRuntime.awrap(_this32._client.getAddresses());

	                            case 2:
	                                res = _context32.sent;
	                                return _context32.abrupt("return", res.data.addresses === undefined ? [] : res.data.addresses);

	                            case 4:
	                            case "end":
	                                return _context32.stop();
	                        }
	                    }
	                }, null, _this32);
	            });
	        }

	        /**
	         * Deletes a member's address by id
	         *
	         * @param {string} addressId - the address id
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "deleteAddress",
	        value: function deleteAddress(addressId) {
	            var _this33 = this;

	            return _Util2.default.callAsync(this.deleteAddress, function _callee33() {
	                return regeneratorRuntime.async(function _callee33$(_context33) {
	                    while (1) {
	                        switch (_context33.prev = _context33.next) {
	                            case 0:
	                                _context33.next = 2;
	                                return regeneratorRuntime.awrap(_this33._client.deleteAddress(addressId));

	                            case 2:
	                            case "end":
	                                return _context33.stop();
	                        }
	                    }
	                }, null, _this33);
	            });
	        }

	        /**
	         * Replaces the authenticated member's public profile.
	         *
	         * @param {Object} profile - profile to set
	         * @return {Promise} profile - newly-set profile
	         */

	    }, {
	        key: "setProfile",
	        value: function setProfile(profile) {
	            var _this34 = this;

	            return _Util2.default.callAsync(this.setProfile, function _callee34() {
	                var res;
	                return regeneratorRuntime.async(function _callee34$(_context34) {
	                    while (1) {
	                        switch (_context34.prev = _context34.next) {
	                            case 0:
	                                _context34.next = 2;
	                                return regeneratorRuntime.awrap(_this34._client.setProfile(profile));

	                            case 2:
	                                res = _context34.sent;
	                                return _context34.abrupt("return", res.data.profile);

	                            case 4:
	                            case "end":
	                                return _context34.stop();
	                        }
	                    }
	                }, null, _this34);
	            });
	        }

	        /**
	         * Gets a member's public profile.
	         *
	         * @param {string} id - member id whose profile to get
	         * @return {Promise} profile - profile
	         */

	    }, {
	        key: "getProfile",
	        value: function getProfile(id) {
	            var _this35 = this;

	            return _Util2.default.callAsync(this.getProfile, function _callee35() {
	                var res;
	                return regeneratorRuntime.async(function _callee35$(_context35) {
	                    while (1) {
	                        switch (_context35.prev = _context35.next) {
	                            case 0:
	                                _context35.next = 2;
	                                return regeneratorRuntime.awrap(_this35._client.getProfile(id));

	                            case 2:
	                                res = _context35.sent;
	                                return _context35.abrupt("return", res.data.profile);

	                            case 4:
	                            case "end":
	                                return _context35.stop();
	                        }
	                    }
	                }, null, _this35);
	            });
	        }

	        /**
	         * Uploads the authenticated member's public profile.
	         *
	         * @param {string} type - MIME type
	         * @param {Buffer} data - data in bytes
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "setProfilePicture",
	        value: function setProfilePicture(type, data) {
	            var _this36 = this;

	            return _Util2.default.callAsync(this.setProfilePicture, function _callee36() {
	                return regeneratorRuntime.async(function _callee36$(_context36) {
	                    while (1) {
	                        switch (_context36.prev = _context36.next) {
	                            case 0:
	                                _context36.next = 2;
	                                return regeneratorRuntime.awrap(_this36._client.setProfilePicture(type, data));

	                            case 2:
	                            case "end":
	                                return _context36.stop();
	                        }
	                    }
	                }, null, _this36);
	            });
	        }

	        /**
	         * Gets a member's public profile picture.
	         *
	         * @param {string} id - member id whose picture to get
	         * @param {Object} size - desired size category SMALL/MEDIUM/LARGE/ORIGINAL
	         * @return {Object} blob - downloaded blob
	         */

	    }, {
	        key: "getProfilePicture",
	        value: function getProfilePicture(id, size) {
	            var _this37 = this;

	            return _Util2.default.callAsync(this.getProfilePicture, function _callee37() {
	                var res;
	                return regeneratorRuntime.async(function _callee37$(_context37) {
	                    while (1) {
	                        switch (_context37.prev = _context37.next) {
	                            case 0:
	                                _context37.next = 2;
	                                return regeneratorRuntime.awrap(_this37._client.getProfilePicture(id, size));

	                            case 2:
	                                res = _context37.sent;
	                                return _context37.abrupt("return", res.data.blob);

	                            case 4:
	                            case "end":
	                                return _context37.stop();
	                        }
	                    }
	                }, null, _this37);
	            });
	        }

	        /**
	         * Replaces member's receipt contact.
	         *
	         * @param {Object} contact - receipt contact to set: value + type
	         * @return {Promise} empty - empty promise
	         */

	    }, {
	        key: "setReceiptContact",
	        value: function setReceiptContact(contact) {
	            var _this38 = this;

	            return _Util2.default.callAsync(this.setReceiptContact, function _callee38() {
	                return regeneratorRuntime.async(function _callee38$(_context38) {
	                    while (1) {
	                        switch (_context38.prev = _context38.next) {
	                            case 0:
	                                _context38.next = 2;
	                                return regeneratorRuntime.awrap(_this38._client.setReceiptContact(contact));

	                            case 2:
	                            case "end":
	                                return _context38.stop();
	                        }
	                    }
	                }, null, _this38);
	            });
	        }

	        /**
	         * Get member's receipt contact.
	         *
	         * @return {Object} contact - receipt contact: value + type
	         */

	    }, {
	        key: "getReceiptContact",
	        value: function getReceiptContact() {
	            var _this39 = this;

	            return _Util2.default.callAsync(this.getReceiptContact, function _callee39() {
	                var res;
	                return regeneratorRuntime.async(function _callee39$(_context39) {
	                    while (1) {
	                        switch (_context39.prev = _context39.next) {
	                            case 0:
	                                _context39.next = 2;
	                                return regeneratorRuntime.awrap(_this39._client.getReceiptContact());

	                            case 2:
	                                res = _context39.sent;
	                                return _context39.abrupt("return", res.data.contact);

	                            case 4:
	                            case "end":
	                                return _context39.stop();
	                        }
	                    }
	                }, null, _this39);
	            });
	        }

	        /**
	         * Stores a request for a token. Called by a merchant or a TPP that wants access from a user.
	         *
	         * @param {Object} tokenRequest - token request to store
	         * @return {Promise} requestId - requestId
	         */

	    }, {
	        key: "storeTokenRequest",
	        value: function storeTokenRequest(tokenRequest) {
	            var _this40 = this;

	            return _Util2.default.callAsync(this.storeTokenRequest, function _callee40() {
	                var res;
	                return regeneratorRuntime.async(function _callee40$(_context40) {
	                    while (1) {
	                        switch (_context40.prev = _context40.next) {
	                            case 0:
	                                _context40.next = 2;
	                                return regeneratorRuntime.awrap(_this40._client.storeTokenRequest(tokenRequest));

	                            case 2:
	                                res = _context40.sent;
	                                return _context40.abrupt("return", res.data.tokenRequest);

	                            case 4:
	                            case "end":
	                                return _context40.stop();
	                        }
	                    }
	                }, null, _this40);
	            });
	        }

	        /**
	         * Creates a new unendorsed access token.
	         *
	         * @param {Object} alias - the alias of the grantee of the Access Token
	         * @param {array} resources - a list of resources to give access to
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Promise} token - promise of a created Access Token
	         */

	    }, {
	        key: "createAccessToken",
	        value: function createAccessToken(alias, resources, realm) {
	            var _this41 = this;

	            return _Util2.default.callAsync(this.createAccessToken, function _callee41() {
	                return regeneratorRuntime.async(function _callee41$(_context41) {
	                    while (1) {
	                        switch (_context41.prev = _context41.next) {
	                            case 0:
	                                _context41.next = 2;
	                                return regeneratorRuntime.awrap(new _AccessTokenBuilder2.default(_this41._client, _this41, resources).setFromId(_this41.memberId()).setToAlias(alias).setToRealm(realm).execute());

	                            case 2:
	                                return _context41.abrupt("return", _context41.sent);

	                            case 3:
	                            case "end":
	                                return _context41.stop();
	                        }
	                    }
	                }, null, _this41);
	            });
	        }

	        /**
	         * Creates a new access token builder, that must be executed.
	         *
	         * @return {Promise} token - promise of a created Access Token
	         */

	    }, {
	        key: "createAccessTokenBuilder",
	        value: function createAccessTokenBuilder() {
	            var _this42 = this;

	            return _Util2.default.callSync(this.createAccessTokenBuilder, function () {
	                return new _AccessTokenBuilder2.default(_this42._client, _this42, []);
	            });
	        }

	        /**
	         * Cancels the existing token and creates a replacement for it.
	         *
	         * @param {Object} tokenToCancel - the old token to cancel
	         * @param {Array} newResources - the new resources for this token to grant access to
	         * @return {Promise} operationResult - the result of the operation
	         */

	    }, {
	        key: "replaceAccessToken",
	        value: function replaceAccessToken(tokenToCancel, newResources) {
	            var _this43 = this;

	            return _Util2.default.callAsync(this.replaceAccessToken, function _callee42() {
	                var finalTokenToCancel, res;
	                return regeneratorRuntime.async(function _callee42$(_context42) {
	                    while (1) {
	                        switch (_context42.prev = _context42.next) {
	                            case 0:
	                                _context42.next = 2;
	                                return regeneratorRuntime.awrap(_this43._resolveToken(tokenToCancel));

	                            case 2:
	                                finalTokenToCancel = _context42.sent;
	                                _context42.next = 5;
	                                return regeneratorRuntime.awrap(_this43._client.replaceToken(finalTokenToCancel, newResources));

	                            case 5:
	                                res = _context42.sent;
	                                return _context42.abrupt("return", res.data.result);

	                            case 7:
	                            case "end":
	                                return _context42.stop();
	                        }
	                    }
	                }, null, _this43);
	            });
	        }

	        /**
	         * Cancels the existing token, creates a replacement and endorses it.
	         *
	         * @param {Object} tokenToCancel - the old token to cancel
	         * @param {Array} newResources - the new resources for this token to grant access to
	         * @return {Promise} operationResult - the result of the operation
	         */

	    }, {
	        key: "replaceAndEndorseAccessToken",
	        value: function replaceAndEndorseAccessToken(tokenToCancel, newResources) {
	            var _this44 = this;

	            return _Util2.default.callAsync(this.replaceAndEndorseAccessToken, function _callee43() {
	                var finalTokenToCancel, res;
	                return regeneratorRuntime.async(function _callee43$(_context43) {
	                    while (1) {
	                        switch (_context43.prev = _context43.next) {
	                            case 0:
	                                _context43.next = 2;
	                                return regeneratorRuntime.awrap(_this44._resolveToken(tokenToCancel));

	                            case 2:
	                                finalTokenToCancel = _context43.sent;
	                                _context43.next = 5;
	                                return regeneratorRuntime.awrap(_this44._client.replaceAndEndorseToken(finalTokenToCancel, newResources));

	                            case 5:
	                                res = _context43.sent;
	                                return _context43.abrupt("return", res.data.result);

	                            case 7:
	                            case "end":
	                                return _context43.stop();
	                        }
	                    }
	                }, null, _this44);
	            });
	        }

	        /**
	         * @deprecated - use createTransferTokenBuilder instead
	         * Creates a transfer token builder, that when executed, will create a transfer token by
	         * performing an API call.
	         *
	         * @param {double} lifetimeAmount - amount limit on the token
	         * @param {string} currency - 3 letter currency code ('EUR', 'USD', etc)
	         * @return {TransferTokenBuilder} builder - builder for the token
	         */

	    }, {
	        key: "createTransferToken",
	        value: function createTransferToken(lifetimeAmount, currency) {
	            var _this45 = this;

	            return _Util2.default.callSync(this.createTransferToken, function () {
	                return new _TransferTokenBuilder2.default(_this45._client, _this45, lifetimeAmount, currency).setFromId(_this45.memberId());
	            });
	        }

	        /**
	         * Creates a transfer token builder, that when executed, will create a transfer token by
	         * performing an API call.
	         *
	         * @param {double} lifetimeAmount - amount limit on the token
	         * @param {string} currency - 3 letter currency code ('EUR', 'USD', etc)
	         * @return {TransferTokenBuilder} builder - builder for the token
	         */

	    }, {
	        key: "createTransferTokenBuilder",
	        value: function createTransferTokenBuilder(lifetimeAmount, currency) {
	            var _this46 = this;

	            return _Util2.default.callSync(this.createTransferTokenBuilder, function () {
	                return new _TransferTokenBuilder2.default(_this46._client, _this46, lifetimeAmount, currency);
	            });
	        }

	        /**
	         * Looks up a token by its Id
	         *
	         * @param {string} tokenId - id of the token
	         * @return {Promise} token - token
	         */

	    }, {
	        key: "getToken",
	        value: function getToken(tokenId) {
	            var _this47 = this;

	            return _Util2.default.callAsync(this.getToken, function _callee44() {
	                var res;
	                return regeneratorRuntime.async(function _callee44$(_context44) {
	                    while (1) {
	                        switch (_context44.prev = _context44.next) {
	                            case 0:
	                                _context44.next = 2;
	                                return regeneratorRuntime.awrap(_this47._client.getToken(tokenId));

	                            case 2:
	                                res = _context44.sent;
	                                return _context44.abrupt("return", res.data.token);

	                            case 4:
	                            case "end":
	                                return _context44.stop();
	                        }
	                    }
	                }, null, _this47);
	            });
	        }

	        /**
	         * Looks up a existing access token where the calling member is the grantor and given member is
	         * the grantee.
	         *
	         * @param {string} toMemberId - beneficiary of the active access token
	         * @return {Promise} token - access token returned by the server
	         */

	    }, {
	        key: "getActiveAccessToken",
	        value: function getActiveAccessToken(toMemberId) {
	            var _this48 = this;

	            return _Util2.default.callAsync(this.getActiveAccessToken, function _callee45() {
	                var res;
	                return regeneratorRuntime.async(function _callee45$(_context45) {
	                    while (1) {
	                        switch (_context45.prev = _context45.next) {
	                            case 0:
	                                _context45.next = 2;
	                                return regeneratorRuntime.awrap(_this48._client.getActiveAccessToken(toMemberId));

	                            case 2:
	                                res = _context45.sent;
	                                return _context45.abrupt("return", res.data.token);

	                            case 4:
	                            case "end":
	                                return _context45.stop();
	                        }
	                    }
	                }, null, _this48);
	            });
	        }

	        /**
	         * Looks up all transfer tokens
	         *
	         * @param {string} offset - where to start looking
	         * @param {int} limit - how many to look for
	         * @return {Promise} tokens - returns a list of Transfer Tokens
	         */

	    }, {
	        key: "getTransferTokens",
	        value: function getTransferTokens(offset, limit) {
	            var _this49 = this;

	            return _Util2.default.callAsync(this.getTransferTokens, function _callee46() {
	                var res, data;
	                return regeneratorRuntime.async(function _callee46$(_context46) {
	                    while (1) {
	                        switch (_context46.prev = _context46.next) {
	                            case 0:
	                                _context46.next = 2;
	                                return regeneratorRuntime.awrap(_this49._client.getTokens('TRANSFER', offset, limit));

	                            case 2:
	                                res = _context46.sent;
	                                data = res.data.tokens === undefined ? [] : res.data.tokens;
	                                return _context46.abrupt("return", {
	                                    data: data,
	                                    offset: res.data.offset
	                                });

	                            case 5:
	                            case "end":
	                                return _context46.stop();
	                        }
	                    }
	                }, null, _this49);
	            });
	        }

	        /**
	         * Looks up all access tokens
	         *
	         * @param {string} offset - where to start looking
	         * @param {int} limit - how many to look for
	         * @return {Promise} access tokens - returns a list of access tokens
	         */

	    }, {
	        key: "getAccessTokens",
	        value: function getAccessTokens(offset, limit) {
	            var _this50 = this;

	            return _Util2.default.callAsync(this.getAccessTokens, function _callee47() {
	                var res, data;
	                return regeneratorRuntime.async(function _callee47$(_context47) {
	                    while (1) {
	                        switch (_context47.prev = _context47.next) {
	                            case 0:
	                                _context47.next = 2;
	                                return regeneratorRuntime.awrap(_this50._client.getTokens('ACCESS', offset, limit));

	                            case 2:
	                                res = _context47.sent;
	                                data = res.data.tokens === undefined ? [] : res.data.tokens;
	                                return _context47.abrupt("return", {
	                                    data: data,
	                                    offset: res.data.offset
	                                });

	                            case 5:
	                            case "end":
	                                return _context47.stop();
	                        }
	                    }
	                }, null, _this50);
	            });
	        }

	        /**
	         * Endorses a token. If this SDK client doesn't have a sufficiently
	         * privileged key to endorse the token, this will return
	         * MORE_SIGNATURES_NEEDED and the system pushes a notification to
	         * the member prompting them to use a higher-privilege key.
	         *
	         * @param {Token} token - Transfer token to endorse. Can also be a {string} tokenId
	         * @return {Promise} token - Promise of endorsed transfer token
	         */

	    }, {
	        key: "endorseToken",
	        value: function endorseToken(token) {
	            var _this51 = this;

	            return _Util2.default.callAsync(this.endorseToken, function _callee48() {
	                var finalToken, endorsed;
	                return regeneratorRuntime.async(function _callee48$(_context48) {
	                    while (1) {
	                        switch (_context48.prev = _context48.next) {
	                            case 0:
	                                _context48.next = 2;
	                                return regeneratorRuntime.awrap(_this51._resolveToken(token));

	                            case 2:
	                                finalToken = _context48.sent;
	                                _context48.next = 5;
	                                return regeneratorRuntime.awrap(_this51._client.endorseToken(finalToken));

	                            case 5:
	                                endorsed = _context48.sent;

	                                if (typeof token !== 'string' && !(token instanceof String)) {
	                                    token.payloadSignatures = endorsed.data.result.token.payloadSignatures;
	                                }
	                                return _context48.abrupt("return", endorsed.data.result);

	                            case 8:
	                            case "end":
	                                return _context48.stop();
	                        }
	                    }
	                }, null, _this51);
	            });
	        }

	        /**
	         * Cancels a token. (Called by the payer or the redeemer)
	         *
	         * @param {Token} token - token to cancel. Can also be a {string} tokenId
	         * @return {Promise} TokenOperationResult - cancelled token
	         */

	    }, {
	        key: "cancelToken",
	        value: function cancelToken(token) {
	            var _this52 = this;

	            return _Util2.default.callAsync(this.cancelToken, function _callee49() {
	                var finalToken, cancelled;
	                return regeneratorRuntime.async(function _callee49$(_context49) {
	                    while (1) {
	                        switch (_context49.prev = _context49.next) {
	                            case 0:
	                                _context49.next = 2;
	                                return regeneratorRuntime.awrap(_this52._resolveToken(token));

	                            case 2:
	                                finalToken = _context49.sent;
	                                _context49.next = 5;
	                                return regeneratorRuntime.awrap(_this52._client.cancelToken(finalToken));

	                            case 5:
	                                cancelled = _context49.sent;

	                                if (typeof token !== 'string' && !(token instanceof String)) {
	                                    token.payloadSignatures = cancelled.data.result.token.payloadSignatures;
	                                }
	                                return _context49.abrupt("return", cancelled.data.result);

	                            case 8:
	                            case "end":
	                                return _context49.stop();
	                        }
	                    }
	                }, null, _this52);
	            });
	        }

	        /**
	         * Generates a blocking function to cancel a token. (Called by the payer or the redeemer)
	         *
	         * @param {Token} token - token to cancel. Can also be a {string} tokenId
	         * @return {Function} blocking function to cancel the token
	         */

	    }, {
	        key: "getBlockingCancelTokenFunction",
	        value: function getBlockingCancelTokenFunction(token) {
	            var _this53 = this;

	            return _Util2.default.callAsync(this.getBlockingCancelTokenFunction, function _callee50() {
	                var finalToken, cancelled;
	                return regeneratorRuntime.async(function _callee50$(_context50) {
	                    while (1) {
	                        switch (_context50.prev = _context50.next) {
	                            case 0:
	                                _context50.next = 2;
	                                return regeneratorRuntime.awrap(_this53._resolveToken(token));

	                            case 2:
	                                finalToken = _context50.sent;
	                                _context50.next = 5;
	                                return regeneratorRuntime.awrap(_this53._client.cancelToken(finalToken, true));

	                            case 5:
	                                cancelled = _context50.sent;

	                                if (!(cancelled && cancelled.data && typeof cancelled.data.dispatchRequest === 'function')) {
	                                    _context50.next = 8;
	                                    break;
	                                }

	                                return _context50.abrupt("return", cancelled.data.dispatchRequest);

	                            case 8:
	                            case "end":
	                                return _context50.stop();
	                        }
	                    }
	                }, null, _this53);
	            });
	        }

	        /**
	         * Redeems a token. (Called by the payee or redeemer)
	         *
	         * @param {object} token - token to redeem. Can also be a {string} tokenId
	         * @param {int} amount - amount to redeemer
	         * @param {string} currency - currency to redeem
	         * @param {string} description - optional transfer description
	         * @param {Array} destinations - transfer destinations
	         * @param {string} refId - Id that will be set on created Transfer.
	         *                         Token uses this to detect duplicates.
	         *                         Caller might use this to recognize the transfer.
	         *                         If param empty, transfer will have random refId.
	         * @return {Promise} transfer - Transfer created as a result of this redeem call
	         */

	    }, {
	        key: "redeemToken",
	        value: function redeemToken(token, amount, currency, description) {
	            var _this54 = this;

	            var destinations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	            var refId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

	            return _Util2.default.callAsync(this.redeemToken, function _callee51() {
	                var finalToken, res;
	                return regeneratorRuntime.async(function _callee51$(_context51) {
	                    while (1) {
	                        switch (_context51.prev = _context51.next) {
	                            case 0:
	                                _context51.next = 2;
	                                return regeneratorRuntime.awrap(_this54._resolveToken(token));

	                            case 2:
	                                finalToken = _context51.sent;

	                                if (amount === undefined) {
	                                    amount = finalToken.payload.transfer.lifetimeAmount;
	                                }
	                                if (currency === undefined) {
	                                    currency = finalToken.payload.transfer.currency;
	                                }
	                                if (description === undefined) {
	                                    description = finalToken.payload.description;
	                                }

	                                if (!(_Util2.default.countDecimals(amount) > _config2.default.decimalPrecision)) {
	                                    _context51.next = 8;
	                                    break;
	                                }

	                                throw new Error("Number of decimals in amount should be at most " + _config2.default.decimalPrecision);

	                            case 8:
	                                _context51.next = 10;
	                                return regeneratorRuntime.awrap(_this54._client.redeemToken(finalToken, amount, currency, description, destinations, refId));

	                            case 10:
	                                res = _context51.sent;
	                                return _context51.abrupt("return", res.data.transfer);

	                            case 12:
	                            case "end":
	                                return _context51.stop();
	                        }
	                    }
	                }, null, _this54);
	            });
	        }

	        /**
	         * Looks up a transfer
	         *
	         * @param {string} transferId - id to look up
	         * @return {Promise} transfer - transfer if found
	         */

	    }, {
	        key: "getTransfer",
	        value: function getTransfer(transferId) {
	            var _this55 = this;

	            return _Util2.default.callAsync(this.getTransfer, function _callee52() {
	                var res;
	                return regeneratorRuntime.async(function _callee52$(_context52) {
	                    while (1) {
	                        switch (_context52.prev = _context52.next) {
	                            case 0:
	                                _context52.next = 2;
	                                return regeneratorRuntime.awrap(_this55._client.getTransfer(transferId));

	                            case 2:
	                                res = _context52.sent;
	                                return _context52.abrupt("return", res.data.transfer);

	                            case 4:
	                            case "end":
	                                return _context52.stop();
	                        }
	                    }
	                }, null, _this55);
	            });
	        }

	        /**
	         * Looks up all of the member's transfers
	         *
	         * @param {string} tokenId - token to use for lookup
	         * @param {string} offset - where to start looking
	         * @param {int} limit - how many to retrieve
	         * @return {Promise} transfers - Transfers
	         */

	    }, {
	        key: "getTransfers",
	        value: function getTransfers(tokenId, offset, limit) {
	            var _this56 = this;

	            return _Util2.default.callAsync(this.getTransfers, function _callee53() {
	                var res, data;
	                return regeneratorRuntime.async(function _callee53$(_context53) {
	                    while (1) {
	                        switch (_context53.prev = _context53.next) {
	                            case 0:
	                                _context53.next = 2;
	                                return regeneratorRuntime.awrap(_this56._client.getTransfers(tokenId, offset, limit));

	                            case 2:
	                                res = _context53.sent;
	                                data = res.data.transfers === undefined ? [] : res.data.transfers;
	                                return _context53.abrupt("return", {
	                                    data: data,
	                                    offset: res.data.offset
	                                });

	                            case 5:
	                            case "end":
	                                return _context53.stop();
	                        }
	                    }
	                }, null, _this56);
	            });
	        }

	        /**
	         * Looks up the balance of an account
	         *
	         * @param {string} accountId - id of the account
	         * @param {string} keyLevel - key level
	         * @return {Promise} balance - Promise of get balance response object
	         */

	    }, {
	        key: "getBalance",
	        value: function getBalance(accountId, keyLevel) {
	            var _this57 = this;

	            return _Util2.default.callAsync(this.getBalance, function _callee54() {
	                var res;
	                return regeneratorRuntime.async(function _callee54$(_context54) {
	                    while (1) {
	                        switch (_context54.prev = _context54.next) {
	                            case 0:
	                                _context54.next = 2;
	                                return regeneratorRuntime.awrap(_this57._client.getBalance(accountId, keyLevel));

	                            case 2:
	                                res = _context54.sent;
	                                return _context54.abrupt("return", res.data);

	                            case 4:
	                            case "end":
	                                return _context54.stop();
	                        }
	                    }
	                }, null, _this57);
	            });
	        }

	        /**
	         * Looks up the balances of an array of accounts
	         *
	         * @param {Array} accountIds - array of account ids
	         * @param {string} keyLevel - key level
	         * @return {Promise} balance - Promise of get balances response object
	         */

	    }, {
	        key: "getBalances",
	        value: function getBalances(accountIds, keyLevel) {
	            var _this58 = this;

	            return _Util2.default.callAsync(this.getBalances, function _callee55() {
	                var res;
	                return regeneratorRuntime.async(function _callee55$(_context55) {
	                    while (1) {
	                        switch (_context55.prev = _context55.next) {
	                            case 0:
	                                _context55.next = 2;
	                                return regeneratorRuntime.awrap(_this58._client.getBalances(accountIds, keyLevel));

	                            case 2:
	                                res = _context55.sent;
	                                return _context55.abrupt("return", res.data);

	                            case 4:
	                            case "end":
	                                return _context55.stop();
	                        }
	                    }
	                }, null, _this58);
	            });
	        }

	        /**
	         * Looks up a transaction
	         *
	         * @param {string} accountId - id of the account
	         * @param {string} transactionId - which transaction to look up
	         * @param {string} keyLevel - key level
	         * @return {Promise} transaction - the Transaction
	         */

	    }, {
	        key: "getTransaction",
	        value: function getTransaction(accountId, transactionId, keyLevel) {
	            var _this59 = this;

	            return _Util2.default.callAsync(this.getTransaction, function _callee56() {
	                var res;
	                return regeneratorRuntime.async(function _callee56$(_context56) {
	                    while (1) {
	                        switch (_context56.prev = _context56.next) {
	                            case 0:
	                                _context56.next = 2;
	                                return regeneratorRuntime.awrap(_this59._client.getTransaction(accountId, transactionId, keyLevel));

	                            case 2:
	                                res = _context56.sent;
	                                return _context56.abrupt("return", res.data.transaction);

	                            case 4:
	                            case "end":
	                                return _context56.stop();
	                        }
	                    }
	                }, null, _this59);
	            });
	        }

	        /**
	         * Looks up all of the member's transactions for an account
	         *
	         * @param {string} accountId - id of the account
	         * @param {string} offset - where to start looking
	         * @param {int} limit - how many to retrieve
	         * @param {string} keyLevel - key level
	         * @return {Promise} transactions - Transactions
	         */

	    }, {
	        key: "getTransactions",
	        value: function getTransactions(accountId, offset, limit, keyLevel) {
	            var _this60 = this;

	            return _Util2.default.callAsync(this.getTransactions, function _callee57() {
	                var res, data;
	                return regeneratorRuntime.async(function _callee57$(_context57) {
	                    while (1) {
	                        switch (_context57.prev = _context57.next) {
	                            case 0:
	                                _context57.next = 2;
	                                return regeneratorRuntime.awrap(_this60._client.getTransactions(accountId, offset, limit, keyLevel));

	                            case 2:
	                                res = _context57.sent;
	                                data = res.data.transactions === undefined ? [] : res.data.transactions;
	                                return _context57.abrupt("return", {
	                                    data: data,
	                                    offset: res.data.offset
	                                });

	                            case 5:
	                            case "end":
	                                return _context57.stop();
	                        }
	                    }
	                }, null, _this60);
	            });
	        }

	        /**
	         * Uploads a blob to the server.
	         *
	         * @param {string} ownerId - owner of the blob
	         * @param {string} type - MIME type
	         * @param {string} name - name of the file
	         * @param {Buffer} data - data in bytes
	         * @return {Object} attachment - attachment
	         */

	    }, {
	        key: "createBlob",
	        value: function createBlob(ownerId, type, name, data) {
	            var _this61 = this;

	            return _Util2.default.callAsync(this.createBlob, function _callee58() {
	                var res;
	                return regeneratorRuntime.async(function _callee58$(_context58) {
	                    while (1) {
	                        switch (_context58.prev = _context58.next) {
	                            case 0:
	                                _context58.next = 2;
	                                return regeneratorRuntime.awrap(_this61._client.createBlob(ownerId, type, name, data));

	                            case 2:
	                                res = _context58.sent;
	                                return _context58.abrupt("return", {
	                                    blobId: res.data.blobId,
	                                    type: type,
	                                    name: name
	                                });

	                            case 4:
	                            case "end":
	                                return _context58.stop();
	                        }
	                    }
	                }, null, _this61);
	            });
	        }

	        /**
	         * Downloads a blob from the server.
	         *
	         * @param {string} blobId - id of the blob
	         * @return {Object} blob - downloaded blob
	         */

	    }, {
	        key: "getBlob",
	        value: function getBlob(blobId) {
	            var _this62 = this;

	            return _Util2.default.callAsync(this.getBlob, function _callee59() {
	                var res;
	                return regeneratorRuntime.async(function _callee59$(_context59) {
	                    while (1) {
	                        switch (_context59.prev = _context59.next) {
	                            case 0:
	                                _context59.next = 2;
	                                return regeneratorRuntime.awrap(_this62._client.getBlob(blobId));

	                            case 2:
	                                res = _context59.sent;
	                                return _context59.abrupt("return", res.data.blob);

	                            case 4:
	                            case "end":
	                                return _context59.stop();
	                        }
	                    }
	                }, null, _this62);
	            });
	        }

	        /**
	         * Downloads a blob from the server, that is attached to a token.
	         *
	         * @param {string} tokenId - id of the token
	         * @param {string} blobId - id of the blob
	         * @return {Object} blob - downloaded blob
	         */

	    }, {
	        key: "getTokenBlob",
	        value: function getTokenBlob(tokenId, blobId) {
	            var _this63 = this;

	            return _Util2.default.callAsync(this.getTokenBlob, function _callee60() {
	                var res;
	                return regeneratorRuntime.async(function _callee60$(_context60) {
	                    while (1) {
	                        switch (_context60.prev = _context60.next) {
	                            case 0:
	                                _context60.next = 2;
	                                return regeneratorRuntime.awrap(_this63._client.getTokenBlob(tokenId, blobId));

	                            case 2:
	                                res = _context60.sent;
	                                return _context60.abrupt("return", res.data.blob);

	                            case 4:
	                            case "end":
	                                return _context60.stop();
	                        }
	                    }
	                }, null, _this63);
	            });
	        }

	        /**
	         * Sign with a Token signature a token request state payload.
	         *
	         * @param {string} tokenId - token id
	         * @param {string} state - url state
	         * @return {Object} response - response to the api call
	         */

	    }, {
	        key: "signTokenRequestState",
	        value: function signTokenRequestState(tokenId, state) {
	            var _this64 = this;

	            return _Util2.default.callAsync(this.signTokenRequestState, function _callee61() {
	                var res;
	                return regeneratorRuntime.async(function _callee61$(_context61) {
	                    while (1) {
	                        switch (_context61.prev = _context61.next) {
	                            case 0:
	                                _context61.next = 2;
	                                return regeneratorRuntime.awrap(_this64._client.signTokenRequestState(tokenId, state));

	                            case 2:
	                                res = _context61.sent;
	                                return _context61.abrupt("return", res.data.signature);

	                            case 4:
	                            case "end":
	                                return _context61.stop();
	                        }
	                    }
	                }, null, _this64);
	            });
	        }

	        /**
	         * Deletes the member.
	         *
	         * @return {Object} response - response to the api call
	         */

	    }, {
	        key: "deleteMember",
	        value: function deleteMember() {
	            var _this65 = this;

	            return _Util2.default.callAsync(this.deleteMember, function _callee62() {
	                return regeneratorRuntime.async(function _callee62$(_context62) {
	                    while (1) {
	                        switch (_context62.prev = _context62.next) {
	                            case 0:
	                                _context62.next = 2;
	                                return regeneratorRuntime.awrap(_this65._client.deleteMember());

	                            case 2:
	                            case "end":
	                                return _context62.stop();
	                        }
	                    }
	                }, null, _this65);
	            });
	        }

	        /**
	         * Creates a test bank account in a fake bank
	         *
	         * @param {double} balance - balance of the account
	         * @param {string} currency - currency of the account
	         * @return {Array} bank authorization to use with linkAccounts
	         */

	    }, {
	        key: "createTestBankAccount",
	        value: function createTestBankAccount(balance, currency) {
	            var _this66 = this;

	            return _Util2.default.callAsync(this.createTestBankAccount, function _callee63() {
	                var res;
	                return regeneratorRuntime.async(function _callee63$(_context63) {
	                    while (1) {
	                        switch (_context63.prev = _context63.next) {
	                            case 0:
	                                _context63.next = 2;
	                                return regeneratorRuntime.awrap(_this66._client.createTestBankAccount(balance, currency));

	                            case 2:
	                                res = _context63.sent;
	                                return _context63.abrupt("return", res.data.bankAuthorization);

	                            case 4:
	                            case "end":
	                                return _context63.stop();
	                        }
	                    }
	                }, null, _this66);
	            });
	        }

	        /**
	         * Creates a test bank account in a fake bank
	         *
	         * @param {double} balance - balance of the account
	         * @param {string} currency - currency of the account
	         * @return {Array} bank authorization to use with linkAccounts
	         */

	    }, {
	        key: "createTestBankAccountOauth",
	        value: function createTestBankAccountOauth(balance, currency) {
	            var _this67 = this;

	            return _Util2.default.callAsync(this.createTestBankAccountOauth, function _callee64() {
	                var res;
	                return regeneratorRuntime.async(function _callee64$(_context64) {
	                    while (1) {
	                        switch (_context64.prev = _context64.next) {
	                            case 0:
	                                _context64.next = 2;
	                                return regeneratorRuntime.awrap(_this67._client.createTestBankAccount(balance, currency));

	                            case 2:
	                                res = _context64.sent;
	                                return _context64.abrupt("return", res.data.authorization);

	                            case 4:
	                            case "end":
	                                return _context64.stop();
	                        }
	                    }
	                }, null, _this67);
	            });
	        }
	        /**
	         * Gets test bank notification.
	         *
	         * @param {string} subscriberId - id of subscriber
	         * @param {string} notificationId - id of notification
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTestBankNotification",
	        value: function getTestBankNotification(subscriberId, notificationId) {
	            var _this68 = this;

	            return _Util2.default.callAsync(this.getTestBankNotification, function _callee65() {
	                var res;
	                return regeneratorRuntime.async(function _callee65$(_context65) {
	                    while (1) {
	                        switch (_context65.prev = _context65.next) {
	                            case 0:
	                                _context65.next = 2;
	                                return regeneratorRuntime.awrap(_this68._client.getTestBankNotification(subscriberId, notificationId));

	                            case 2:
	                                res = _context65.sent;
	                                return _context65.abrupt("return", res.data.notification);

	                            case 4:
	                            case "end":
	                                return _context65.stop();
	                        }
	                    }
	                }, null, _this68);
	            });
	        }

	        /**
	         * Gets test bank notifications.
	         *
	         * @param {string} subscriberId - id of subscriber
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTestBankNotifications",
	        value: function getTestBankNotifications(subscriberId) {
	            var _this69 = this;

	            return _Util2.default.callAsync(this.getTestBankNotifications, function _callee66() {
	                var res;
	                return regeneratorRuntime.async(function _callee66$(_context66) {
	                    while (1) {
	                        switch (_context66.prev = _context66.next) {
	                            case 0:
	                                _context66.next = 2;
	                                return regeneratorRuntime.awrap(_this69._client.getTestBankNotifications(subscriberId));

	                            case 2:
	                                res = _context66.sent;
	                                return _context66.abrupt("return", res.data.notifications);

	                            case 4:
	                            case "end":
	                                return _context66.stop();
	                        }
	                    }
	                }, null, _this69);
	            });
	        }
	    }, {
	        key: "_getPreviousHash",
	        value: function _getPreviousHash() {
	            var _this70 = this;

	            return _Util2.default.callAsync(this._getPreviousHash, function _callee67() {
	                var member;
	                return regeneratorRuntime.async(function _callee67$(_context67) {
	                    while (1) {
	                        switch (_context67.prev = _context67.next) {
	                            case 0:
	                                _context67.next = 2;
	                                return regeneratorRuntime.awrap(_this70._getMember());

	                            case 2:
	                                member = _context67.sent;
	                                return _context67.abrupt("return", member.lastHash);

	                            case 4:
	                            case "end":
	                                return _context67.stop();
	                        }
	                    }
	                }, null, _this70);
	            });
	        }
	    }, {
	        key: "_getMember",
	        value: function _getMember() {
	            var _this71 = this;

	            return _Util2.default.callAsync(this._getMember, function _callee68() {
	                var res;
	                return regeneratorRuntime.async(function _callee68$(_context68) {
	                    while (1) {
	                        switch (_context68.prev = _context68.next) {
	                            case 0:
	                                _context68.next = 2;
	                                return regeneratorRuntime.awrap(_this71._unauthenticatedClient.getMember(_this71._id));

	                            case 2:
	                                res = _context68.sent;
	                                return _context68.abrupt("return", res.data.member);

	                            case 4:
	                            case "end":
	                                return _context68.stop();
	                        }
	                    }
	                }, null, _this71);
	            });
	        }
	    }, {
	        key: "_resolveToken",
	        value: function _resolveToken(token) {
	            var _this72 = this;

	            return new Promise(function (resolve, reject) {
	                if (typeof token === 'string' || token instanceof String) {
	                    _this72.getToken(token).then(function (lookedUp) {
	                        return resolve(lookedUp);
	                    });
	                } else {
	                    resolve(token); // Token, already in json representation
	                }
	            });
	        }
	    }]);

	    return Member;
	}();

	exports.default = Member;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable camelcase */

	var _Crypto = __webpack_require__(5);

	var _Crypto2 = _interopRequireDefault(_Crypto);

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	var _AuthHeader = __webpack_require__(40);

	var _AuthHeader2 = _interopRequireDefault(_AuthHeader);

	var _AuthContext = __webpack_require__(42);

	var _AuthContext2 = _interopRequireDefault(_AuthContext);

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	var _ErrorHandler = __webpack_require__(43);

	var _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);

	var _DeveloperHeader = __webpack_require__(44);

	var _DeveloperHeader2 = _interopRequireDefault(_DeveloperHeader);

	var _VersionHeader = __webpack_require__(45);

	var _VersionHeader2 = _interopRequireDefault(_VersionHeader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var base64js = __webpack_require__(13);
	var stringify = __webpack_require__(6);
	var axios = __webpack_require__(46);

	var BlockingAdapter = __webpack_require__(68);

	/**
	 * Client for making authenticated requests to the Token gateway.
	 */

	var AuthHttpClient = function () {
	    /**
	     * Initializes the client for the environment, memberId, and CryptoEngine. Sets up signers using
	     * the CryptoEngine, for Low, Standard, and Privileged keys, which will be used to sign
	     * appropriate requests.
	     *
	     * @param {string} env - desired env, such as 'prd'
	     * @param {string} memberId - member making the requests
	     * @param {Object} cryptoEngine - engines to use for signing
	     * @param {string} developerKey - the developer key
	     * @param {function} globalRpcErrorCallback - callback to invoke on any cross-cutting RPC
	     * @param {bool} loggingEnabled - enable HTTP error logging if true
	     * call error. For example: SDK version mismatch
	     * @param {string} customSdkUrl - set to override the default sdk url
	     */
	    function AuthHttpClient(env, memberId, cryptoEngine, developerKey, globalRpcErrorCallback, loggingEnabled, customSdkUrl) {
	        _classCallCheck(this, AuthHttpClient);

	        if (!(_config2.default.urls[env] || customSdkUrl)) {
	            throw new Error('Invalid environment string. Please use one of: ' + JSON.stringify(_config2.default.urls));
	        }
	        this._instance = axios.create({
	            baseURL: customSdkUrl || _config2.default.urls[env]
	        });
	        if (loggingEnabled) {
	            _Util2.default.setUpHttpErrorLogging(this._instance);
	        }
	        this._memberId = memberId;
	        this._cryptoEngine = cryptoEngine;

	        this._context = new _AuthContext2.default();
	        this._authHeader = new _AuthHeader2.default(customSdkUrl || _config2.default.urls[env], this);

	        this._developerKey = developerKey;

	        this._resetRequestInterceptor();

	        var errorHandler = new _ErrorHandler2.default(globalRpcErrorCallback);
	        this._instance.interceptors.response.use(null, function (error) {
	            throw errorHandler.handleError(error);
	        });
	    }

	    /**
	     * Creates the necessary signer objects, based on the level requested.
	     * If the level is not available, attempts to fetch a lower level.
	     *
	     * @param {string} level - requested level of key
	     * @return {Promise} signer - object used to sign
	     */


	    _createClass(AuthHttpClient, [{
	        key: "getSigner",
	        value: function getSigner(level) {
	            return regeneratorRuntime.async(function getSigner$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            if (!(level === _config2.default.KeyLevel.LOW)) {
	                                _context.next = 4;
	                                break;
	                            }

	                            _context.next = 3;
	                            return regeneratorRuntime.awrap(this._cryptoEngine.createSigner(_config2.default.KeyLevel.LOW));

	                        case 3:
	                            return _context.abrupt("return", _context.sent);

	                        case 4:
	                            if (!(level === _config2.default.KeyLevel.STANDARD)) {
	                                _context.next = 16;
	                                break;
	                            }

	                            _context.prev = 5;
	                            _context.next = 8;
	                            return regeneratorRuntime.awrap(this._cryptoEngine.createSigner(_config2.default.KeyLevel.STANDARD));

	                        case 8:
	                            return _context.abrupt("return", _context.sent);

	                        case 11:
	                            _context.prev = 11;
	                            _context.t0 = _context["catch"](5);
	                            _context.next = 15;
	                            return regeneratorRuntime.awrap(this._cryptoEngine.createSigner(_config2.default.KeyLevel.LOW));

	                        case 15:
	                            return _context.abrupt("return", _context.sent);

	                        case 16:
	                            if (!(level === _config2.default.KeyLevel.PRIVILEGED)) {
	                                _context.next = 36;
	                                break;
	                            }

	                            _context.prev = 17;
	                            _context.next = 20;
	                            return regeneratorRuntime.awrap(this._cryptoEngine.createSigner(_config2.default.KeyLevel.PRIVILEGED));

	                        case 20:
	                            return _context.abrupt("return", _context.sent);

	                        case 23:
	                            _context.prev = 23;
	                            _context.t1 = _context["catch"](17);
	                            _context.prev = 25;
	                            _context.next = 28;
	                            return regeneratorRuntime.awrap(this._cryptoEngine.createSigner(_config2.default.KeyLevel.STANDARD));

	                        case 28:
	                            return _context.abrupt("return", _context.sent);

	                        case 31:
	                            _context.prev = 31;
	                            _context.t2 = _context["catch"](25);
	                            _context.next = 35;
	                            return regeneratorRuntime.awrap(this._cryptoEngine.createSigner(_config2.default.KeyLevel.LOW));

	                        case 35:
	                            return _context.abrupt("return", _context.sent);

	                        case 36:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, null, this, [[5, 11], [17, 23], [25, 31]]);
	        }
	    }, {
	        key: "_resetRequestInterceptor",
	        value: function _resetRequestInterceptor() {
	            var _this = this;

	            this._instance.interceptors.request.eject(this._interceptor);

	            var versionHeader = new _VersionHeader2.default();
	            var developerHeader = new _DeveloperHeader2.default(this._developerKey);
	            this._interceptor = this._instance.interceptors.request.use(function _callee(request) {
	                return regeneratorRuntime.async(function _callee$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return regeneratorRuntime.awrap(_this._authHeader.addAuthorizationHeader(_this._memberId, request, _this._context));

	                            case 2:
	                                versionHeader.addVersionHeader(request);
	                                developerHeader.addDeveloperHeader(request);
	                                return _context2.abrupt("return", request);

	                            case 5:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, null, _this);
	            });
	        }

	        /**
	         * Use the given access token. (Act on behalf of this member).
	         *
	         * @param {string} accessTokenId - Id of the access token
	         */

	    }, {
	        key: "useAccessToken",
	        value: function useAccessToken(accessTokenId) {
	            this._context.onBehalfOf = accessTokenId;
	            this._resetRequestInterceptor();
	        }

	        /**
	         * Use the given key level to sign the request.
	         *
	         * @param {string} keyLevel - key level
	         */

	    }, {
	        key: "useKeyLevel",
	        value: function useKeyLevel(keyLevel) {
	            this._context.keyLevel = keyLevel;
	            this._resetRequestInterceptor();
	        }

	        /**
	         * Clears the AuthContext, so this client no longer acts on behalf of another member.
	         */

	    }, {
	        key: "clearAccessToken",
	        value: function clearAccessToken() {
	            this._context.onBehalfOf = undefined;
	            this._resetRequestInterceptor();
	        }

	        /**
	         * Sets the customer initiated request flag to true.
	         */

	    }, {
	        key: "setCustomerInitiated",
	        value: function setCustomerInitiated() {
	            this._context.customerInitiated = true;
	        }

	        /**
	         * Subcribes to push notifications.
	         *
	         * @param {string} handler - who is handling the notifications
	         * @param {string} handlerInstructions - how to send the notification
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "subscribeToNotifications",
	        value: function subscribeToNotifications(handler, handlerInstructions) {
	            var req, request;
	            return regeneratorRuntime.async(function subscribeToNotifications$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            req = {
	                                handler: handler,
	                                handlerInstructions: handlerInstructions
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/subscribers",
	                                data: req
	                            };
	                            return _context3.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets all subscribers for a member.
	         *
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getSubscribers",
	        value: function getSubscribers() {
	            var request;
	            return regeneratorRuntime.async(function getSubscribers$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/subscribers"
	                            };
	                            return _context4.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a subscriber by id.
	         *
	         * @param {string} subscriberId - Id of the subscriber to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getSubscriber",
	        value: function getSubscriber(subscriberId) {
	            var request;
	            return regeneratorRuntime.async(function getSubscriber$(_context5) {
	                while (1) {
	                    switch (_context5.prev = _context5.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/subscribers/" + subscriberId
	                            };
	                            return _context5.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context5.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets all notifications.
	         *
	         * @param {string} offset - where to start looking
	         * @param {Number} limit - how many to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getNotifications",
	        value: function getNotifications(offset, limit) {
	            var request;
	            return regeneratorRuntime.async(function getNotifications$(_context6) {
	                while (1) {
	                    switch (_context6.prev = _context6.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/notifications?offset=" + offset + "&limit=" + limit
	                            };
	                            return _context6.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context6.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a notification by id.
	         *
	         * @param {string} notificationId - Id of the notification to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getNotification",
	        value: function getNotification(notificationId) {
	            var request;
	            return regeneratorRuntime.async(function getNotification$(_context7) {
	                while (1) {
	                    switch (_context7.prev = _context7.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/notifications/" + notificationId
	                            };
	                            return _context7.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context7.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Unsubscribes from notifications (deletes a subscriber).
	         *
	         * @param {string} subscriberId - subscriber to delete
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "unsubscribeFromNotifications",
	        value: function unsubscribeFromNotifications(subscriberId) {
	            var request;
	            return regeneratorRuntime.async(function unsubscribeFromNotifications$(_context8) {
	                while (1) {
	                    switch (_context8.prev = _context8.next) {
	                        case 0:
	                            request = {
	                                method: 'delete',
	                                url: "/subscribers/" + subscriberId
	                            };
	                            return _context8.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context8.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Trigger a token step up notification.
	         *
	         * @param {Object} stepUp - token step up notification payload
	         * @return {Object} response - response to the Api call
	         */

	    }, {
	        key: "triggerStepUpNotification",
	        value: function triggerStepUpNotification(stepUp) {
	            var req, request;
	            return regeneratorRuntime.async(function triggerStepUpNotification$(_context9) {
	                while (1) {
	                    switch (_context9.prev = _context9.next) {
	                        case 0:
	                            req = {
	                                tokenStepUp: stepUp
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/notify/stepup",
	                                data: req
	                            };
	                            return _context9.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context9.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Trigger a balance step up notification.
	         *
	         * @param {Array} accountIds - array of account ids
	         * @return {Object} response - response to the Api call
	         */

	    }, {
	        key: "triggerBalanceStepUpNotification",
	        value: function triggerBalanceStepUpNotification(accountIds) {
	            var req, request;
	            return regeneratorRuntime.async(function triggerBalanceStepUpNotification$(_context10) {
	                while (1) {
	                    switch (_context10.prev = _context10.next) {
	                        case 0:
	                            req = {
	                                balanceStepUp: {
	                                    accountId: accountIds
	                                }
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/notify/stepup",
	                                data: req
	                            };
	                            return _context10.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context10.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Trigger a transaction step up notification.
	         *
	         * @param {string} accountId - account id
	         * @param {string} transactionId - transaction id
	         * @return {Object} response - response to the Api call
	         */

	    }, {
	        key: "triggerTransactionStepUpNotification",
	        value: function triggerTransactionStepUpNotification(accountId, transactionId) {
	            var req, request;
	            return regeneratorRuntime.async(function triggerTransactionStepUpNotification$(_context11) {
	                while (1) {
	                    switch (_context11.prev = _context11.next) {
	                        case 0:
	                            req = {
	                                transactionStepUp: {
	                                    accountId: accountId,
	                                    transactionId: transactionId
	                                }
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/notify/stepup",
	                                data: req
	                            };
	                            return _context11.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context11.stop();
	                    }
	                }
	            }, null, this);
	        }

	        //
	        // ADDRESSES
	        //

	        /**
	         * Adds an address to the member.
	         *
	         * @param {string} name - name of the address
	         * @param {Object} address - address to add
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "addAddress",
	        value: function addAddress(name, address) {
	            var signer, req, request;
	            return regeneratorRuntime.async(function addAddress$(_context12) {
	                while (1) {
	                    switch (_context12.prev = _context12.next) {
	                        case 0:
	                            _context12.next = 2;
	                            return regeneratorRuntime.awrap(this.getSigner(_config2.default.KeyLevel.LOW));

	                        case 2:
	                            signer = _context12.sent;
	                            _context12.t0 = name;
	                            _context12.t1 = address;
	                            _context12.t2 = this._memberId;
	                            _context12.t3 = signer.getKeyId();
	                            _context12.next = 9;
	                            return regeneratorRuntime.awrap(signer.signJson(address));

	                        case 9:
	                            _context12.t4 = _context12.sent;
	                            _context12.t5 = {
	                                memberId: _context12.t2,
	                                keyId: _context12.t3,
	                                signature: _context12.t4
	                            };
	                            req = {
	                                name: _context12.t0,
	                                address: _context12.t1,
	                                addressSignature: _context12.t5
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/addresses",
	                                data: req
	                            };
	                            return _context12.abrupt("return", this._instance(request));

	                        case 14:
	                        case "end":
	                            return _context12.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets an address by id.
	         *
	         * @param {string} addressId - address to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getAddress",
	        value: function getAddress(addressId) {
	            var request;
	            return regeneratorRuntime.async(function getAddress$(_context13) {
	                while (1) {
	                    switch (_context13.prev = _context13.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/addresses/" + addressId
	                            };
	                            return _context13.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context13.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets all addresses.
	         *
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getAddresses",
	        value: function getAddresses() {
	            var request;
	            return regeneratorRuntime.async(function getAddresses$(_context14) {
	                while (1) {
	                    switch (_context14.prev = _context14.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/addresses"
	                            };
	                            return _context14.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context14.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Deletes an address.
	         *
	         * @param {string} addressId - address to delete
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "deleteAddress",
	        value: function deleteAddress(addressId) {
	            var request;
	            return regeneratorRuntime.async(function deleteAddress$(_context15) {
	                while (1) {
	                    switch (_context15.prev = _context15.next) {
	                        case 0:
	                            request = {
	                                method: 'delete',
	                                url: "/addresses/" + addressId
	                            };
	                            return _context15.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context15.stop();
	                    }
	                }
	            }, null, this);
	        }

	        //
	        // PROFILES
	        //

	        /**
	         * Replaces the authenticated member's public profile.
	         *
	         * @param {Object} profile - profile to set
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "setProfile",
	        value: function setProfile(profile) {
	            var req, request;
	            return regeneratorRuntime.async(function setProfile$(_context16) {
	                while (1) {
	                    switch (_context16.prev = _context16.next) {
	                        case 0:
	                            req = {
	                                profile: profile
	                            };
	                            request = {
	                                method: 'put',
	                                url: "/profile",
	                                data: req
	                            };
	                            return _context16.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context16.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a member's public profile.
	         *
	         * @param {string} id - member id whose profile to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getProfile",
	        value: function getProfile(id) {
	            var request;
	            return regeneratorRuntime.async(function getProfile$(_context17) {
	                while (1) {
	                    switch (_context17.prev = _context17.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/members/" + id + "/profile"
	                            };
	                            return _context17.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context17.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Uploads member's public profile picture.
	         *
	         * @param {string} type - MIME type
	         * @param {Buffer} data - data in bytes
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "setProfilePicture",
	        value: function setProfilePicture(type, data) {
	            var req, request;
	            return regeneratorRuntime.async(function setProfilePicture$(_context18) {
	                while (1) {
	                    switch (_context18.prev = _context18.next) {
	                        case 0:
	                            req = {
	                                payload: {
	                                    ownerId: this._memberId,
	                                    type: type,
	                                    name: "profile",
	                                    data: base64js.fromByteArray(data),
	                                    accessMode: "PUBLIC"
	                                }
	                            };
	                            request = {
	                                method: 'put',
	                                url: "/profilepicture",
	                                data: req
	                            };
	                            return _context18.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context18.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a member's public profile picture.
	         *
	         * @param {string} id - member Id whose picture to get
	         * @param {Object} size - desired size category: SMALL/MEDIUM/LARGE/ORIGINAL
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getProfilePicture",
	        value: function getProfilePicture(id, size) {
	            var request;
	            return regeneratorRuntime.async(function getProfilePicture$(_context19) {
	                while (1) {
	                    switch (_context19.prev = _context19.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/members/" + id + "/profilepicture/" + size
	                            };
	                            return _context19.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context19.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Replaces member's receipt contact.
	         *
	         * @param {Object} contact - receipt contact to set: value + type
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "setReceiptContact",
	        value: function setReceiptContact(contact) {
	            var req, request;
	            return regeneratorRuntime.async(function setReceiptContact$(_context20) {
	                while (1) {
	                    switch (_context20.prev = _context20.next) {
	                        case 0:
	                            req = {
	                                contact: contact
	                            };
	                            request = {
	                                method: 'put',
	                                url: "/receipt-contact",
	                                data: req
	                            };
	                            return _context20.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context20.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets member's receipt contact.
	         *
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getReceiptContact",
	        value: function getReceiptContact() {
	            var request;
	            return regeneratorRuntime.async(function getReceiptContact$(_context21) {
	                while (1) {
	                    switch (_context21.prev = _context21.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/receipt-contact"
	                            };
	                            return _context21.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context21.stop();
	                    }
	                }
	            }, null, this);
	        }

	        //
	        // ACCOUNTS
	        //

	        /**
	         * Links accounts to the member.
	         *
	         * @param {Object} bankAuthorization - encrypted authorization to accounts
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "linkAccounts",
	        value: function linkAccounts(bankAuthorization) {
	            var req, request;
	            return regeneratorRuntime.async(function linkAccounts$(_context22) {
	                while (1) {
	                    switch (_context22.prev = _context22.next) {
	                        case 0:
	                            req = {
	                                bankAuthorization: bankAuthorization
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/accounts",
	                                data: req
	                            };
	                            return _context22.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context22.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Links accounts to the member.
	         *
	         * @param {string} authorization - oauthBankAuthorization continaing bank_id and
	         * access_token
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "linkAccountsOauth",
	        value: function linkAccountsOauth(authorization) {
	            var req, request;
	            return regeneratorRuntime.async(function linkAccountsOauth$(_context23) {
	                while (1) {
	                    switch (_context23.prev = _context23.next) {
	                        case 0:
	                            req = {
	                                authorization: authorization
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/bank-accounts",
	                                data: req
	                            };
	                            return _context23.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context23.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Unlinks bank accounts previously linked by the linkAccounts call.
	         *
	         * @param {Array} accountIds - account ids to unlink
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "unlinkAccounts",
	        value: function unlinkAccounts(accountIds) {
	            var req, request;
	            return regeneratorRuntime.async(function unlinkAccounts$(_context24) {
	                while (1) {
	                    switch (_context24.prev = _context24.next) {
	                        case 0:
	                            req = {
	                                accountIds: accountIds
	                            };
	                            request = {
	                                method: 'delete',
	                                url: "/accounts",
	                                data: req
	                            };
	                            return _context24.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context24.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets all accounts linked to the member.
	         *
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getAccounts",
	        value: function getAccounts() {
	            var request;
	            return regeneratorRuntime.async(function getAccounts$(_context25) {
	                while (1) {
	                    switch (_context25.prev = _context25.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/accounts"
	                            };
	                            return _context25.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context25.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets an account.
	         *
	         * @param {string} accountId - account to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getAccount",
	        value: function getAccount(accountId) {
	            var request;
	            return regeneratorRuntime.async(function getAccount$(_context26) {
	                while (1) {
	                    switch (_context26.prev = _context26.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/accounts/" + accountId
	                            };
	                            return _context26.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context26.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets the default bank account.
	         *
	         * @return {Promise} response - the default bank account
	         */

	    }, {
	        key: "getDefaultAccount",
	        value: function getDefaultAccount() {
	            var request;
	            return regeneratorRuntime.async(function getDefaultAccount$(_context27) {
	                while (1) {
	                    switch (_context27.prev = _context27.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/members/" + this._memberId + "/default-account"
	                            };
	                            return _context27.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context27.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Sets the member's default bank account.
	         *
	         * @param {string} accountId - the bank account id
	         * @return {Promise} a promise
	         */

	    }, {
	        key: "setDefaultAccount",
	        value: function setDefaultAccount(accountId) {
	            var req, request;
	            return regeneratorRuntime.async(function setDefaultAccount$(_context28) {
	                while (1) {
	                    switch (_context28.prev = _context28.next) {
	                        case 0:
	                            req = { accountId: accountId };
	                            request = {
	                                method: 'put',
	                                url: "/members/" + this._memberId + "/default-account",
	                                data: req
	                            };
	                            return _context28.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context28.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Sets the name of an account.
	         *
	         * @param {string} accountId - account
	         * @param {string} name - new name
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "setAccountName",
	        value: function setAccountName(accountId, name) {
	            var request;
	            return regeneratorRuntime.async(function setAccountName$(_context29) {
	                while (1) {
	                    switch (_context29.prev = _context29.next) {
	                        case 0:
	                            request = {
	                                method: 'patch',
	                                url: "/accounts/" + accountId + "?name=" + name
	                            };
	                            return _context29.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context29.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets the balance of an account.
	         *
	         * @param {string} accountId - accountId
	         * @param {string} keyLevel - key level
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getBalance",
	        value: function getBalance(accountId, keyLevel) {
	            var request;
	            return regeneratorRuntime.async(function getBalance$(_context30) {
	                while (1) {
	                    switch (_context30.prev = _context30.next) {
	                        case 0:
	                            this.useKeyLevel(keyLevel);

	                            request = {
	                                method: 'get',
	                                url: "/accounts/" + accountId + "/balance"
	                            };
	                            return _context30.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context30.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets the balances of an array of accounts.
	         *
	         * @param {Array} accountIds - array of accountIds
	         * @param {string} keyLevel - key level
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getBalances",
	        value: function getBalances(accountIds, keyLevel) {
	            var url, request;
	            return regeneratorRuntime.async(function getBalances$(_context31) {
	                while (1) {
	                    switch (_context31.prev = _context31.next) {
	                        case 0:
	                            this.useKeyLevel(keyLevel);
	                            url = '/accounts/balance?' + accountIds.map(function (accountId) {
	                                return 'account_id=' + accountId;
	                            }).join('&');
	                            request = {
	                                method: 'get',
	                                url: url
	                            };
	                            return _context31.abrupt("return", this._instance(request));

	                        case 4:
	                        case "end":
	                            return _context31.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a transaction for an account, by its id.
	         *
	         * @param {string} accountId - account that initiated the transaction
	         * @param {string} transactionId - id of the transaction
	         * @param {string} keyLevel - key level
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTransaction",
	        value: function getTransaction(accountId, transactionId, keyLevel) {
	            var request;
	            return regeneratorRuntime.async(function getTransaction$(_context32) {
	                while (1) {
	                    switch (_context32.prev = _context32.next) {
	                        case 0:
	                            this.useKeyLevel(keyLevel);
	                            request = {
	                                method: 'get',
	                                url: "/accounts/" + accountId + "/transaction/" + transactionId
	                            };
	                            return _context32.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context32.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets all transactions for an account.
	         *
	         * @param {string} accountId - id of the account
	         * @param {string} offset - where to start
	         * @param {Number} limit - how many to get
	         * @param {string} keyLevel - key level
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTransactions",
	        value: function getTransactions(accountId, offset, limit, keyLevel) {
	            var request;
	            return regeneratorRuntime.async(function getTransactions$(_context33) {
	                while (1) {
	                    switch (_context33.prev = _context33.next) {
	                        case 0:
	                            this.useKeyLevel(keyLevel);
	                            request = {
	                                method: 'get',
	                                url: "/accounts/" + accountId + "/transactions?offset=" + offset + "&limit=" + limit
	                            };
	                            return _context33.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context33.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Uploads a blob to the server.
	         *
	         * @param {string} ownerId - owner of the blob
	         * @param {string} type - MIME type
	         * @param {string} name - name of the file
	         * @param {Buffer} data - data in bytes
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "createBlob",
	        value: function createBlob(ownerId, type, name, data) {
	            var req, request;
	            return regeneratorRuntime.async(function createBlob$(_context34) {
	                while (1) {
	                    switch (_context34.prev = _context34.next) {
	                        case 0:
	                            req = {
	                                payload: {
	                                    ownerId: ownerId,
	                                    type: type,
	                                    name: name,
	                                    data: base64js.fromByteArray(data)
	                                }
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/blobs",
	                                data: req
	                            };
	                            return _context34.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context34.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a blob that is a attached to a token.
	         *
	         * @param {string} tokenId - id of the token
	         * @param {string} blobId - id of the blob
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTokenBlob",
	        value: function getTokenBlob(tokenId, blobId) {
	            var request;
	            return regeneratorRuntime.async(function getTokenBlob$(_context35) {
	                while (1) {
	                    switch (_context35.prev = _context35.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "tokens/" + tokenId + "/blobs/" + blobId
	                            };
	                            return _context35.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context35.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a blob from the server.
	         *
	         * @param {string} blobId - id of the blob
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getBlob",
	        value: function getBlob(blobId) {
	            var request;
	            return regeneratorRuntime.async(function getBlob$(_context36) {
	                while (1) {
	                    switch (_context36.prev = _context36.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/blobs/" + blobId
	                            };
	                            return _context36.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context36.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets info about a bank.
	         *
	         * @param {string} bankId - id of the bank to lookup
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getBankInfo",
	        value: function getBankInfo(bankId) {
	            var request;
	            return regeneratorRuntime.async(function getBankInfo$(_context37) {
	                while (1) {
	                    switch (_context37.prev = _context37.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/banks/" + bankId + "/info"
	                            };
	                            return _context37.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context37.stop();
	                    }
	                }
	            }, null, this);
	        }

	        //
	        // Tokens
	        //

	        /**
	         * Stores a request for a token. Called by a merchant or a TPP that wants access from a user.
	         *
	         * @param {Object} tokenRequest - token request to store
	         * @return {Promise} response - response to the API call
	         */

	    }, {
	        key: "storeTokenRequest",
	        value: function storeTokenRequest(tokenRequest) {
	            var request;
	            return regeneratorRuntime.async(function storeTokenRequest$(_context38) {
	                while (1) {
	                    switch (_context38.prev = _context38.next) {
	                        case 0:
	                            request = {
	                                method: 'post',
	                                url: "/token-requests",
	                                data: tokenRequest
	                            };
	                            return _context38.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context38.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Creates a transfer token.
	         *
	         * @param {Object} payload - payload of the token
	         * @param {string} tokenRequestId - token request id
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "createTransferToken",
	        value: function createTransferToken(payload, tokenRequestId) {
	            var request;
	            return regeneratorRuntime.async(function createTransferToken$(_context39) {
	                while (1) {
	                    switch (_context39.prev = _context39.next) {
	                        case 0:
	                            request = {
	                                method: 'post',
	                                url: "/tokens?type=transfer",
	                                data: {
	                                    payload: payload,
	                                    tokenRequestId: tokenRequestId
	                                }
	                            };
	                            return _context39.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context39.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Creates an access token.
	         *
	         * @param {Object} payload - access token payload
	         * @param {string} tokenRequestId - token request id
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "createAccessToken",
	        value: function createAccessToken(payload, tokenRequestId) {
	            var request;
	            return regeneratorRuntime.async(function createAccessToken$(_context40) {
	                while (1) {
	                    switch (_context40.prev = _context40.next) {
	                        case 0:
	                            request = {
	                                method: 'post',
	                                url: "/tokens?type=access",
	                                data: {
	                                    payload: payload,
	                                    tokenRequestId: tokenRequestId
	                                }
	                            };
	                            return _context40.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context40.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Replaces an access token with one with updated resources.
	         *
	         * @param {Object} tokenToCancel - access token to replace
	         * @param {Array} newResources - new resources
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "replaceToken",
	        value: function replaceToken(tokenToCancel, newResources) {
	            var cancelTokenId, cancelReq, createReq, request;
	            return regeneratorRuntime.async(function replaceToken$(_context41) {
	                while (1) {
	                    switch (_context41.prev = _context41.next) {
	                        case 0:
	                            cancelTokenId = tokenToCancel.id;
	                            _context41.next = 3;
	                            return regeneratorRuntime.awrap(this._tokenOperationRequest(tokenToCancel, 'cancelled'));

	                        case 3:
	                            cancelReq = _context41.sent;
	                            createReq = {
	                                payload: {
	                                    from: {
	                                        id: this._memberId
	                                    },
	                                    to: tokenToCancel.payload.to,
	                                    access: {
	                                        resources: newResources
	                                    },
	                                    issuer: tokenToCancel.payload.issuer,
	                                    version: _config2.default.accessTokenVersion,
	                                    refId: _Util2.default.generateNonce()
	                                }
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/tokens/" + cancelTokenId + "/replace",
	                                data: {
	                                    cancel_token: cancelReq,
	                                    create_token: createReq
	                                }
	                            };
	                            return _context41.abrupt("return", this._instance(request));

	                        case 7:
	                        case "end":
	                            return _context41.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Replaces an access token with one with updated resources, and endorses it.
	         *
	         * @param {Object} tokenToCancel - access token to replace
	         * @param {Array} newResources - new resources
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "replaceAndEndorseToken",
	        value: function replaceAndEndorseToken(tokenToCancel, newResources) {
	            var cancelTokenId, cancelReq, payload, createReq, request;
	            return regeneratorRuntime.async(function replaceAndEndorseToken$(_context42) {
	                while (1) {
	                    switch (_context42.prev = _context42.next) {
	                        case 0:
	                            cancelTokenId = tokenToCancel.id;
	                            _context42.next = 3;
	                            return regeneratorRuntime.awrap(this._tokenOperationRequest(tokenToCancel, 'cancelled'));

	                        case 3:
	                            cancelReq = _context42.sent;
	                            payload = {
	                                from: {
	                                    id: this._memberId
	                                },
	                                to: tokenToCancel.payload.to,
	                                access: {
	                                    resources: newResources
	                                },
	                                issuer: tokenToCancel.payload.issuer,
	                                version: _config2.default.accessTokenVersion,
	                                refId: _Util2.default.generateNonce()
	                            };
	                            _context42.t0 = payload;
	                            _context42.next = 8;
	                            return regeneratorRuntime.awrap(this._tokenOperationSignature(payload, 'endorsed'));

	                        case 8:
	                            _context42.t1 = _context42.sent;
	                            createReq = {
	                                payload: _context42.t0,
	                                payload_signature: _context42.t1
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/tokens/" + cancelTokenId + "/replace",
	                                data: {
	                                    cancel_token: cancelReq,
	                                    create_token: createReq
	                                }
	                            };
	                            return _context42.abrupt("return", this._instance(request));

	                        case 12:
	                        case "end":
	                            return _context42.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Endorses a token.
	         *
	         * @param {Object} token - token to endorse
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "endorseToken",
	        value: function endorseToken(token) {
	            return regeneratorRuntime.async(function endorseToken$(_context43) {
	                while (1) {
	                    switch (_context43.prev = _context43.next) {
	                        case 0:
	                            return _context43.abrupt("return", this._tokenOperation(token, 'endorse', 'endorsed'));

	                        case 1:
	                        case "end":
	                            return _context43.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Cancels a token.
	         *
	         * @param {Object} token - token to cancel
	         * @param {bool} blocking - creates a blocking request
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "cancelToken",
	        value: function cancelToken(token, blocking) {
	            return regeneratorRuntime.async(function cancelToken$(_context44) {
	                while (1) {
	                    switch (_context44.prev = _context44.next) {
	                        case 0:
	                            return _context44.abrupt("return", this._tokenOperation(token, 'cancel', 'cancelled', blocking));

	                        case 1:
	                        case "end":
	                            return _context44.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Redeems a transfer token.
	         *
	         * @param {Object} transferToken - token to redeem
	         * @param {Number} amount - amount to charge
	         * @param {string} currency - currency to charge
	         * @param {string} description - description of the transfer
	         * @param {Array} destinations - destinations money should go to
	         * @param {string} refId - reference Id to attach to the transfer
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "redeemToken",
	        value: function redeemToken(transferToken, amount, currency, description, destinations, refId) {
	            var payload, signer, req, request;
	            return regeneratorRuntime.async(function redeemToken$(_context45) {
	                while (1) {
	                    switch (_context45.prev = _context45.next) {
	                        case 0:
	                            if (!refId) {
	                                refId = _Util2.default.generateNonce();
	                            }
	                            payload = {
	                                refId: refId,
	                                tokenId: transferToken.id,
	                                amount: {
	                                    value: amount.toString(),
	                                    currency: currency
	                                }
	                            };


	                            if (description) {
	                                payload.description = description;
	                            }

	                            if (destinations !== undefined && destinations.length > 0) {
	                                payload.destinations = destinations;
	                            }

	                            _context45.next = 6;
	                            return regeneratorRuntime.awrap(this.getSigner(_config2.default.KeyLevel.LOW));

	                        case 6:
	                            signer = _context45.sent;
	                            _context45.t0 = payload;
	                            _context45.t1 = this._memberId;
	                            _context45.t2 = signer.getKeyId();
	                            _context45.next = 12;
	                            return regeneratorRuntime.awrap(signer.signJson(payload));

	                        case 12:
	                            _context45.t3 = _context45.sent;
	                            _context45.t4 = {
	                                memberId: _context45.t1,
	                                keyId: _context45.t2,
	                                signature: _context45.t3
	                            };
	                            req = {
	                                payload: _context45.t0,
	                                payloadSignature: _context45.t4
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/transfers",
	                                data: req
	                            };
	                            return _context45.abrupt("return", this._instance(request));

	                        case 17:
	                        case "end":
	                            return _context45.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets a token by its id.
	         *
	         * @param {string} tokenId - id of the token to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getToken",
	        value: function getToken(tokenId) {
	            var request;
	            return regeneratorRuntime.async(function getToken$(_context46) {
	                while (1) {
	                    switch (_context46.prev = _context46.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/tokens/" + tokenId
	                            };
	                            return _context46.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context46.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Looks up a existing access token where the calling member is the grantor and given member is
	         * the grantee.
	         *
	         * @param {string} toMemberId - beneficiary of the active access token
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getActiveAccessToken",
	        value: function getActiveAccessToken(toMemberId) {
	            var request;
	            return regeneratorRuntime.async(function getActiveAccessToken$(_context47) {
	                while (1) {
	                    switch (_context47.prev = _context47.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/tokens/active-access-token/" + toMemberId
	                            };
	                            return _context47.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context47.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets all tokens of the member, of a certain type.
	         *
	         * @param {string} type - type of tokens to get
	         * @param {string} offset - where to start looking
	         * @param {Number} limit - how many to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTokens",
	        value: function getTokens(type, offset, limit) {
	            var request;
	            return regeneratorRuntime.async(function getTokens$(_context48) {
	                while (1) {
	                    switch (_context48.prev = _context48.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/tokens?type=" + type + "&offset=" + offset + "&limit=" + limit
	                            };
	                            return _context48.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context48.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }, {
	        key: "_tokenOperation",
	        value: function _tokenOperation(token, operation, suffix, blocking) {
	            var tokenId, request;
	            return regeneratorRuntime.async(function _tokenOperation$(_context49) {
	                while (1) {
	                    switch (_context49.prev = _context49.next) {
	                        case 0:
	                            tokenId = token.id;
	                            _context49.t0 = "/tokens/" + tokenId + "/" + operation;
	                            _context49.next = 4;
	                            return regeneratorRuntime.awrap(this._tokenOperationRequest(token, suffix));

	                        case 4:
	                            _context49.t1 = _context49.sent;
	                            request = {
	                                method: 'put',
	                                url: _context49.t0,
	                                data: _context49.t1
	                            };

	                            if (blocking) request.adapter = BlockingAdapter;
	                            return _context49.abrupt("return", this._instance(request));

	                        case 8:
	                        case "end":
	                            return _context49.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }, {
	        key: "_tokenOperationRequest",
	        value: function _tokenOperationRequest(token, suffix) {
	            return regeneratorRuntime.async(function _tokenOperationRequest$(_context50) {
	                while (1) {
	                    switch (_context50.prev = _context50.next) {
	                        case 0:
	                            _context50.t0 = token.id;
	                            _context50.next = 3;
	                            return regeneratorRuntime.awrap(this._tokenOperationSignature(token.payload, suffix));

	                        case 3:
	                            _context50.t1 = _context50.sent;
	                            return _context50.abrupt("return", {
	                                tokenId: _context50.t0,
	                                signature: _context50.t1
	                            });

	                        case 5:
	                        case "end":
	                            return _context50.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }, {
	        key: "_tokenOperationSignature",
	        value: function _tokenOperationSignature(tokenPayload, suffix) {
	            var payload, signer;
	            return regeneratorRuntime.async(function _tokenOperationSignature$(_context51) {
	                while (1) {
	                    switch (_context51.prev = _context51.next) {
	                        case 0:
	                            payload = stringify(tokenPayload) + ("." + suffix);
	                            _context51.next = 3;
	                            return regeneratorRuntime.awrap(this.getSigner(_config2.default.KeyLevel.STANDARD));

	                        case 3:
	                            signer = _context51.sent;
	                            _context51.t0 = this._memberId;
	                            _context51.t1 = signer.getKeyId();
	                            _context51.next = 8;
	                            return regeneratorRuntime.awrap(signer.sign(payload));

	                        case 8:
	                            _context51.t2 = _context51.sent;
	                            return _context51.abrupt("return", {
	                                memberId: _context51.t0,
	                                keyId: _context51.t1,
	                                signature: _context51.t2
	                            });

	                        case 10:
	                        case "end":
	                            return _context51.stop();
	                    }
	                }
	            }, null, this);
	        }

	        //
	        // Transfers
	        //

	        /**
	         * Gets a transfer by id.
	         *
	         * @param {string} transferId - id of the transfer
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTransfer",
	        value: function getTransfer(transferId) {
	            var request;
	            return regeneratorRuntime.async(function getTransfer$(_context52) {
	                while (1) {
	                    switch (_context52.prev = _context52.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/transfers/" + transferId
	                            };
	                            return _context52.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context52.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets all transfers on a token.
	         *
	         * @param {string} tokenId - id of the token
	         * @param {string} offset - where to start
	         * @param {Number} limit - how many to get
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTransfers",
	        value: function getTransfers(tokenId, offset, limit) {
	            var request;
	            return regeneratorRuntime.async(function getTransfers$(_context53) {
	                while (1) {
	                    switch (_context53.prev = _context53.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/transfers?tokenId=" + tokenId + "&offset=" + offset + "&limit=" + limit
	                            };
	                            return _context53.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context53.stop();
	                    }
	                }
	            }, null, this);
	        }

	        //
	        // Directory
	        //

	        /**
	         * Adds a key to the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Object} key - key to add
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "approveKey",
	        value: function approveKey(prevHash, key) {
	            var update;
	            return regeneratorRuntime.async(function approveKey$(_context54) {
	                while (1) {
	                    switch (_context54.prev = _context54.next) {
	                        case 0:
	                            update = {
	                                memberId: this._memberId,
	                                operations: [{
	                                    addKey: {
	                                        key: _extends({
	                                            id: key.id,
	                                            publicKey: _Crypto2.default.strKey(key.publicKey),
	                                            level: key.level,
	                                            algorithm: key.algorithm
	                                        }, key.expiresAtMs && { expiresAtMs: key.expiresAtMs.toString() })
	                                    }
	                                }]
	                            };
	                            return _context54.abrupt("return", this._memberUpdate(update, prevHash));

	                        case 2:
	                        case "end":
	                            return _context54.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Adds keys to the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Array} keys - keys to add
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "approveKeys",
	        value: function approveKeys(prevHash, keys) {
	            var update;
	            return regeneratorRuntime.async(function approveKeys$(_context55) {
	                while (1) {
	                    switch (_context55.prev = _context55.next) {
	                        case 0:
	                            update = {
	                                memberId: this._memberId,
	                                operations: keys.map(function (key) {
	                                    return {
	                                        addKey: {
	                                            key: _extends({
	                                                id: key.id,
	                                                publicKey: _Crypto2.default.strKey(key.publicKey),
	                                                level: key.level,
	                                                algorithm: key.algorithm
	                                            }, key.expiresAtMs && { expiresAtMs: key.expiresAtMs.toString() })
	                                        }
	                                    };
	                                })
	                            };
	                            return _context55.abrupt("return", this._memberUpdate(update, prevHash));

	                        case 2:
	                        case "end":
	                            return _context55.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Removes a key from the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {string} keyId - keyId to remove
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "removeKey",
	        value: function removeKey(prevHash, keyId) {
	            var update;
	            return regeneratorRuntime.async(function removeKey$(_context56) {
	                while (1) {
	                    switch (_context56.prev = _context56.next) {
	                        case 0:
	                            update = {
	                                memberId: this._memberId,
	                                operations: [{
	                                    removeKey: {
	                                        keyId: keyId
	                                    }
	                                }]
	                            };
	                            return _context56.abrupt("return", this._memberUpdate(update, prevHash));

	                        case 2:
	                        case "end":
	                            return _context56.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Removes keys from the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Array} keyIds - keys to remove
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "removeKeys",
	        value: function removeKeys(prevHash, keyIds) {
	            var update;
	            return regeneratorRuntime.async(function removeKeys$(_context57) {
	                while (1) {
	                    switch (_context57.prev = _context57.next) {
	                        case 0:
	                            update = {
	                                memberId: this._memberId,
	                                operations: keyIds.map(function (keyId) {
	                                    return {
	                                        removeKey: {
	                                            keyId: keyId
	                                        }
	                                    };
	                                })
	                            };
	                            return _context57.abrupt("return", this._memberUpdate(update, prevHash));

	                        case 2:
	                        case "end":
	                            return _context57.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Adds an alias to the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Object} alias - alias to add
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "addAlias",
	        value: function addAlias(prevHash, alias, realm) {
	            return regeneratorRuntime.async(function addAlias$(_context58) {
	                while (1) {
	                    switch (_context58.prev = _context58.next) {
	                        case 0:
	                            return _context58.abrupt("return", this.addAliases(prevHash, [alias], realm));

	                        case 1:
	                        case "end":
	                            return _context58.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets logged-in member's aliases, verified or not.
	         *
	         * @return {Object} response object; has aliases, unverifiedAliases
	         */

	    }, {
	        key: "getAliases",
	        value: function getAliases() {
	            var request;
	            return regeneratorRuntime.async(function getAliases$(_context59) {
	                while (1) {
	                    switch (_context59.prev = _context59.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: '/aliases'
	                            };
	                            return _context59.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context59.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Get default recovery agent.
	         * @return {Object} GetDefaultAgentResponse proto buffer
	         */

	    }, {
	        key: "getDefaultRecoveryAgent",
	        value: function getDefaultRecoveryAgent() {
	            var request;
	            return regeneratorRuntime.async(function getDefaultRecoveryAgent$(_context60) {
	                while (1) {
	                    switch (_context60.prev = _context60.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: '/recovery/defaults/agent'
	                            };
	                            return _context60.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context60.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Set member's recovery rule.
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Object} rule - RecoveryRule proto buffer specifying behavior.
	         * @return {Object} UpdateMemberResponse proto buffer
	         */

	    }, {
	        key: "addRecoveryRule",
	        value: function addRecoveryRule(prevHash, rule) {
	            var update;
	            return regeneratorRuntime.async(function addRecoveryRule$(_context61) {
	                while (1) {
	                    switch (_context61.prev = _context61.next) {
	                        case 0:
	                            update = {
	                                memberId: this._memberId,
	                                operations: [{
	                                    recoveryRules: rule
	                                }]
	                            };
	                            return _context61.abrupt("return", this._memberUpdate(update, prevHash));

	                        case 2:
	                        case "end":
	                            return _context61.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Adds aliases to the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Array} aliases - aliases to add
	         * @param {string} realm - (optional) realm of the aliases
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "addAliases",
	        value: function addAliases(prevHash, aliases, realm) {
	            var update, metadata;
	            return regeneratorRuntime.async(function addAliases$(_context62) {
	                while (1) {
	                    switch (_context62.prev = _context62.next) {
	                        case 0:
	                            update = {
	                                memberId: this._memberId,
	                                operations: aliases.map(function (alias) {
	                                    return {
	                                        addAlias: {
	                                            aliasHash: _Util2.default.hashAndSerializeAlias(alias),
	                                            realm: realm
	                                        }
	                                    };
	                                })
	                            };
	                            metadata = aliases.map(function (alias) {
	                                return {
	                                    addAliasMetadata: {
	                                        aliasHash: _Util2.default.hashAndSerializeAlias(alias),
	                                        alias: alias,
	                                        realm: realm
	                                    }
	                                };
	                            });
	                            return _context62.abrupt("return", this._memberUpdate(update, prevHash, metadata));

	                        case 3:
	                        case "end":
	                            return _context62.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Removes an alias from the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Object} alias - alias to remove
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "removeAlias",
	        value: function removeAlias(prevHash, alias) {
	            return regeneratorRuntime.async(function removeAlias$(_context63) {
	                while (1) {
	                    switch (_context63.prev = _context63.next) {
	                        case 0:
	                            return _context63.abrupt("return", this.removeAliases(prevHash, [alias]));

	                        case 1:
	                        case "end":
	                            return _context63.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Removes aliases from the member.
	         *
	         * @param {string} prevHash - hash of the previous directory entry.
	         * @param {Array} aliases - aliases to remove
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "removeAliases",
	        value: function removeAliases(prevHash, aliases) {
	            var update;
	            return regeneratorRuntime.async(function removeAliases$(_context64) {
	                while (1) {
	                    switch (_context64.prev = _context64.next) {
	                        case 0:
	                            update = {
	                                memberId: this._memberId,
	                                operations: aliases.map(function (alias) {
	                                    return {
	                                        removeAlias: {
	                                            aliasHash: _Util2.default.hashAndSerializeAlias(alias)
	                                        }
	                                    };
	                                })
	                            };
	                            return _context64.abrupt("return", this._memberUpdate(update, prevHash));

	                        case 2:
	                        case "end":
	                            return _context64.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }, {
	        key: "_memberUpdate",
	        value: function _memberUpdate(update, prevHash, metadata) {
	            var signer, req, request;
	            return regeneratorRuntime.async(function _memberUpdate$(_context65) {
	                while (1) {
	                    switch (_context65.prev = _context65.next) {
	                        case 0:
	                            if (prevHash !== '') {
	                                update.prevHash = prevHash;
	                            }
	                            if (typeof metadata === "undefined") {
	                                metadata = [];
	                            }

	                            _context65.next = 4;
	                            return regeneratorRuntime.awrap(this.getSigner(_config2.default.KeyLevel.PRIVILEGED));

	                        case 4:
	                            signer = _context65.sent;
	                            _context65.t0 = update;
	                            _context65.t1 = this._memberId;
	                            _context65.t2 = signer.getKeyId();
	                            _context65.next = 10;
	                            return regeneratorRuntime.awrap(signer.signJson(update));

	                        case 10:
	                            _context65.t3 = _context65.sent;
	                            _context65.t4 = {
	                                memberId: _context65.t1,
	                                keyId: _context65.t2,
	                                signature: _context65.t3
	                            };
	                            _context65.t5 = metadata;
	                            req = {
	                                update: _context65.t0,
	                                updateSignature: _context65.t4,
	                                metadata: _context65.t5
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/members/" + this._memberId + "/updates",
	                                data: req
	                            };
	                            return _context65.abrupt("return", this._instance(request));

	                        case 16:
	                        case "end":
	                            return _context65.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Sign with a Token signature a token request state payload.
	         *
	         * @param {string} tokenId - token id
	         * @param {string} state - url state
	         * @return {Object} response - response to the api call
	         */

	    }, {
	        key: "signTokenRequestState",
	        value: function signTokenRequestState(tokenId, state) {
	            var req, request;
	            return regeneratorRuntime.async(function signTokenRequestState$(_context66) {
	                while (1) {
	                    switch (_context66.prev = _context66.next) {
	                        case 0:
	                            req = {
	                                payload: {
	                                    tokenId: tokenId,
	                                    state: state
	                                }
	                            };
	                            request = {
	                                method: 'put',
	                                url: "/sign-token-request-state",
	                                data: req
	                            };
	                            return _context66.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context66.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Deletes the member.
	         *
	         * @return {Object} response - response to the api call
	         */

	    }, {
	        key: "deleteMember",
	        value: function deleteMember() {
	            var request;
	            return regeneratorRuntime.async(function deleteMember$(_context67) {
	                while (1) {
	                    switch (_context67.prev = _context67.next) {
	                        case 0:
	                            this.useKeyLevel(_config2.default.KeyLevel.PRIVILEGED);
	                            request = {
	                                method: 'delete',
	                                url: "/members"
	                            };
	                            return _context67.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context67.stop();
	                    }
	                }
	            }, null, this);
	        }

	        //
	        // Test
	        //

	        /**
	         * Creates a test bank account.
	         *
	         * @param {Number} balance - balance to put in the account
	         * @param {string} currency - currency in the account
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "createTestBankAccount",
	        value: function createTestBankAccount(balance, currency) {
	            var req, request;
	            return regeneratorRuntime.async(function createTestBankAccount$(_context68) {
	                while (1) {
	                    switch (_context68.prev = _context68.next) {
	                        case 0:
	                            req = {
	                                balance: {
	                                    currency: currency,
	                                    value: balance
	                                }
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/test/create-account",
	                                data: req
	                            };
	                            return _context68.abrupt("return", this._instance(request));

	                        case 3:
	                        case "end":
	                            return _context68.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets test bank notification.
	         *
	         * @param {string} subscriberId - id of subscriber
	         * @param {string} notificationId - id of notification
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTestBankNotification",
	        value: function getTestBankNotification(subscriberId, notificationId) {
	            var request;
	            return regeneratorRuntime.async(function getTestBankNotification$(_context69) {
	                while (1) {
	                    switch (_context69.prev = _context69.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/test/subscribers/" + subscriberId + "/notifications/" + notificationId
	                            };
	                            return _context69.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context69.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Gets test bank notifications.
	         *
	         * @param {string} subscriberId - id of subscriber
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTestBankNotifications",
	        value: function getTestBankNotifications(subscriberId) {
	            var request;
	            return regeneratorRuntime.async(function getTestBankNotifications$(_context70) {
	                while (1) {
	                    switch (_context70.prev = _context70.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/test/subscribers/" + subscriberId + "/notifications"
	                            };
	                            return _context70.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context70.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return AuthHttpClient;
	}();

	exports.default = AuthHttpClient;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var stringify = __webpack_require__(6);

	/**
	 * Handles the addition of the http headers (with signature) to the request
	 */
	var AuthHeader = function () {
	    /**
	     * Creates an AuthHeader object with set url and signer
	     *
	     * @param {string} baseUrl - url to send requests to (gateway)
	     * @param {Object} client - client, to get the signer
	     */
	    function AuthHeader(baseUrl, client) {
	        _classCallCheck(this, AuthHeader);

	        this._baseUrl = baseUrl;
	        this._client = client;
	    }

	    /**
	     * Adds an authorization header to the request. This takes into account the url,
	     * payload of the request (with timestamp), to generate a message and signature.
	     * All of it goes into the Authorization http header.
	     *
	     * @param {string} memberId - memberId making the request
	     * @param {Object} request - request
	     * @param {AuthContext} context - auth context for access token redemption
	     */


	    _createClass(AuthHeader, [{
	        key: 'addAuthorizationHeader',
	        value: function addAuthorizationHeader(memberId, request, context) {
	            var now, uriPath, payload, signer, signature, header;
	            return regeneratorRuntime.async(function addAuthorizationHeader$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            now = new Date().getTime();

	                            // Parses out the base uri

	                            uriPath = request.url.replace(this._baseUrl, '');

	                            // Makes sure the uri is formatted correctly

	                            uriPath = uriPath.substring(0, 1) === '/' ? uriPath : uriPath + '/';
	                            uriPath = uriPath.substring(uriPath.length - 1) === '/' ? uriPath.substring(0, uriPath.length - 1) : uriPath;

	                            // Path should not include query parameters
	                            if (uriPath.indexOf("?") >= 0) {
	                                uriPath = uriPath.substring(0, uriPath.indexOf("?"));
	                            }

	                            // Creates the payload from the request info
	                            payload = {
	                                method: request.method.toUpperCase(),
	                                uriHost: this._baseUrl.replace('http://', '').replace('https://', ''),
	                                uriPath: uriPath,
	                                createdAtMs: now.toString()
	                            };


	                            if (request.data !== undefined && request.data !== '') {
	                                payload.requestBody = stringify(request.data);
	                            }

	                            // Signs the query string as well, if it exists
	                            if (request.url.indexOf("?") !== -1) {
	                                payload.queryString = request.url.substring(request.url.indexOf("?") + 1);
	                            }

	                            // Creates the signer object
	                            _context.next = 10;
	                            return regeneratorRuntime.awrap(this._client.getSigner(AuthHeader._keyLevel(context)));

	                        case 10:
	                            signer = _context.sent;
	                            _context.next = 13;
	                            return regeneratorRuntime.awrap(signer.signJson(payload));

	                        case 13:
	                            signature = _context.sent;


	                            // Creates the authorization header, ands adds it to the request
	                            header = _config2.default.signatureScheme + ' ' + 'member-id=' + memberId + ',' + 'key-id=' + signer.getKeyId() + ',' + 'signature=' + signature + ',' + 'created-at-ms=' + now + AuthHeader._onBehalfOfHeader(context) + AuthHeader._customerInitiated(context);


	                            request.headers = {
	                                Authorization: header
	                            };

	                        case 16:
	                        case 'end':
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }], [{
	        key: '_onBehalfOfHeader',
	        value: function _onBehalfOfHeader(context) {
	            if (context !== undefined && context.onBehalfOf !== undefined && context.onBehalfOf !== '') {
	                return ',on-behalf-of=' + context.onBehalfOf;
	            }
	            return '';
	        }
	    }, {
	        key: '_keyLevel',
	        value: function _keyLevel(context) {
	            // if we specified that this request should use a keyLevel > LOW, we notice that here
	            // (and re-set the keyLevel for the next request)
	            if (context !== undefined) {
	                var level = context.keyLevel;
	                context.keyLevel = _config2.default.KeyLevel.LOW;
	                return level;
	            }
	            return _config2.default.KeyLevel.LOW;
	        }
	    }, {
	        key: '_customerInitiated',
	        value: function _customerInitiated(context) {
	            // if the customer initiated request flag is set to true,
	            // we add it to the header, and reset the flag.
	            if (context && context.customerInitiated) {
	                context.customerInitiated = false;
	                return ',customer-initiated=true';
	            }
	            return '';
	        }
	    }]);

	    return AuthHeader;
	}();

	exports.default = AuthHeader;

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	module.exports = {
		"signatureScheme": "Token-Ed25519-SHA512",
		"urls": {
			"local": "http://localhost:8000",
			"dev": "https://api.dev.token.io",
			"stg": "https://api.stg.token.io",
			"sandbox": "https://api.sandbox.token.io",
			"int": "https://api.int.token.io",
			"prd": "https://api.token.io"
		},
		"webAppUrls": {
			"local": "http://localhost:5000",
			"dev": "https://web-app.dev.token.io",
			"stg": "https://web-app.stg.token.io",
			"sandbox": "https://web-app.sandbox.token.io",
			"int": "https://web-app.int.token.io",
			"prd": "https://web-app.token.io"
		},
		"transferTokenVersion": "1.0",
		"accessTokenVersion": "1.0",
		"defaultCurrency": "EUR",
		"decimalPrecision": 4,
		"corsDomainSuffix": ".token.io",
		"KeyLevel": {
			"PRIVILEGED": "PRIVILEGED",
			"STANDARD": "STANDARD",
			"LOW": "LOW"
		},
		"lowKeyExpiration": 1209600000,
		"devKey": {
			"local": "f3982819-5d8d-4123-9601-886df2780f42",
			"dev": "f3982819-5d8d-4123-9601-886df2780f42",
			"stg": "f3982819-5d8d-4123-9601-886df2780f42",
			"sandbox": "f3982819-5d8d-4123-9601-886df2780f42",
			"int": "f3982819-5d8d-4123-9601-886df2780f42",
			"prd": "f3982819-5d8d-4123-9601-886df2780f42"
		}
	};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Handles the auth context when using access tokens.
	 */
	var AuthContext = function () {
	    /**
	     * Creates an AuthContext object
	     */
	    function AuthContext() {
	        _classCallCheck(this, AuthContext);

	        this._onBehalfOf = undefined;
	        this._keyLevel = _config2.default.KeyLevel.LOW;
	        this._customerInitiated = false;
	    }

	    /**
	     * Sets the auth context to act on behalf of another member
	     *
	     * @param {string} onBehalfOf - accessTokenId to use
	     */


	    _createClass(AuthContext, [{
	        key: "onBehalfOf",
	        set: function set(onBehalfOf) {
	            this._onBehalfOf = onBehalfOf;
	        }

	        /**
	        * Sets the key level to be used to sign the auth header
	        *
	        * @param {string} keyLevel - key Level to use
	        */
	        ,


	        /**
	         * Gets the currently active memberId
	         *
	         * @return {string} onBehalfOf - accessTokenId being used
	         */
	        get: function get() {
	            return this._onBehalfOf;
	        }

	        /**
	         * Gets the key level
	         *
	         * @return {string} keyLevel - key level being used
	         */

	    }, {
	        key: "keyLevel",
	        set: function set(keyLevel) {
	            this._keyLevel = keyLevel === undefined ? _config2.default.KeyLevel.LOW : keyLevel;
	        }

	        /**
	         * Sets the auth context to indicate that the next api call
	         * would have been initiated by the customer.
	         *
	         * @param {boolean} flag - true if request initiated by customer
	         */
	        ,
	        get: function get() {
	            return this._keyLevel;
	        }

	        /**
	         * Gets the customer initiated request flag.
	         *
	         * @return {boolean} flag - true if request initiated by customer
	         */

	    }, {
	        key: "customerInitiated",
	        set: function set(flag) {
	            this._customerInitiated = flag;
	        },
	        get: function get() {
	            return this._customerInitiated;
	        }
	    }]);

	    return AuthContext;
	}();

	exports.default = AuthContext;

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * RPC error handler that facilitates handling cross-cutting API errors. Converts generic
	 * StatusRuntimeException instances into specific Exception types to be handled by the callers.
	 *
	 * The globalRpcErrorCallback is invoked with a {name, message} error object any time
	 * a custom RPC error occurs.
	 */
	var ErrorHandler = function () {
	    /**
	     * Creates the error handler instance.
	     *
	     * @param {function} globalRpcErrorCallback - callback to invoke on any cross-cutting RPC
	     * call error. For example: SDK version mismatch
	     */
	    function ErrorHandler(globalRpcErrorCallback) {
	        _classCallCheck(this, ErrorHandler);

	        this._globalRpcErrorCallback = globalRpcErrorCallback;
	    }

	    /**
	     * Handles RPC error and calls the globalRpcErrorCallback.
	     *
	     * @param {object} error - error to handle
	     * @return {object} error - original RPC error
	     */


	    _createClass(ErrorHandler, [{
	        key: 'handleError',
	        value: function handleError(error) {
	            if (error.response && error.response.headers) {
	                var tokenError = error.response.headers['token-error'];
	                var tokenErrorDetails = error.response.headers['token-error-details'];

	                if (tokenErrorDetails) {
	                    // Log optional error details to ease up troubleshooting.
	                    // Available only in non-prod deployments.
	                    console.log("Error details: ", tokenErrorDetails);
	                }

	                if (this._globalRpcErrorCallback) {
	                    var name = tokenError ? tokenError : 'UNKNOWN';
	                    var mappedError = {
	                        name: name,
	                        message: error.response.data
	                    };
	                    this._globalRpcErrorCallback(mappedError);
	                    return mappedError;
	                }
	            }
	            return error;
	        }
	    }]);

	    return ErrorHandler;
	}();

	exports.default = ErrorHandler;

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Class to add sdk developer key.
	 */
	var DeveloperHeader = function () {
	    /**
	     * Initializes the developer header with the developer key.
	     *
	     * @param {string} developerKey - the developer key, by default empty
	     */
	    function DeveloperHeader() {
	        var developerKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

	        _classCallCheck(this, DeveloperHeader);

	        this._developerKey = developerKey;
	    }

	    /**
	     * Adds the developer key to the request config if not empty.
	     *
	     * @param {Object} config - config of the request
	     */


	    _createClass(DeveloperHeader, [{
	        key: "addDeveloperHeader",
	        value: function addDeveloperHeader(config) {
	            if (this._developerKey === "") {
	                throw new ReferenceError("Please provide a developer key." + " Contact Token for more details.");
	            } else {
	                config.headers['token-dev-key'] = this._developerKey;
	            }
	        }
	    }]);

	    return DeveloperHeader;
	}();

	exports.default = DeveloperHeader;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Class to add sdk version and type.
	 */
	var VersionHeader = function () {
	  function VersionHeader() {
	    _classCallCheck(this, VersionHeader);
	  }

	  _createClass(VersionHeader, [{
	    key: 'addVersionHeader',

	    /**
	     * Adds the sdk type and version to the request config.
	     *
	     * @param {Object} config - config of the request
	     */
	    value: function addVersionHeader(config) {
	      config.headers['token-sdk'] = 'js';
	      config.headers['token-sdk-version'] = ("1.5.19");
	    }
	  }]);

	  return VersionHeader;
	}();

	exports.default = VersionHeader;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(47);

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);
	var bind = __webpack_require__(49);
	var Axios = __webpack_require__(50);

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance();

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Factory for creating new instances
	axios.create = function create(defaultConfig) {
	  return createInstance(defaultConfig);
	};

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(67);

	module.exports = axios;

	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(49);

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object field_size.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 49 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(51);
	var utils = __webpack_require__(48);
	var InterceptorManager = __webpack_require__(53);
	var dispatchRequest = __webpack_require__(54);
	var isAbsoluteURL = __webpack_require__(65);
	var combineURLs = __webpack_require__(66);

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 */
	function Axios(defaultConfig) {
	  this.defaults = utils.merge(defaults, defaultConfig);
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	module.exports = Axios;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);
	var normalizeHeaderName = __webpack_require__(52);

	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	module.exports = {
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*'
	    },
	    patch: utils.merge(DEFAULT_CONTENT_TYPE),
	    post: utils.merge(DEFAULT_CONTENT_TYPE),
	    put: utils.merge(DEFAULT_CONTENT_TYPE)
	  },

	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);

	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(48);
	var transformData = __webpack_require__(55);

	/**
	 * Dispatch a request to the server using whichever adapter
	 * is supported by the current environment.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter;

	  if (typeof config.adapter === 'function') {
	    // For custom adapter support
	    adapter = config.adapter;
	  } else if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(56);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(56);
	  }

	  return Promise.resolve(config)
	    // Wrap synchronous adapter errors and pass configuration
	    .then(adapter)
	    .then(function onFulfilled(response) {
	      // Transform response data
	      response.data = transformData(
	        response.data,
	        response.headers,
	        config.transformResponse
	      );

	      return response;
	    }, function onRejected(error) {
	      // Transform response data
	      if (error && error.response) {
	        error.response.data = transformData(
	          error.response.data,
	          error.response.headers,
	          config.transformResponse
	        );
	      }

	      return Promise.reject(error);
	    });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(48);
	var settle = __webpack_require__(57);
	var buildURL = __webpack_require__(60);
	var parseHeaders = __webpack_require__(61);
	var isURLSameOrigin = __webpack_require__(62);
	var createError = __webpack_require__(58);
	var btoa = (typeof window !== 'undefined' && window.btoa) || __webpack_require__(63);

	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;

	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing field_size/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }

	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      if (request.status === 0) {
	        return;
	      }

	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(64);

	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }

	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        if (request.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }


	    if (requestData === undefined) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var createError = __webpack_require__(58);

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response
	    ));
	  }
	};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var enhanceError = __webpack_require__(59);

	/**
	 * Create an Error with the specified message, config, error code, and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, response);
	};


/***/ }),
/* 59 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.response = response;
	  return error;
	};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }

	      if (!utils.isArray(val)) {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 63 */
/***/ (function(module, exports) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(48);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 65 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ }),
/* 67 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(48);
	var buildURL = __webpack_require__(60);
	var isURLSameOrigin = __webpack_require__(62);
	var btoa = typeof window !== 'undefined' && window.btoa || __webpack_require__(63);

	/**
	 * Axios adapter to create a blocking XMLHttpRequest
	 * @param  {Object} config  configuration for the request
	 * @return {Promise}        response - response object with a 'dispatchRequest' function
	 *                          to trigger the blocking request
	 */
	module.exports = function BlockingAdapter(config) {
	  if (typeof XMLHttpRequest === 'undefined' && typeof process !== 'undefined') {
	    // for node ignore request
	    return new Promise(function ignoreRequest(resolve) {
	      resolve({
	        data: {
	          dispatchRequest: function dispatchRequest() {
	            // Send the request
	            throw new Error('BlockingAdapter does not support node.js');
	          }
	        }
	      });
	    });
	  }
	  var requestData = config.data;
	  var requestHeaders = config.headers;

	  if (utils.isFormData(requestData)) {
	    delete requestHeaders['Content-Type']; // Let the browser set it
	  }

	  var request = new XMLHttpRequest();

	  // For IE 8/9 CORS support
	  // Only supports POST and GET calls and doesn't returns the response headers.
	  // DON'T do this for testing field_size/c XMLHttpRequest is mocked, not XDomainRequest.
	  if (typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
	    request = new window.XDomainRequest();
	  }

	  // HTTP basic authentication
	  if (config.auth) {
	    var username = config.auth.username || '';
	    var password = config.auth.password || '';
	    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	  }

	  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), false);

	  // Add xsrf header
	  // This is only done if running in a standard browser environment.
	  // Specifically not if we're in a web worker, or react-native.
	  if (utils.isStandardBrowserEnv()) {
	    var cookies = __webpack_require__(64);

	    // Add xsrf header
	    var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

	    if (xsrfValue) {
	      requestHeaders[config.xsrfHeaderName] = xsrfValue;
	    }
	  }

	  // Add headers to the request
	  if ('setRequestHeader' in request) {
	    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	        // Remove Content-Type if data is undefined
	        delete requestHeaders[key];
	      } else {
	        // Otherwise add header to the request
	        request.setRequestHeader(key, val);
	      }
	    });
	  }

	  // Add withCredentials to request if needed
	  if (config.withCredentials) {
	    request.withCredentials = true;
	  }

	  // Add responseType to request if needed
	  if (config.responseType) {
	    try {
	      request.responseType = config.responseType;
	    } catch (e) {
	      if (request.responseType !== 'json') {
	        throw e;
	      }
	    }
	  }

	  if (requestData === undefined) {
	    requestData = null;
	  }

	  // Return a promise with 'dispatchRequest' function to execute the synchronous call
	  return new Promise(function dispatchXhrRequest(resolve) {
	    resolve({
	      data: {
	        dispatchRequest: function dispatchRequest() {
	          // Send the request
	          var res = request.send(requestData);
	          return res;
	        }
	      }
	    });
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	var _Crypto = __webpack_require__(5);

	var _Crypto2 = _interopRequireDefault(_Crypto);

	var _ErrorHandler = __webpack_require__(43);

	var _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);

	var _DeveloperHeader = __webpack_require__(44);

	var _DeveloperHeader2 = _interopRequireDefault(_DeveloperHeader);

	var _VersionHeader = __webpack_require__(45);

	var _VersionHeader2 = _interopRequireDefault(_VersionHeader);

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var axios = __webpack_require__(46);

	/**
	 * Client to make unauthenticated requests to the Token gateway.
	 */

	var HttpClient = function () {
	    /**
	     * Creates the client with the given environment.
	     *
	     * @param {string} env - environment to point to, like 'prd'
	     * @param {string} developerKey - the developer key
	     * @param {function} globalRpcErrorCallback - callback to invoke on any cross-cutting RPC
	     * @param {bool} loggingEnabled - enable HTTP error logging if true
	     * call error. For example: SDK version mismatch
	     * @param {string} customSdkUrl - set to override the default sdk url
	     */
	    function HttpClient(env, developerKey, globalRpcErrorCallback, loggingEnabled, customSdkUrl) {
	        _classCallCheck(this, HttpClient);

	        if (!(_config2.default.urls[env] || customSdkUrl)) {
	            throw new Error('Invalid environment string. Please use one of: ' + JSON.stringify(_config2.default.urls));
	        }
	        this._instance = axios.create({
	            baseURL: customSdkUrl || _config2.default.urls[env]
	        });
	        if (loggingEnabled) {
	            _Util2.default.setUpHttpErrorLogging(this._instance);
	        }

	        var versionHeader = new _VersionHeader2.default();
	        var developerHeader = new _DeveloperHeader2.default(developerKey);
	        this._instance.interceptors.request.use(function (request) {
	            versionHeader.addVersionHeader(request);
	            developerHeader.addDeveloperHeader(request);
	            return request;
	        });

	        var errorHandler = new _ErrorHandler2.default(globalRpcErrorCallback);
	        this._instance.interceptors.response.use(null, function (error) {
	            throw errorHandler.handleError(error);
	        });
	    }

	    /**
	     * Creates a memberId.
	     *
	     * @param  {string} memberType - type of member to create. "PERSONAL" if undefined
	     * @return {Object} response - response to the API call
	     */


	    _createClass(HttpClient, [{
	        key: "createMemberId",
	        value: function createMemberId(memberType) {
	            if (memberType === undefined) {
	                memberType = "PERSONAL";
	            }
	            var req = {
	                memberType: memberType
	            };
	            var request = {
	                method: 'post',
	                url: '/members',
	                data: req
	            };
	            return this._instance(request);
	        }

	        /**
	         * Gets a member given an alias and a realm.
	         *
	         * @param {Object} alias - alias to lookup
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "resolveAlias",
	        value: function resolveAlias(alias) {
	            var realm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	            var request = {
	                method: 'get',
	                url: "/resolve-alias?value=" + alias.value + "&type=" + alias.type + "&realm=" + realm
	            };
	            return this._instance(request);
	        }

	        /**
	         * Gets the member's information.
	         *
	         * @param {string} memberId - member id to lookup the member for
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getMember",
	        value: function getMember(memberId) {
	            var request = {
	                method: 'get',
	                url: "/members/" + memberId
	            };
	            return this._instance(request);
	        }

	        /**
	         * Notifies a user.
	         *
	         * @param {Object} alias - user to notify
	         * @param {Object} body - body of the notification
	         * @param {string} realm - (optional) realm of the alias
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "notify",
	        value: function notify(alias, body, realm) {
	            var req = {
	                alias: alias,
	                body: body,
	                realm: realm
	            };
	            var request = {
	                method: 'post',
	                url: "/notify",
	                data: req
	            };
	            return this._instance(request);
	        }

	        /**
	         * Approve a first key for a member (self signed).
	         *
	         * @param {string} memberId - id of the member
	         * @param {Object} key - key to approve
	         * @param {Object} cryptoEngine - engine to use for signing
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "approveFirstKey",
	        value: function approveFirstKey(memberId, key, cryptoEngine) {
	            var signer, update, req, request;
	            return regeneratorRuntime.async(function approveFirstKey$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _context.next = 2;
	                            return regeneratorRuntime.awrap(cryptoEngine.createSigner(_config2.default.KeyLevel.PRIVILEGED));

	                        case 2:
	                            signer = _context.sent;
	                            update = {
	                                memberId: memberId,
	                                operations: [{
	                                    addKey: {
	                                        key: _extends({
	                                            id: key.id,
	                                            publicKey: _Crypto2.default.strKey(key.publicKey),
	                                            level: key.level,
	                                            algorithm: key.algorithm
	                                        }, key.expiresAtMs && { expiresAtMs: key.expiresAtMs })
	                                    }
	                                }]
	                            };
	                            _context.t0 = update;
	                            _context.t1 = memberId;
	                            _context.t2 = signer.getKeyId();
	                            _context.next = 9;
	                            return regeneratorRuntime.awrap(signer.signJson(update));

	                        case 9:
	                            _context.t3 = _context.sent;
	                            _context.t4 = {
	                                memberId: _context.t1,
	                                keyId: _context.t2,
	                                signature: _context.t3
	                            };
	                            req = {
	                                update: _context.t0,
	                                updateSignature: _context.t4
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/members/" + memberId + "/updates",
	                                data: req
	                            };
	                            return _context.abrupt("return", this._instance(request));

	                        case 14:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Approve the first keys for a member (self signed).
	         *
	         * @param {string} memberId - id of the member
	         * @param {Array} keys - keys to approve
	         * @param {Object} cryptoEngine - engine to use for signing
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "approveFirstKeys",
	        value: function approveFirstKeys(memberId, keys, cryptoEngine) {
	            var signer, update, req, request;
	            return regeneratorRuntime.async(function approveFirstKeys$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            _context2.next = 2;
	                            return regeneratorRuntime.awrap(cryptoEngine.createSigner(_config2.default.KeyLevel.PRIVILEGED));

	                        case 2:
	                            signer = _context2.sent;
	                            update = {
	                                memberId: memberId,
	                                operations: keys.map(function (key) {
	                                    return {
	                                        addKey: {
	                                            key: _extends({
	                                                id: key.id,
	                                                publicKey: _Crypto2.default.strKey(key.publicKey),
	                                                level: key.level,
	                                                algorithm: key.algorithm
	                                            }, key.expiresAtMs && { expiresAtMs: key.expiresAtMs })
	                                        }
	                                    };
	                                })
	                            };
	                            _context2.t0 = update;
	                            _context2.t1 = memberId;
	                            _context2.t2 = signer.getKeyId();
	                            _context2.next = 9;
	                            return regeneratorRuntime.awrap(signer.signJson(update));

	                        case 9:
	                            _context2.t3 = _context2.sent;
	                            _context2.t4 = {
	                                memberId: _context2.t1,
	                                keyId: _context2.t2,
	                                signature: _context2.t3
	                            };
	                            req = {
	                                update: _context2.t0,
	                                updateSignature: _context2.t4
	                            };
	                            request = {
	                                method: 'post',
	                                url: "/members/" + memberId + "/updates",
	                                data: req
	                            };
	                            return _context2.abrupt("return", this._instance(request));

	                        case 14:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Sends a notification to a user to request a payment.
	         *
	         * @param {Object} tokenPayload - requested transfer token
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "notifyPaymentRequest",
	        value: function notifyPaymentRequest(tokenPayload) {
	            var req = {
	                tokenPayload: tokenPayload
	            };
	            var request = {
	                method: 'post',
	                url: "/request-transfer",
	                data: req
	            };
	            return this._instance(request);
	        }

	        /**
	         * Notifies subscribed devices that a token payload should be endorsed and keys should be
	         * added.
	         *
	         * @param {Object} endorseAndAddKey - the endorseAndAddKey payload to be sent
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "notifyEndorseAndAddKey",
	        value: function notifyEndorseAndAddKey(endorseAndAddKey) {
	            var req = {
	                endorseAndAddKey: endorseAndAddKey
	            };
	            var request = {
	                method: 'post',
	                url: "/notify/endorse-and-add-key",
	                data: req
	            };
	            return this._instance(request);
	        }

	        /**
	         * Invalidate a notification.
	         *
	         * @param {Object} notificationId - the notification id to invalidate
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "invalidateNotification",
	        value: function invalidateNotification(notificationId) {
	            var req = {
	                notificationId: notificationId
	            };
	            var request = {
	                method: 'post',
	                url: "/notify/invalidate-notification",
	                data: req
	            };
	            return this._instance(request);
	        }

	        /**
	         * Gets banks.
	         *
	         * @param {Object} options - optional parameters for getBanks
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getBanks",
	        value: function getBanks() {
	            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	            var formattedOptions, ids, search, country, page, perPage, provider, url, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, id, request;

	            return regeneratorRuntime.async(function getBanks$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            formattedOptions = Object.assign({}, {
	                                // Can be at most 1000
	                                ids: options.ids || [],
	                                search: options.search || '',
	                                country: options.country || '',
	                                // Default to 1 if not specified
	                                page: options.page,
	                                // Can be at most 200, default to 200 if not specified
	                                perPage: options.perPage,
	                                // Optional provider
	                                provider: options.provider || ''
	                            });
	                            ids = formattedOptions.ids, search = formattedOptions.search, country = formattedOptions.country, page = formattedOptions.page, perPage = formattedOptions.perPage, provider = formattedOptions.provider;
	                            url = "/banks?";
	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context3.prev = 6;

	                            for (_iterator = ids[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                                id = _step.value;

	                                url += "ids=" + encodeURIComponent(id) + "&";
	                            }
	                            _context3.next = 14;
	                            break;

	                        case 10:
	                            _context3.prev = 10;
	                            _context3.t0 = _context3["catch"](6);
	                            _didIteratorError = true;
	                            _iteratorError = _context3.t0;

	                        case 14:
	                            _context3.prev = 14;
	                            _context3.prev = 15;

	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }

	                        case 17:
	                            _context3.prev = 17;

	                            if (!_didIteratorError) {
	                                _context3.next = 20;
	                                break;
	                            }

	                            throw _iteratorError;

	                        case 20:
	                            return _context3.finish(17);

	                        case 21:
	                            return _context3.finish(14);

	                        case 22:
	                            if (search) url += "search=" + encodeURIComponent(search) + "&";
	                            if (country) url += "country=" + encodeURIComponent(country) + "&";
	                            if (page) url += "page=" + encodeURIComponent(page) + "&";
	                            if (perPage) url += "perPage=" + encodeURIComponent(perPage) + "&";
	                            if (provider) url += "provider=" + encodeURIComponent(provider) + "&";
	                            request = {
	                                method: 'get',
	                                url: url
	                            };
	                            return _context3.abrupt("return", this._instance(request));

	                        case 29:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, null, this, [[6, 10, 14, 22], [15,, 17, 21]]);
	        }

	        /**
	         * Retrieves a request for a token. Called by the web(user) or by a TPP, to get request details.
	         *
	         * @param {string} requestId - token request id
	         * @return {Promise} response - response to the API call
	         */

	    }, {
	        key: "retrieveTokenRequest",
	        value: function retrieveTokenRequest(requestId) {
	            var request;
	            return regeneratorRuntime.async(function retrieveTokenRequest$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/token-requests/" + requestId
	                            };
	                            return _context4.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Returns the Token member.
	         *
	         * @return {Promise} response - response to the API call
	         */

	    }, {
	        key: "getTokenMember",
	        value: function getTokenMember() {
	            var resolveAliasRes, tokenMemberId, getMemberRes;
	            return regeneratorRuntime.async(function getTokenMember$(_context5) {
	                while (1) {
	                    switch (_context5.prev = _context5.next) {
	                        case 0:
	                            _context5.next = 2;
	                            return regeneratorRuntime.awrap(this.resolveAlias(_Util2.default.tokenAlias(), _Util2.default.tokenRealm()));

	                        case 2:
	                            resolveAliasRes = _context5.sent;
	                            tokenMemberId = resolveAliasRes.data.member.id;
	                            _context5.next = 6;
	                            return regeneratorRuntime.awrap(this.getMember(tokenMemberId));

	                        case 6:
	                            getMemberRes = _context5.sent;
	                            return _context5.abrupt("return", getMemberRes.data.member);

	                        case 8:
	                        case "end":
	                            return _context5.stop();
	                    }
	                }
	            }, null, this);
	        }

	        /**
	         * Get a token ID based on its token request ID.
	         *
	         * @param {string} tokenRequestId - token request id
	         * @return {Object} response - response to the API call
	         */

	    }, {
	        key: "getTokenId",
	        value: function getTokenId(tokenRequestId) {
	            var request;
	            return regeneratorRuntime.async(function getTokenId$(_context6) {
	                while (1) {
	                    switch (_context6.prev = _context6.next) {
	                        case 0:
	                            request = {
	                                method: 'get',
	                                url: "/token-requests/" + tokenRequestId + "/token_id"
	                            };
	                            return _context6.abrupt("return", this._instance(request));

	                        case 2:
	                        case "end":
	                            return _context6.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return HttpClient;
	}();

	exports.default = HttpClient;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TransferTokenBuilder = function () {

	    /**
	     * Represents a Builder for a transfer token.
	     *
	     * @constructor
	     * @param {Object} client - The http client to use for the API call
	     * @param {Object} member - member performing the request
	     * @param {number} lifetimeAmount - the lifetime amount of the token
	     * @param {string} currency - currency of the token
	     */
	    function TransferTokenBuilder(client, member, lifetimeAmount, currency) {
	        _classCallCheck(this, TransferTokenBuilder);

	        this._client = client;
	        this._member = member;
	        this._blobPayloads = [];
	        this._tokenRequestId = "";

	        if (_Util2.default.countDecimals(lifetimeAmount) > _config2.default.decimalPrecision) {
	            throw new Error('Number of decimals in lifetimeAmount should be at most ' + _config2.default.decimalPrecision);
	        }

	        this._payload = {
	            version: _config2.default.transferTokenVersion,
	            refId: _Util2.default.generateNonce(),
	            transfer: {
	                currency: currency,
	                lifetimeAmount: lifetimeAmount.toString(),
	                instructions: {
	                    destinations: [],
	                    metadata: {}
	                },
	                redeemer: {},
	                attachments: []
	            }
	        };
	    }

	    /**
	     * Sets the fromId of the token
	     *
	     * @param {string} memberId - from memberId
	     * @return {TransferTokenBuilder} builder - returns back the builder object
	     */


	    _createClass(TransferTokenBuilder, [{
	        key: "setFromId",
	        value: function setFromId(memberId) {
	            if (!this._payload.from) {
	                this._payload.from = {};
	            }
	            this._payload.from.id = memberId;
	            return this;
	        }

	        /**
	         * Sets the source accountId of the token.
	         *
	         * @param {string} accountId - source accountId
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setAccountId",
	        value: function setAccountId(accountId) {
	            this._payload.transfer.instructions.source = {
	                account: {
	                    token: {
	                        memberId: this._member.memberId(),
	                        accountId: accountId
	                    }
	                }
	            };
	            return this;
	        }

	        /**
	         * Sets the source custom authorization.
	         *
	         * @param {string} bankId - source bank id
	         * @param {string} authorization - source custom authorization
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setCustomAuthorization",
	        value: function setCustomAuthorization(bankId, authorization) {
	            this._payload.transfer.instructions.source = {
	                account: {
	                    custom: {
	                        bankId: bankId,
	                        payload: authorization
	                    }
	                }
	            };
	            return this;
	        }

	        /**
	         * Sets the source bank authorization.
	         *
	         * @param {Object} authorization - bank authorization for source account
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setBankAuthorization",
	        value: function setBankAuthorization(authorization) {
	            this._payload.transfer.instructions.source = {
	                account: {
	                    tokenAuthorization: {
	                        authorization: authorization
	                    }
	                }
	            };
	            return this;
	        }

	        /**
	         * Sets the expiration date of the token.
	         *
	         * @param {number} expiresAtMs - expiration date in milliseconds
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setExpiresAtMs",
	        value: function setExpiresAtMs(expiresAtMs) {
	            this._payload.expiresAtMs = expiresAtMs;
	            return this;
	        }

	        /**
	         * Sets the endorse token timeout.
	         *
	         * @param {number} endorseUntilMs - time at which no more endorsements can be made
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setEndorseUntilMs",
	        value: function setEndorseUntilMs(endorseUntilMs) {
	            this._payload.endorseUntilMs = endorseUntilMs;
	            return this;
	        }

	        /**
	         * Sets the effective date of the token.
	         *
	         * @param {number} effectiveAtMs - effective date in milliseconds
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setEffectiveAtMs",
	        value: function setEffectiveAtMs(effectiveAtMs) {
	            this._payload.effectiveAtMs = effectiveAtMs;
	            return this;
	        }

	        /**
	         * Sets the maximum charge amount of the token.
	         *
	         * @param {number} chargeAmount - maximum charge amount.
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setChargeAmount",
	        value: function setChargeAmount(chargeAmount) {
	            if (_Util2.default.countDecimals(chargeAmount) > _config2.default.decimalPrecision) {
	                throw new Error('Number of decimals in amount should be at most ' + _config2.default.decimalPrecision);
	            }
	            this._payload.transfer.amount = chargeAmount;
	            return this;
	        }

	        /**
	         * Sets the description of the token.
	         *
	         * @param {string} description - description
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setDescription",
	        value: function setDescription(description) {
	            this._payload.description = description;
	            return this;
	        }

	        /**
	         * Add a transfer destination to the token.
	         *
	         * @param {object} endpoint - transfer endpoint
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "addDestination",
	        value: function addDestination(endpoint) {
	            this._payload.transfer.instructions.destinations.push(endpoint);
	            return this;
	        }

	        /**
	         * Sets the alias of the redeemer.
	         *
	         * @param {Object} redeemerAlias - alias of the redeemer
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setRedeemerAlias",
	        value: function setRedeemerAlias(redeemerAlias) {
	            this._payload.transfer.redeemer.alias = redeemerAlias;
	            return this;
	        }

	        /**
	         * Sets the realm of the redeemer.
	         *
	         * @param {string} redeemerRealm - realm of the redeemer
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setRedeemerRealm",
	        value: function setRedeemerRealm(redeemerRealm) {
	            this._payload.transfer.redeemer.realm = redeemerRealm;
	            return this;
	        }

	        /**
	         * Sets the memberId of the redeemer.
	         *
	         * @param {Object} redeemerMemberId - memberId of the redeemer
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setRedeemerMemberId",
	        value: function setRedeemerMemberId(redeemerMemberId) {
	            this._payload.transfer.redeemer.id = redeemerMemberId;
	            return this;
	        }

	        /**
	         * Sets the alias of the payee.
	         *
	         * @param {Object} toAlias - alias of the payee
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setToAlias",
	        value: function setToAlias(toAlias) {
	            if (!this._payload.to) {
	                this._payload.to = {};
	            }
	            this._payload.to.alias = toAlias;
	            return this;
	        }

	        /**
	         * Sets the realm of the payee.
	         *
	         * @param {string} toRealm - realm of the payee
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setToRealm",
	        value: function setToRealm(toRealm) {
	            if (!this._payload.to) {
	                this._payload.to = {};
	            }
	            this._payload.to.realm = toRealm;
	            return this;
	        }

	        /**
	         * Sets the memberId of the payee.
	         *
	         * @param {string} toMemberId - memberId of the payee
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setToMemberId",
	        value: function setToMemberId(toMemberId) {
	            if (!this._payload.to) {
	                this._payload.to = {};
	            }
	            this._payload.to.id = toMemberId;
	            return this;
	        }

	        /**
	         * Adds an attachment to the token.
	         *
	         * @param {Object} attachment - attachment (metadata).
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "addAttachment",
	        value: function addAttachment(attachment) {
	            this._payload.transfer.attachments.push(attachment);
	            return this;
	        }

	        /**
	         * Adds an attachment to the token, with the data.
	         *
	         * @param {string} ownerId - memberId of the owner of the file
	         * @param {string} type - MIME type of the file
	         * @param {string} name - name of the file
	         * @param {Buffer} data - byte array of the data of the file
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "addAttachmentData",
	        value: function addAttachmentData(ownerId, type, name, data) {
	            this._blobPayloads.push({
	                ownerId: ownerId,
	                type: type,
	                name: name,
	                data: data
	            });
	            return this;
	        }

	        /**
	         * Sets the pricing (fees/fx) of the token.
	         *
	         * @param {Object} pricing - pricing of the token
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setPricing",
	        value: function setPricing(pricing) {
	            this._payload.transfer.pricing = pricing;
	            return this;
	        }

	        /**
	         * Sets the purpose of payment of the token.
	         *
	         * @param {string} purposeOfPayment - purpose of payment
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setPurposeOfPayment",
	        value: function setPurposeOfPayment(purposeOfPayment) {
	            this._payload.transfer.instructions.metadata.transferPurpose = purposeOfPayment;
	            return this;
	        }

	        /**
	         * Sets the refId on the token.
	         *
	         * @param {string} refId - client generated reference id, at most 18 characters long.
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setRefId",
	        value: function setRefId(refId) {
	            if (refId.length > 18) {
	                throw new Error('The length of the refId is at most 18, got: ' + refId.length);
	            }
	            this._payload.refId = refId;
	            return this;
	        }

	        /**
	         * Sets acting as on the token.
	         *
	         * @param {Object} actingAs - entity the redeemer is acting on behalf of
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setActingAs",
	        value: function setActingAs(actingAs) {
	            this._payload.actingAs = actingAs;
	            return this;
	        }

	        /**
	         * Sets the token request ID.
	         *
	         * @param {string} tokenRequestId - token request id
	         * @return {TransferTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setTokenRequestId",
	        value: function setTokenRequestId(tokenRequestId) {
	            this._tokenRequestId = tokenRequestId;
	            return this;
	        }

	        /**
	         *  Sets the flag indicating whether a receipt is requested.
	         *
	         * @param {boolean} receiptRequested receipt requested flag
	         * @return {TransferTokenBuilder} builder
	         */

	    }, {
	        key: "setReceiptRequested",
	        value: function setReceiptRequested(receiptRequested) {
	            this._payload.receiptRequested = receiptRequested;
	            return this;
	        }

	        /**
	         * Builds the token payload.
	         *
	         * @return {Object} tokenPayload - token payload
	         */

	    }, {
	        key: "build",
	        value: function build() {
	            return this._payload;
	        }

	        /**
	         * Executes the createToken API call to the server, and returns a promise with the token.
	         *
	         * @return {Promise} token - the created and filled transfer token
	         */

	    }, {
	        key: "execute",
	        value: function execute() {
	            var _this = this;

	            return regeneratorRuntime.async(function execute$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            return _context2.abrupt("return", _Util2.default.callAsync(this.execute, function _callee() {
	                                var i, payload, attachment, res, error;
	                                return regeneratorRuntime.async(function _callee$(_context) {
	                                    while (1) {
	                                        switch (_context.prev = _context.next) {
	                                            case 0:
	                                                if (!(!_this._payload.transfer.instructions.source || !_this._payload.transfer.instructions.source.account.token && !_this._payload.transfer.instructions.source.account.tokenAuthorization && !_this._payload.transfer.instructions.source.account.bank && !_this._payload.transfer.instructions.source.account.custom)) {
	                                                    _context.next = 2;
	                                                    break;
	                                                }

	                                                throw new Error('No source on token');

	                                            case 2:
	                                                if (!(!_this._payload.transfer.redeemer.alias && !_this._payload.transfer.redeemer.id)) {
	                                                    _context.next = 4;
	                                                    break;
	                                                }

	                                                throw new Error('No redeemer on token');

	                                            case 4:
	                                                i = 0;

	                                            case 5:
	                                                if (!(i < _this._blobPayloads.length)) {
	                                                    _context.next = 14;
	                                                    break;
	                                                }

	                                                payload = _this._blobPayloads[i];
	                                                _context.next = 9;
	                                                return regeneratorRuntime.awrap(_this._member.createBlob(payload.ownerId, payload.type, payload.name, payload.data));

	                                            case 9:
	                                                attachment = _context.sent;

	                                                _this.addAttachment(attachment);

	                                            case 11:
	                                                i++;
	                                                _context.next = 5;
	                                                break;

	                                            case 14:
	                                                _context.next = 16;
	                                                return regeneratorRuntime.awrap(_this._client.createTransferToken(_this._payload, _this._tokenRequestId));

	                                            case 16:
	                                                res = _context.sent;

	                                                if (!(res.data.status === "FAILURE_EXTERNAL_AUTHORIZATION_REQUIRED")) {
	                                                    _context.next = 21;
	                                                    break;
	                                                }

	                                                error = new Error("FAILURE_EXTERNAL_AUTHORIZATION_REQUIRED");

	                                                error.authorizationDetails = res.data.authorizationDetails;
	                                                throw error;

	                                            case 21:
	                                                if (!(res.data.status !== "SUCCESS")) {
	                                                    _context.next = 23;
	                                                    break;
	                                                }

	                                                throw new Error(res.data.status);

	                                            case 23:
	                                                return _context.abrupt("return", res.data.token);

	                                            case 24:
	                                            case "end":
	                                                return _context.stop();
	                                        }
	                                    }
	                                }, null, _this);
	                            }));

	                        case 1:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return TransferTokenBuilder;
	}();

	exports.default = TransferTokenBuilder;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Util = __webpack_require__(11);

	var _Util2 = _interopRequireDefault(_Util);

	var _config = __webpack_require__(41);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var AccessTokenBuilder = function () {
	    /**
	     * Represents a Builder for a transfer token.
	     *
	     * @constructor
	     * @param {Object} client - The http client to use for the API call
	     * @param {Object} member - member performing the request
	     * @param {Array} resources - the resources to give access to
	     */
	    function AccessTokenBuilder(client, member, resources) {
	        _classCallCheck(this, AccessTokenBuilder);

	        this._client = client;
	        this._member = member;
	        this._tokenRequestId = "";

	        this._payload = {
	            version: _config2.default.accessTokenVersion,
	            refId: _Util2.default.generateNonce(),
	            access: {
	                resources: resources
	            }
	        };
	    }

	    /**
	    * Adds a from id.
	    *
	    * @param {String} memberId - fromId
	    * @return {AccessTokenBuilder} builder - returns back the builder object
	    */


	    _createClass(AccessTokenBuilder, [{
	        key: "setFromId",
	        value: function setFromId(memberId) {
	            if (!this._payload.from) {
	                this._payload.from = {};
	            }
	            this._payload.from.id = memberId;
	            return this;
	        }

	        /**
	         * Adds a resource for all addresses.
	         *
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAllAddresses",
	        value: function forAllAddresses() {
	            this._payload.access.resources.push({
	                allAddresses: {}
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for one adress.
	         * @param {String} addressId - id of the address
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAddress",
	        value: function forAddress(addressId) {
	            this._payload.access.resources.push({
	                address: {
	                    addressId: addressId
	                }
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for metadata of all accounts.
	         *
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAllAccounts",
	        value: function forAllAccounts() {
	            this._payload.access.resources.push({
	                allAccounts: {}
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for metadata of all accounts at a given bank.
	         *
	         * @param {String} bankId - id of the bank
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAllAccountsAtBank",
	        value: function forAllAccountsAtBank(bankId) {
	            this._payload.access.resources.push({
	                allAccountsAtBank: {
	                    bankId: bankId
	                }
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for metadata of one account.
	         *
	         * @param {String} accountId - id of the account
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAccount",
	        value: function forAccount(accountId) {
	            this._payload.access.resources.push({
	                account: {
	                    accountId: accountId
	                }
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for transactions of all accounts.
	         *
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAllTransactions",
	        value: function forAllTransactions() {
	            this._payload.access.resources.push({
	                allTransactions: {}
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for transactions of all accounts at a given bank.
	         *
	         * @param {String} bankId - id of the bank
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAllTransactionsAtbank",
	        value: function forAllTransactionsAtbank(bankId) {
	            this._payload.access.resources.push({
	                allTransactionsAtBank: {
	                    bankId: bankId
	                }
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for transactions of one account.
	         *
	         * @param {String} accountId - id of the account
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAccountTransactions",
	        value: function forAccountTransactions(accountId) {
	            this._payload.access.resources.push({
	                transactions: {
	                    accountId: accountId
	                }
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for balances of all accounts.
	         *
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAllBalances",
	        value: function forAllBalances() {
	            this._payload.access.resources.push({
	                allBalances: {}
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for balances of all accounts at a given bank.
	         *
	         * @param {String} bankId - id of the bank
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAllBalancesAtBank",
	        value: function forAllBalancesAtBank(bankId) {
	            this._payload.access.resources.push({
	                allBalancesAtBank: {
	                    bankId: bankId
	                }
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for balance of one account.
	         *
	         * @param {String} accountId - id of the account
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAccountBalances",
	        value: function forAccountBalances(accountId) {
	            this._payload.access.resources.push({
	                balance: {
	                    accountId: accountId
	                }
	            });
	            return this;
	        }

	        /**
	         * Adds a resource for full access.
	         *
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "forAll",
	        value: function forAll() {
	            return this.forAllAccounts().forAllAddresses().forAllTransactions().forAllBalances();
	        }

	        /**
	         * Sets the expiration date of the token.
	         *
	         * @param {number} expiresAtMs - expiration date in milliseconds
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setExpiresAtMs",
	        value: function setExpiresAtMs(expiresAtMs) {
	            this._payload.expiresAtMs = expiresAtMs;
	            return this;
	        }

	        /**
	         * Sets the endorse token timeout.
	         *
	         * @param {number} endorseUntilMs - time at which no more endorsements can be made
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setEndorseUntilMs",
	        value: function setEndorseUntilMs(endorseUntilMs) {
	            this._payload.endorseUntilMs = endorseUntilMs;
	            return this;
	        }

	        /**
	         * Sets the effective date of the token.
	         *
	         * @param {number} effectiveAtMs - effective date in milliseconds
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setEffectiveAtMs",
	        value: function setEffectiveAtMs(effectiveAtMs) {
	            this._payload.effectiveAtMs = effectiveAtMs;
	            return this;
	        }

	        /**
	         * Sets the description of the token.
	         *
	         * @param {string} description - description
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setDescription",
	        value: function setDescription(description) {
	            this._payload.description = description;
	            return this;
	        }

	        /**
	         * Sets the alias of the grantee.
	         *
	         * @param {Object} toAlias - alias of the grantee
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setToAlias",
	        value: function setToAlias(toAlias) {
	            if (!this._payload.to) {
	                this._payload.to = {};
	            }
	            this._payload.to.alias = toAlias;
	            return this;
	        }

	        /**
	         * Sets the memberId of the grantee.
	         *
	         * @param {string} toMemberId - memberId of the grantee
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setToMemberId",
	        value: function setToMemberId(toMemberId) {
	            if (!this._payload.to) {
	                this._payload.to = {};
	            }
	            this._payload.to.id = toMemberId;
	            return this;
	        }

	        /**
	         * Sets the realm of the grantee.
	         *
	         * @param {string} realm - realm of the grantee
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setToRealm",
	        value: function setToRealm(realm) {
	            if (!this._payload.to) {
	                this._payload.to = {};
	            }
	            this._payload.to.realm = realm;
	            return this;
	        }

	        /**
	         * Sets the refId on the token.
	         *
	         * @param {string} refId - client generated reference id
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setRefId",
	        value: function setRefId(refId) {
	            this._payload.refId = refId;
	            return this;
	        }

	        /**
	         * Sets acting as on the token.
	         *
	         * @param {Object} actingAs - entity the redeemer is acting on behalf of
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setActingAs",
	        value: function setActingAs(actingAs) {
	            this._payload.actingAs = actingAs;
	            return this;
	        }

	        /**
	         * Sets the token request ID.
	         *
	         * @param {string} tokenRequestId - token request id
	         * @return {AccessTokenBuilder} builder - returns back the builder object
	         */

	    }, {
	        key: "setTokenRequestId",
	        value: function setTokenRequestId(tokenRequestId) {
	            this._tokenRequestId = tokenRequestId;
	            return this;
	        }

	        /**
	         * Builds the token payload.
	         *
	         * @return {Object} tokenPayload - token payload
	         */

	    }, {
	        key: "build",
	        value: function build() {
	            return this._payload;
	        }

	        /**
	         * Executes the createToken API call to the server, and returns a promise with the token.
	         *
	         * @return {Promise} token - the created and filled access token
	         */

	    }, {
	        key: "execute",
	        value: function execute() {
	            var _this = this;

	            return regeneratorRuntime.async(function execute$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            return _context2.abrupt("return", _Util2.default.callAsync(this.execute, function _callee() {
	                                var res, error;
	                                return regeneratorRuntime.async(function _callee$(_context) {
	                                    while (1) {
	                                        switch (_context.prev = _context.next) {
	                                            case 0:
	                                                if (!(_this._payload.access.resources.length < 1)) {
	                                                    _context.next = 2;
	                                                    break;
	                                                }

	                                                throw new Error('Must have at least one resource');

	                                            case 2:
	                                                if (!(!_this._payload.to || !_this._payload.to.alias && !_this._payload.to.id)) {
	                                                    _context.next = 4;
	                                                    break;
	                                                }

	                                                throw new Error('No recipient on token');

	                                            case 4:
	                                                _context.next = 6;
	                                                return regeneratorRuntime.awrap(_this._client.createAccessToken(_this._payload, _this._tokenRequestId));

	                                            case 6:
	                                                res = _context.sent;

	                                                if (!(res.data.status === "FAILURE_EXTERNAL_AUTHORIZATION_REQUIRED")) {
	                                                    _context.next = 11;
	                                                    break;
	                                                }

	                                                error = new Error("FAILURE_EXTERNAL_AUTHORIZATION_REQUIRED");

	                                                error.authorizationDetails = res.data.authorizationDetails;
	                                                throw error;

	                                            case 11:
	                                                return _context.abrupt("return", res.data.token);

	                                            case 12:
	                                            case "end":
	                                                return _context.stop();
	                                        }
	                                    }
	                                }, null, _this);
	                            }));

	                        case 1:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, null, this);
	        }
	    }]);

	    return AccessTokenBuilder;
	}();

	exports.default = AccessTokenBuilder;

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TokenRequest = function () {
	    /**
	     * Constructs a TokenRequest.
	     *
	     * @param {Object} payload - token payload
	     */
	    function TokenRequest(payload) {
	        _classCallCheck(this, TokenRequest);

	        this.payload = payload;
	        this.options = {};
	    }

	    /**
	     * Creates a TokenRequest object
	     *
	     * @param {Object} payload - payload of the access or transfer token
	     * @return {TokenRequest} - TokenRequest object
	     */


	    _createClass(TokenRequest, [{
	        key: "setEmail",


	        /**
	         * Sets a default email for the TokenRequest
	         *
	         * @param {string} email - default email
	         * @return {TokenRequest} tokenRequest - token request
	         */
	        value: function setEmail(email) {
	            this.options.email = email;
	            return this;
	        }

	        /**
	         * Sets a default bank ID for the TokenRequest
	         *
	         * @param {string} bankId - bank ID
	         * @return {TokenRequest} tokenRequest - token request
	         */

	    }, {
	        key: "setBankId",
	        value: function setBankId(bankId) {
	            this.options.bankId = bankId;
	            return this;
	        }

	        /**
	         * Sets a redirect URL for the TokenRequest
	         *
	         * @param {string} redirectUrl - redirect URL
	         * @return {TokenRequest} tokenRequest - token request
	         */

	    }, {
	        key: "setRedirectUrl",
	        value: function setRedirectUrl(redirectUrl) {
	            this.options.redirectUrl = redirectUrl;
	            return this;
	        }
	    }], [{
	        key: "create",
	        value: function create(payload) {
	            return new TokenRequest(payload);
	        }
	    }]);

	    return TokenRequest;
	}();

	exports.default = TokenRequest;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   3.3.1
	 */

	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';

	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}

	function isFunction(x) {
	  return typeof x === 'function';
	}

	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}

	var isArray = _isArray;

	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;

	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};

	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}

	function setAsap(asapFn) {
	  asap = asapFn;
	}

	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}

	// vertx
	function useVertxTimer() {
	  return function () {
	    vertxNext(flush);
	  };
	}

	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });

	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}

	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}

	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}

	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];

	    callback(arg);

	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }

	  len = 0;
	}

	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(74);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}

	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}

	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;

	  var parent = this;

	  var child = new this.constructor(noop);

	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }

	  var _state = parent._state;

	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }

	  return child;
	}

	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:

	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });

	  promise.then(function(value){
	    // value === 1
	  });
	  ```

	  Instead of writing the above, your code now simply becomes the following:

	  ```javascript
	  let promise = Promise.resolve(1);

	  promise.then(function(value){
	    // value === 1
	  });
	  ```

	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;

	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }

	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}

	var PROMISE_ID = Math.random().toString(36).substring(16);

	function noop() {}

	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;

	var GET_THEN_ERROR = new ErrorObject();

	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}

	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}

	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}

	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}

	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;

	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));

	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}

	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}

	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}

	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}

	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }

	  publish(promise);
	}

	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }

	  promise._result = value;
	  promise._state = FULFILLED;

	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}

	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;

	  asap(publishRejection, promise);
	}

	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;

	  parent._onerror = null;

	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;

	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}

	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;

	  if (subscribers.length === 0) {
	    return;
	  }

	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;

	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];

	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }

	  promise._subscribers.length = 0;
	}

	function ErrorObject() {
	  this.error = null;
	}

	var TRY_CATCH_ERROR = new ErrorObject();

	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}

	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;

	  if (hasCallback) {
	    value = tryCatch(callback, detail);

	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value = null;
	    } else {
	      succeeded = true;
	    }

	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }

	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}

	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}

	var id = 0;
	function nextId() {
	  return id++;
	}

	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}

	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);

	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }

	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;

	    this._result = new Array(this.length);

	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}

	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};

	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;

	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};

	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;

	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);

	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};

	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;

	  if (promise._state === PENDING) {
	    this._remaining--;

	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }

	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};

	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;

	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};

	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.

	  Example:

	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];

	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```

	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:

	  Example:

	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];

	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```

	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}

	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.

	  Example:

	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });

	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });

	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```

	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:

	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });

	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });

	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```

	  An example real-world use case is implementing timeouts:

	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```

	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;

	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}

	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:

	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });

	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```

	  Instead of writing the above, your code now simply becomes the following:

	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));

	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```

	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}

	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}

	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}

	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.

	  Terminology
	  -----------

	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.

	  A promise can be in one of three states: pending, fulfilled, or rejected.

	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.

	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.


	  Basic Usage:
	  ------------

	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);

	    // on failure
	    reject(reason);
	  });

	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```

	  Advanced Usage:
	  ---------------

	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.

	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();

	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();

	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }

	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```

	  Unlike callbacks, promises are great composable primitives.

	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON

	    return values;
	  });
	  ```

	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];

	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}

	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;

	Promise.prototype = {
	  constructor: Promise,

	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,

	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};

	function polyfill() {
	    var local = undefined;

	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }

	    var P = local.Promise;

	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }

	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }

	    local.Promise = Promise;
	}

	polyfill();
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;

	return Promise;

	})));
	//# sourceMappingURL=es6-promise.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))

/***/ }),
/* 74 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ })
/******/ ])
});
;